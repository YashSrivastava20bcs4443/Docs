
import requests
import csv
import time
from datetime import datetime

# Define Prometheus server URL (without hardcoding step in the base URL)
prometheus_url = "http://192.168.31.193:9090/api/v1/query"

# Function to fetch data from Prometheus with the query and step parameter
def fetch_prometheus_data(query, step="1440m"):
    response = requests.get(prometheus_url, params={'query': query, 'step': step})
    result = response.json()
    return result['data']['result']

# Queries for CPU and Memory Utilization
windows_cpu_query = '100 * max_over_time(rate(windows_cpu_time_total{mode="user", job="windows_server"}[1m])[24h:])'
windows_memory_query = '100 * (1 - avg_over_time(windows_cs_physical_memory_free_bytes{job="windows_server"}[24h]) / windows_cs_physical_memory_total_bytes{job="windows_server"})'
linux_cpu_query = '100 * max_over_time(rate(node_cpu_seconds_total{mode="user", job="linux_server"}[1m])[24h:])'
linux_memory_query = '100 * (1 - avg_over_time(node_memory_MemAvailable_bytes{job="linux_server"}[24h]) / node_memory_MemTotal_bytes{job="linux_server"})'

# Fetch data with step size of 1440m (24 hours)
windows_cpu_data = fetch_prometheus_data(windows_cpu_query)
windows_memory_data = fetch_prometheus_data(windows_memory_query)
linux_cpu_data = fetch_prometheus_data(linux_cpu_query)
linux_memory_data = fetch_prometheus_data(linux_memory_query)

# Get current timestamp
timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")

# Save to CSV
csv_filename = f"prometheus_data_{int(time.time())}.csv"
with open(csv_filename, mode='w', newline='') as file:
    writer = csv.writer(file)
    writer.writerow(['Timestamp', 'Job', 'Metric', 'Instance', 'Value'])

    # Write Windows CPU data
    for item in windows_cpu_data:
        writer.writerow([timestamp, 'windows_server', 'CPU Utilization (%)', item['metric']['instance'], item['value'][1]])

    # Write Windows Memory data
    for item in windows_memory_data:
        writer.writerow([timestamp, 'windows_server', 'Memory Utilization (%)', item['metric']['instance'], item['value'][1]])

    # Write Linux CPU data
    for item in linux_cpu_data:
        writer.writerow([timestamp, 'linux_server', 'CPU Utilization (%)', item['metric']['instance'], item['value'][1]])

    # Write Linux Memory data
    for item in linux_memory_data:
        writer.writerow([timestamp, 'linux_server', 'Memory Utilization (%)', item['metric']['instance'], item['value'][1]])

print(f"Data saved to {csv_filename}")
