const axios = require('axios');
const { Pool } = require('pg');
const moment = require('moment-timezone');
const fs = require('fs');
const { Parser } = require('json2csv');

// --- Direct Configuration Values ---
const DB_USER = 'postgres';
const DB_HOST = '10.7.32.134';
const DB_NAME = 'postgres';
const DB_PASSWORD = 'automation@123';
const DB_PORT = 5432;

const API_URL = "https://api-c48.nice-incontact.com/incontactapi/services/v31.0/contacts/completed";
const ACCESS_TOKEN_URL = "http://ctiintegrationapi.operations.fareportal.com.local/api/Agent/accessToken";

// --- PostgreSQL Connection Pool ---
const pool = new Pool({
  user: DB_USER,
  host: DB_HOST,
  database: DB_NAME,
  password: DB_PASSWORD,
  port: DB_PORT,
});

// --- CSV File Configuration ---
const CSV_FILE_PATH = './contact_data.csv';

// --- Function: saveDataToCSV ---
// Saves fetched API data into a CSV file (excluding "tags" column)
async function saveDataToCSV(records) {
  if (!records || records.length === 0) {
    console.log("No records to save to CSV.");
    return;
  }

  // Exclude "tags" column
  records.forEach(record => delete record.tags);

  const fields = Object.keys(records[0]); // Get CSV headers
  const json2csvParser = new Parser({ fields });
  const csvData = json2csvParser.parse(records);

  fs.writeFileSync(CSV_FILE_PATH, csvData);
  console.log(`Data saved to CSV: ${CSV_FILE_PATH}`);
}

// --- Function: insertCSVToDatabase ---
// Reads CSV and inserts data into PostgreSQL, then deletes CSV
async function insertCSVToDatabase() {
  try {
    const csvContent = fs.readFileSync(CSV_FILE_PATH, 'utf8');
    const lines = csvContent.split('\n');
    const headers = lines[0].split(',');

    // Remove "tags" column from headers (if it exists)
    const filteredHeaders = headers.filter(header => header.trim() !== 'tags');

    for (let i = 1; i < lines.length; i++) {
      const values = lines[i].split(',');
      if (values.length !== headers.length) continue; // Skip malformed rows

      const filteredValues = values.filter((_, index) => headers[index].trim() !== 'tags');

      const query = `
        INSERT INTO contact_data (${filteredHeaders.join(', ')})
        VALUES (${filteredHeaders.map((_, idx) => `$${idx + 1}`).join(', ')})
      `;

      await pool.query(query, filteredValues);
    }

    console.log(`Inserted ${lines.length - 1} records into the database.`);
    
    // Delete CSV file after insertion
    fs.unlinkSync(CSV_FILE_PATH);
    console.log(`CSV file deleted: ${CSV_FILE_PATH}`);

  } catch (error) {
    console.error("Error inserting CSV data into database:", error);
  }
}

// --- Function: fetchAndDumpToCSV ---
// Fetches API data, saves it to CSV, inserts CSV data into DB, and deletes the CSV.
async function fetchAndDumpToCSV() {
  console.log("Starting data ingestion process...");

  const records = await fetchAPIData();
  await saveDataToCSV(records);
  await insertCSVToDatabase();
}

// --- Main Execution ---
(async () => {
  try {
    console.log("Starting initialization...");
    await initializeDatabase();
    console.log("Initialization complete. Fetching and inserting data via CSV...");
    await fetchAndDumpToCSV();
    console.log("Data ingestion process complete.");
  } catch (error) {
    console.error("Error in main execution:", error);
  } finally {
    pool.end();
  }
})();
