# Function to get SentinelOne version
function Get-SentinelOneVersion {
    $sentinelFolder = Get-ChildItem "C:\Program Files\SentinelOne" -Directory -ErrorAction SilentlyContinue | Select-Object -First 1 -ExpandProperty FullName

    if ($sentinelFolder) {
        $sentinelVersion = (Get-Item "$sentinelFolder\SentinelAgent.exe").VersionInfo.ProductVersion
        return $sentinelVersion.Trim()
    } else {
        return "SentinelOne folder not found"
    }
}

# Function to check for security patches
function Check-SecurityPatches {
    $output = Get-WmiObject -Class 'win32_quickfixengineering' -ErrorAction SilentlyContinue

    if (-not $output) {
        return "No Security Patches Found"
    }

    $securityUpdates = @()

    foreach ($patch in $output) {
        if ($patch.Description -match "Security Update") {
            $installedOnDate = [datetime]::ParseExact($patch.InstalledOn, "yyyyMMdd", $null)
            $securityUpdates += [pscustomobject]@{
                InstalledOn = $installedOnDate
                HotfixID = $patch.HotFixID
            }
        }
    }

    if ($securityUpdates.Count -gt 0) {
        $latestUpdate = $securityUpdates | Sort-Object InstalledOn -Descending | Select-Object -First 1
        return "Latest Security Patch Installed On: $($latestUpdate.InstalledOn.ToString('dd-MM-yyyy')) (HotFixID: $($latestUpdate.HotfixID))"
    } else {
        return "No Security Updates Found"
    }
}

# Function to check NTP configuration using 'w32tm /query /status'
function Check-NTP {
    $ntpCommand = 'w32tm /query /status'
    $output = w32tm /query /status -ErrorAction SilentlyContinue

    if ($output -and $output -match "Source") {
        $ntpSource = $output -split "Source:\s+" | Select-Object -Last 1
        return "NTP Source: $ntpSource"
    } else {
        return "NTP Not Configured"
    }
}

# Function to check WinCollect status and version
function Check-WinCollect {
    $winCollectService = Get-Service -Name "WinCollect" -ErrorAction SilentlyContinue
    if ($winCollectService -and $winCollectService.Status -eq 'Running') {
        $winCollectVersion = (Get-Item "C:\Program Files\IBM\WinCollect\WinCollect.exe").VersionInfo.ProductVersion
        return "Running (Version: $winCollectVersion)"
    } elseif ($winCollectService) {
        return "Installed but not Running"
    } else {
        return "WinCollect Not Installed"
    }
}

# Function to check Windows compliance
function Check-ComplianceWindows {
    $compliance = @{ }

    # OS information
    $osInfo = Get-WmiObject -Class 'Win32_OperatingSystem' -ErrorAction SilentlyContinue
    $compliance["OS"] = $osInfo.Caption.Trim()

    # SentinelOne status
    $sentinelStatus = Get-Service -Name "SentinelAgent" -ErrorAction SilentlyContinue
    if ($sentinelStatus -and $sentinelStatus.Status -eq 'Running') {
        $sentinelVersion = Get-SentinelOneVersion
        $compliance["SentinelOne"] = "Running (Version: $sentinelVersion)"
    } else {
        $compliance["SentinelOne"] = "Not Installed or Not Running"
    }

    # Security patches
    $compliance["Patches"] = Check-SecurityPatches

    # NTP configuration
    $compliance["NTP"] = Check-NTP

    # Windows activation status
    $activationStatus = Get-WmiObject -Class 'SoftwareLicensingProduct' -ErrorAction SilentlyContinue
    if ($activationStatus.LicenseStatus -eq 1) {
        $compliance["WindowsActivation"] = "Activated"
    } else {
        $compliance["WindowsActivation"] = "Not Activated"
    }

    # WinCollect status
    $compliance["WinCollect"] = Check-WinCollect

    return $compliance
}

# Function to read hostnames from a text file
function Read-Hostnames {
    param (
        [string]$FilePath
    )
    return Get-Content -Path $FilePath
}

# Main function
function Main {
    $hostnameFilePath = "D:\VS CODE\python\comp\test.txt" 
    $csvFilePath = "D:\VS CODE\python\comp\compliance_report.csv" 
    $hostnames = Read-Hostnames -FilePath $hostnameFilePath

    # Create CSV file and write header
    $header = "Hostname,OS,SentinelOne,Patches,NTP,WindowsActivation,WinCollect"
    Set-Content -Path $csvFilePath -Value $header

    foreach ($assetName in $hostnames) {
        Write-Host "Checking $assetName..."
        $complianceResults = Check-ComplianceWindows

        # Prepare row data
        $rowData = "$assetName," + ($complianceResults["OS"]) + "," + ($complianceResults["SentinelOne"]) + "," +
                   ($complianceResults["Patches"]) + "," + ($complianceResults["NTP"]) + "," +
                   ($complianceResults["WindowsActivation"]) + "," + ($complianceResults["WinCollect"])

        # Append row data to CSV
        Add-Content -Path $csvFilePath -Value $rowData
    }

    Write-Host "Compliance report generated successfully at $csvFilePath."
}

# Run the script
Main
