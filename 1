import os
import shutil
import time
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.common.action_chains import ActionChains
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.chrome.options import Options
import smtplib
from email.mime.multipart import MIMEMultipart
from email.mime.text import MIMEText
from email.mime.image import MIMEImage

# Function to move the mouse to a specific position without clicking and take a full-page screenshot
def move_mouse_and_screenshot(driver, filename, x, y, wait_time=30):
    actions = ActionChains(driver)
    actions.move_by_offset(x, y).perform()  # Move the mouse without clicking
    time.sleep(wait_time)  # Wait for the specified time
    driver.save_screenshot(filename)  # Take a full-page screenshot

# Function to send email with inline screenshots
def send_email(owner_email, screenshot_filenames, smtp_server, smtp_port, sender_email, sender_password):
    msg = MIMEMultipart()
    msg["From"] = sender_email
    msg["To"] = owner_email
    msg["Subject"] = "Automated screenshots"

    body = """
    <html>
        <body>
            <p>Hi Team,</p>
            <p>Please find the attached screenshots:</p>
    """
    for screenshot in screenshot_filenames:
        body += f'<p><img src="cid:{os.path.basename(screenshot)}"></p>'
    
    body += """
            <p>Thanks & Regards,<br>EMS Team</p>
        </body>
    </html>
    """
    msg.attach(MIMEText(body, "html"))

    for screenshot in screenshot_filenames:
        with open(screenshot, "rb") as f:
            img = MIMEImage(f.read())
            img.add_header("Content-ID", f"<{os.path.basename(screenshot)}>")
            msg.attach(img)

    with smtplib.SMTP(smtp_server, smtp_port) as server:
        server.starttls()
        server.login(sender_email, sender_password)
        server.send_message(msg)

# Main script
def main():
    # Setup Chrome options
    chrome_options = Options()
    chrome_options.add_argument("--start-maximized")
    chrome_options.add_argument("window-size=1024,768")  # Adjust window size to 55% of the screen
    chrome_options.add_argument("window-position=0,0")

    # Path to your ChromeDriver
    driver_path = "path_to_chromedriver"

    # Initialize the WebDriver
    driver = webdriver.Chrome(service=Service(driver_path), options=chrome_options)

    try:
        # Site login details
        site_url = "https://10.1.3.96/"
        site_username = "your_site_username"
        site_password = "your_site_password"

        # Email details
        smtp_server = "smtp.example.com"
        smtp_port = 587
        sender_email = "your_email@example.com"
        sender_password = "your_email_password"
        owner_email = "recipient@example.com"

        # Temp directory to store screenshots
        temp_dir = "Temp"
        os.makedirs(temp_dir, exist_ok=True)

        # Login to the site
        driver.get(site_url)
        WebDriverWait(driver, 10).until(EC.element_to_be_clickable((By.ID, "username"))).send_keys(site_username)
        WebDriverWait(driver, 10).until(EC.element_to_be_clickable((By.ID, "password"))).send_keys(site_password)
        WebDriverWait(driver, 10).until(EC.element_to_be_clickable((By.ID, "submit"))).click()

        # Preallocated position screenshot
        preallocated_position = (615, 540)
        preallocated_screenshot = f"{temp_dir}/preallocated_screenshot.png"
        move_mouse_and_screenshot(driver, preallocated_screenshot, *preallocated_position)

        # Performance position screenshot
        performance_position = (655, 534)
        performance_screenshot = f"{temp_dir}/performance_screenshot.png"
        move_mouse_and_screenshot(driver, performance_screenshot, *performance_position, wait_time=50)

        # Service position screenshot
        service_position = (700, 560)
        service_screenshot = f"{temp_dir}/service_screenshot.png"
        move_mouse_and_screenshot(driver, service_screenshot, *service_position, wait_time=50)

        # Send email with the screenshots
        send_email(owner_email, [preallocated_screenshot, performance_screenshot, service_screenshot], 
                   smtp_server, smtp_port, sender_email, sender_password)

    finally:
        driver.quit()
        shutil.rmtree(temp_dir)

if __name__ == "__main__":
    main()
