app.get('/api/stats', async (req, res) => {
    try {
        const { startDate, endDate, portal, tfn } = req.query;
        console.log('Stats Request Params:', { startDate, endDate, portal, tfn }); // Debug

        let query = `
            SELECT
                COUNT(*) FILTER (WHERE "masterContactId" = "contactId" AND "isOutbound" = 'False' AND "mediaTypeId" = '4') AS ivr_offered,
                COUNT(*) FILTER (WHERE "masterContactId" = "contactId" AND "isOutbound" = 'False' AND "mediaTypeId" = '4' 
                    AND "agentSeconds"::numeric = 0 AND "inQueueSeconds"::numeric = 0 
                    AND "abandoned" = 'False' AND "preQueueSeconds"::numeric > 1 
                    AND "endReason" = 'Contact Hung Up') AS ivr_abandoned,
                COUNT(*) FILTER (WHERE "masterContactId" = "contactId" AND "isOutbound" = 'False' AND "mediaTypeId" = '4' 
                    AND "agentSeconds"::numeric = 0 AND "inQueueSeconds"::numeric > 0 
                    AND "abandoned" = 'True' AND "preQueueSeconds"::numeric > 0) AS queue_abandoned,
                COUNT(*) FILTER (WHERE "masterContactId" = "contactId" AND "isOutbound" = 'False' AND "mediaTypeId" = '4' 
                    AND "agentSeconds"::numeric = 0 AND "inQueueSeconds"::numeric = 0 
                    AND "abandoned" = 'False' AND "preQueueSeconds"::numeric > 1 
                    AND "endReason" = 'Contact Hang Up via Script') AS closed_by_ivr,
                COUNT(*) FILTER (WHERE "masterContactId" = "contactId" AND "isOutbound" = 'False' AND "mediaTypeId" = '4' 
                    AND "abandoned" = 'True' AND "preQueueSeconds"::numeric < 10) AS abandoned_in_10_sec,
                COUNT(*) FILTER (WHERE "masterContactId" = "contactId" AND "isOutbound" = 'False' AND "mediaTypeId" = '4' 
                    AND "abandoned" = 'True' AND "preQueueSeconds"::numeric > 10) AS abandoned_in_over_10_sec,
                COUNT(*) FILTER (WHERE "masterContactId" = "contactId" AND "isOutbound" = 'False' AND "mediaTypeId" = '4' 
                    AND "abandoned" = 'False' AND "agentSeconds"::numeric > 0) AS answered_calls
            FROM contact_mapped_data
        `;

        const queryParams = [];
        let paramIndex = 1;

        // Set default date to current date if not provided
        const currentDate = new Date().toISOString().split('T')[0]; // e.g., '2025-04-13'
        if (!startDate && !endDate) {
            query += ' WHERE to_date("contactStartDate", \'YYYY-MM-DD\') = $' + paramIndex++;
            queryParams.push(currentDate);
        } else if (startDate && endDate) {
            query += ' WHERE to_date("contactStartDate", \'YYYY-MM-DD\') BETWEEN $' + paramIndex++ + ' AND $' + paramIndex++;
            queryParams.push(startDate, endDate);
        }

        if (portal) {
            query += queryParams.length ? ' AND' : ' WHERE';
            query += ' "Portal" ILIKE $' + paramIndex++;
            queryParams.push(portal);
        }
        if (tfn) {
            query += queryParams.length ? ' AND' : ' WHERE';
            query += ' "TFN Type" ILIKE $' + paramIndex++;
            queryParams.push(tfn);
        }

        console.log('Executing Stats Query:', query.trim()); // Debug the full query
        console.log('Query Params:', queryParams); // Debug parameters

        const result = await pool.query(query, queryParams);
        console.log('Query Result:', result.rows); // Debug result

        res.json(result.rows[0]);
    } catch (err) {
        console.error('Error fetching stats:', err);
        res.status(500).json({ error: 'Internal Server Error' });
    }
});
