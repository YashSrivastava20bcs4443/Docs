import re

def decode_vbe(input_file, output_file):
    try:
        # Read the .vbe file
        with open(input_file, 'r', encoding='utf-8', errors='ignore') as f:
            encoded_content = f.read()

        # Debugging: Print first 100 characters and last 50 characters
        print(f"First 100 characters of file: {encoded_content[:100]}")
        print(f"Last 50 characters of file: {encoded_content[-50:]}")

        # Remove leading/trailing whitespace
        encoded_content = encoded_content.strip()

        # Check for #@~^ or @@~^ marker
        if not (encoded_content.startswith('#@~^') or encoded_content.startswith('@@~^')):
            print("Error: File does not start with #@~^ or @@~^ marker.")
            print("This may not be a standard .vbe file.")
            return

        # Try to find encoded data
        match = re.search(r'[@#]@~[\^](.*?)(==\^@#|$)', encoded_content, re.DOTALL)
        if not match:
            print("Error: Could not find encoded data between @~^ and ==^@#.")
            print("Possible issues: Missing ==^@# marker or non-standard encoding.")
            return

        encoded_data = match.group(1)
        print(f"Found encoded data (length: {len(encoded_data)} characters)")

        # Attempt to detect a key table (simplified heuristic)
        # Some .vbe files include a table before or after the encoded data
        key_table = None
        table_match = re.search(r'([A-Za-z0-9+/=]{64,})', encoded_content)
        if table_match:
            print("Possible key table detected (first 50 chars):", table_match.group(1)[:50])
            # Placeholder: Weâ€™d need to parse this table correctly
            # For now, use default table
            key_table = [[chr(i) for i in range(128)] for _ in range(3)]
        else:
            print("No key table detected; using default ASCII table.")
            key_table = [[chr(i) for i in range(128)] for _ in range(3)]

        # Decode the script
        decoded = ''
        escape = False
        table_index = 0

        i = 0
        while i < len(encoded_data):
            char = encoded_data[i]

            if char == '@' and not escape:
                escape = True
                i += 1
                continue

            if escape:
                if char == '&':
                    decoded += '\r\n'
                elif char == '#':
                    decoded += '\r'
                elif char == '(':
                    table_index = (table_index + 1) % 3
                elif char == ')':
                    table_index = (table_index - 1) % 3
                elif char == '^':
                    decoded += '@'
                elif char == '+':
                    decoded += ' '
                elif char == '<':
                    decoded += '<'
                elif char == '>':
                    decoded += '>'
                elif char == '*':
                    decoded += '*'
                elif char == '/':
                    decoded += '/'
                else:
                    decoded += char  # Handle unexpected escape chars
                escape = False
            else:
                if ord(char) < 128:
                    decoded += key_table[table_index][ord(char)]
                else:
                    decoded += char

            i += 1

        # Print preview of decoded content (first 1000 characters)
        print("\nDecoded Content Preview (first 1000 characters):\n")
        print(decoded[:1000])
        print("\n" + "-"*50 + "\n")

        # Write the decoded output to the file
        with open(output_file, 'w', encoding='utf-8') as f:
            f.write(decoded)
        print(f"Decoded script written to {output_file}")

        # Save raw encoded data for analysis
        raw_output = output_file + ".raw.txt"
        with open(raw_output, 'w', encoding='utf-8') as f:
            f.write(encoded_data)
        print(f"Raw encoded data written to {raw_output}")

    except FileNotFoundError:
        print(f"Error: File '{input_file}' not found.")
    except Exception as e:
        print(f"Error during decoding: {str(e)}")

def main():
    # Prompt user for input and output file paths
    input_file = input("Enter the path to the .vbe file: ").strip()
    output_file = input("Enter the path for the decoded output file (e.g., decoded.txt): ").strip()

    decode_vbe(input_file, output_file)

if __name__ == "__main__":
    main()
