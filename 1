import requests
from requests.auth import HTTPBasicAuth
import urllib3
import os
import logging

# Disable warnings for self-signed certificates
urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

# Configurations
BASE_URL = "https://<storage-system-ip>/ConfigurationManager/v1"
USERNAME = os.getenv("HITACHI_API_USER", "<your-username>")
PASSWORD = os.getenv("HITACHI_API_PASS", "<your-password>")

# Logging setup
logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s")

# Function to fetch data
def fetch_data(endpoint):
    url = f"{BASE_URL}/{endpoint}"
    try:
        response = requests.get(
            url,
            auth=HTTPBasicAuth(USERNAME, PASSWORD),
            headers={"Accept": "application/json"},
            verify=False
        )
        logging.info(f"Request URL: {url}")
        logging.info(f"Status Code: {response.status_code}")
        
        if response.status_code == 200:
            logging.info("Response JSON: %s", response.json())
            return response.json()
        else:
            logging.error("Error Response: %s", response.text)
            return None
    except Exception as e:
        logging.error(f"Error occurred: {e}")
        return None

# Function to fetch supported resources for a storage device
def discover_resources(storage_device_id):
    logging.info(f"Discovering resources for storage device ID: {storage_device_id}")
    return fetch_data(f"objects/storages/{storage_device_id}")

# Main function
if __name__ == "__main__":
    logging.info("Starting the script...")
    
    # Fetch all storage devices
    devices = fetch_data("objects/storages")
    if not devices or "data" not in devices:
        logging.error("No storage devices found!")
    else:
        for device in devices["data"]:
            storage_device_id = device["storageDeviceId"]
            logging.info(f"Exploring storage device: {storage_device_id}")
            
            # Discover available resources
            resources = discover_resources(storage_device_id)
            if resources:
                logging.info(f"Discovered resources for {storage_device_id}: {resources}")
            else:
                logging.warning(f"No resources found for {storage_device_id}.")
