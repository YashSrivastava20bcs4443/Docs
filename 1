import pandas as pd
from statsmodels.tsa.arima.model import ARIMA
from sklearn.metrics import mean_absolute_error, mean_squared_error
import numpy as np

# Step 1: Load the CSV with the correct header row
data = pd.read_csv('your_data.csv', header=3)  # Adjust the header row if necessary

# Step 2: Filter for the required data
# Assuming we're interested in the 'Processor % Processor Time Total' for CPU and 'Percent Memory Used' for Memory

cpu_data = data[data['Rule'].str.contains('Processor % Processor Time Total', na=False)]
memory_data = data[data['Rule'].str.contains('Percent Memory Used', na=False)]

# Step 3: Data Preprocessing
# Convert the 'Interval' column to datetime
cpu_data['Interval'] = pd.to_datetime(cpu_data['Interval'], format='%m/%d/%Y')
memory_data['Interval'] = pd.to_datetime(memory_data['Interval'], format='%m/%d/%Y')

# Set the 'Interval' as the index
cpu_data.set_index('Interval', inplace=True)
memory_data.set_index('Interval', inplace=True)

# Select the 'Average' column for modeling
cpu_ts = cpu_data['Average']
memory_ts = memory_data['Average']

# Step 4: Forecasting using ARIMA
def forecast_arima(ts, order=(5, 1, 0), steps=1):
    model = ARIMA(ts, order=order)
    model_fit = model.fit()
    forecast = model_fit.forecast(steps=steps)
    return forecast, model_fit

# Forecast CPU usage
cpu_forecast, cpu_model = forecast_arima(cpu_ts)

# Forecast Memory usage
memory_forecast, memory_model = forecast_arima(memory_ts)

# Step 5: Calculate Accuracy
def calculate_accuracy(ts, model):
    forecast = model.forecast(steps=1)[0]
    actual = ts[-1]  # Last known value
    mae = mean_absolute_error([actual], [forecast])
    mse = mean_squared_error([actual], [forecast])
    rmse = np.sqrt(mse)
    return forecast, mae, mse, rmse

# Calculate accuracy for CPU
cpu_pred, cpu_mae, cpu_mse, cpu_rmse = calculate_accuracy(cpu_ts, cpu_model)
print(f"Forecasted CPU Usage: {cpu_pred}")
print(f"CPU MAE: {cpu_mae}, MSE: {cpu_mse}, RMSE: {cpu_rmse}")

# Calculate accuracy for Memory
memory_pred, memory_mae, memory_mse, memory_rmse = calculate_accuracy(memory_ts, memory_model)
print(f"Forecasted Memory Usage: {memory_pred}")
print(f"Memory MAE: {memory_mae}, MSE: {memory_mse}, RMSE: {memory_rmse}")
