import pandas as pd
import matplotlib.pyplot as plt
from fbprophet import Prophet

# Load the CSV data
data = pd.read_csv('cpu_memory_usage.csv')

# Data Preprocessing
# Filter the data based on 'Rule' column content
cpu_data = data[data['Rule'].str.contains('Processor % Processor Time Total', case=False)]  # CPU Data
memory_data = data[data['Rule'].str.contains('Percent Memory Used', case=False)]  # Memory Data

# Create a time series dataframe suitable for Prophet
# Assuming 'Interval' has the timestamps and 'Average' has the usage values
cpu_ts = cpu_data[['Interval', 'Average']].rename(columns={'Interval': 'ds', 'Average': 'y'})
memory_ts = memory_data[['Interval', 'Average']].rename(columns={'Interval': 'ds', 'Average': 'y'})

# Convert 'ds' column to datetime
cpu_ts['ds'] = pd.to_datetime(cpu_ts['ds'])
memory_ts['ds'] = pd.to_datetime(memory_ts['ds'])

# Prophet expects daily data; if data is more granular, you might need to aggregate it
# Example: Aggregating to daily average
cpu_ts = cpu_ts.resample('D', on='ds').mean().reset_index()
memory_ts = memory_ts.resample('D', on='ds').mean().reset_index()

# Initialize Prophet models
cpu_model = Prophet()
memory_model = Prophet()

# Fit the models
cpu_model.fit(cpu_ts)
memory_model.fit(memory_ts)

# Make future dataframe for predictions (1 day into the future)
cpu_future = cpu_model.make_future_dataframe(periods=1)
memory_future = memory_model.make_future_dataframe(periods=1)

# Predict the future usage
cpu_forecast = cpu_model.predict(cpu_future)
memory_forecast = memory_model.predict(memory_future)

# Extract the forecasted values
cpu_prediction = cpu_forecast[['ds', 'yhat']].iloc[-1]
memory_prediction = memory_forecast[['ds', 'yhat']].iloc[-1]

print(f"Forecasted CPU Usage for {cpu_prediction['ds']}: {cpu_prediction['yhat']}")
print(f"Forecasted Memory Usage for {memory_prediction['ds']}: {memory_prediction['yhat']}")

# Visualization
cpu_model.plot(cpu_forecast)
plt.title('CPU Usage Forecast')
plt.show()

memory_model.plot(memory_forecast)
plt.title('Memory Usage Forecast')
plt.show()
