def process_cascading_dependencies(data, time_window=30):
    """
    Processes cascading dependencies in the event data while excluding irrelevant sources.

    Args:
        data (pd.DataFrame): The input DataFrame containing event data.
        time_window (int): Time window (in minutes) to evaluate cascading dependencies.

    Returns:
        pd.DataFrame: A DataFrame containing cascading dependency relationships.
    """
    import pandas as pd

    # Define dependency relationships
    dependency_map = {
        "Prometheus": ["Airflow", "Active Batch"],
        "Airflow": ["App Insights"],
        "App Insights": ["Rigor"],
        "SCOM": ["SolarWinds"],
    }

    # Define sources to exclude
    excluded_sources = ["Business Metrics", "Power BI", "Nessus"]

    # Check for required columns
    required_columns = [
        '@timestamp', 'EventSource', 'EventTitle', 'EventLevel', 'EventStatus'
    ]
    if not all(col in data.columns for col in required_columns):
        raise ValueError("Data is missing one or more required columns.")

    # Filter out excluded sources
    data = data[~data['EventSource'].isin(excluded_sources)]

    # Convert timestamp to datetime and sort by it
    data['@timestamp'] = pd.to_datetime(data['@timestamp'])
    data = data.sort_values('@timestamp')

    # Initialize results for cascading dependencies
    cascading_results = []

    # Iterate through each event in the dataset
    for i, row in data.iterrows():
        parent_source = row['EventSource']
        parent_timestamp = row['@timestamp']
        parent_title = row['EventTitle']

        # Find dependent sources
        if parent_source in dependency_map:
            dependent_sources = dependency_map[parent_source]

            # Filter for dependent alerts within the time window
            for dep_source in dependent_sources:
                time_condition = (
                    (data['@timestamp'] > parent_timestamp) &
                    (data['@timestamp'] <= parent_timestamp + pd.Timedelta(minutes=time_window))
                )
                dependent_alerts = data[
                    (data['EventSource'] == dep_source) & time_condition
                ]

                # Record cascading relationships
                for _, dep_row in dependent_alerts.iterrows():
                    cascading_results.append({
                        "ParentSource": parent_source,
                        "ParentTitle": parent_title,
                        "ParentTimestamp": parent_timestamp,
                        "DependentSource": dep_row['EventSource'],
                        "DependentTitle": dep_row['EventTitle'],
                        "DependentTimestamp": dep_row['@timestamp'],
                        "EventLevel": dep_row['EventLevel'],
                        "EventStatus": dep_row['EventStatus']
                    })

    # Return the cascading relationships as a DataFrame
    return pd.DataFrame(cascading_results)
