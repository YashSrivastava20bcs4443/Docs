import pandas as pd
import psycopg2
import requests

# PostgreSQL connection details
DB_CONFIG = {
    "host": "172.16.130.247",
    "database": "postgres",
    "user": "postgres",
    "password": "Zxcv@1234"
}

API_URL = "https://api.example.com/data"
HEADERS = {
    "Authorization": "Bearer YOUR_ACCESS_TOKEN"
}

def fetch_data_from_api():
    response = requests.get(API_URL, headers=HEADERS)
    if response.status_code == 200:
        data = response.json()
        df = pd.DataFrame(data)
        df.to_csv("completed_contacts.csv", index=False)
        print("Data fetched and saved to CSV.")
        return "completed_contacts.csv"
    else:
        print("Error fetching data:", response.status_code)
        return None

def insert_raw_data_into_db(csv_file):
    conn = psycopg2.connect(**DB_CONFIG)
    cursor = conn.cursor()
    
    # Create the raw data table if not exists
    cursor.execute("""
    CREATE TABLE IF NOT EXISTS completed_contacts (
        abandoned BOOLEAN, 
        abandonSeconds INT, 
        agentId VARCHAR(50),
        agentSeconds INT,
        mediaTypeId INT,
        isOutbound BOOLEAN,
        masterContactId VARCHAR(50),
        contactId VARCHAR(50),
        toAddress VARCHAR(50),
        endReason VARCHAR(50),
        inQueueSeconds INT,
        preQueueSeconds INT
    )
    """)
    
    df = pd.read_csv(csv_file)
    for _, row in df.iterrows():
        cursor.execute("""
        INSERT INTO completed_contacts (abandoned, abandonSeconds, agentId, agentSeconds, mediaTypeId, 
                                        isOutbound, masterContactId, contactId, toAddress, endReason, 
                                        inQueueSeconds, preQueueSeconds)
        VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)
        """, (row['abandoned'], row['abandonSeconds'], row['agentId'], row['agentSeconds'], 
              row['mediaTypeId'], row['isOutbound'], row['masterContactId'], row['contactId'], 
              row['toAddress'], row['endReason'], row['inQueueSeconds'], row['preQueueSeconds']))
    
    conn.commit()
    cursor.close()
    conn.close()
    print("Raw data inserted into the database.")

def filter_and_summarize_data():
    conn = psycopg2.connect(**DB_CONFIG)
    cursor = conn.cursor()
    
    # Filtering and summarizing directly from the database
    cursor.execute("""
    SELECT toAddress, 
           COUNT(contactId) AS offered_calls,
           COUNT(contactId) AS answered,
           SUM(CASE WHEN abandoned = False AND agentSeconds = 0 
                        AND inQueueSeconds = 0 AND preQueueSeconds > 1 
                        AND endReason = 'Contact Hung Up' THEN 1 ELSE 0 END) AS ivr_abandon,
           SUM(CASE WHEN isOutbound = True AND abandoned = False 
                        AND agentSeconds = 0 AND inQueueSeconds > 0 
                        AND preQueueSeconds > 0 THEN 1 ELSE 0 END) AS queue_abandon,
           SUM(CASE WHEN abandoned = False AND agentSeconds = 0 
                        AND inQueueSeconds = 0 AND preQueueSeconds > 1 
                        AND endReason = 'Contact Hang Up via Script' THEN 1 ELSE 0 END) AS polite_disconnect
    FROM completed_contacts
    WHERE mediaTypeId = 4 AND isOutbound = False AND masterContactId = contactId
    GROUP BY toAddress
    """)
    
    summary_data = cursor.fetchall()
    
    # Create the summary table if not exists
    cursor.execute("""
    CREATE TABLE IF NOT EXISTS dashboard_summary (
        number VARCHAR(20),
        offered_calls INT,
        answered INT,
        ivr_abandon INT,
        queue_abandon INT,
        polite_disconnect INT
    )
    """)
    
    # Insert summarized data
    for row in summary_data:
        cursor.execute("""
        INSERT INTO dashboard_summary (number, offered_calls, answered, ivr_abandon, queue_abandon, polite_disconnect)
        VALUES (%s, %s, %s, %s, %s, %s)
        """, row)
    
    conn.commit()
    cursor.close()
    conn.close()
    print("Filtered summary data inserted into dashboard_summary.")

def delete_csv_file(file_path):
    import os
    try:
        os.remove(file_path)
        print(f"{file_path} deleted successfully.")
    except Exception as e:
        print(f"Error deleting file: {e}")

# Main Execution Flow
if __name__ == "__main__":
    csv_file = fetch_data_from_api()
    if csv_file:
        insert_raw_data_into_db(csv_file)
        filter_and_summarize_data()
        delete_csv_file(csv_file)

