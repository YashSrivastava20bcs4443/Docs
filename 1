import smtplib
import ssl
import socket
from datetime import datetime
import OpenSSL
from email.mime.text import MIMEText
from email.multipart import MIMEMultipart

# Configuration with your provided URLs
URLS = [
    "*.fareportal.com",
    "tourpromo.royalscenic.com",
    "*.cheapair.com",
    "fp-a-express-edge.jabber-a.fareportal.com",
    "*.fareportal.biz",
    "*.cheapoair.co.uk",
    "*.fareportallabs.com",
    "*.cheapoair.com",
    "fp-a-expedge.fareportal.com",
    "*.onetravel.com",
    "www.travelweeklyupdate.com",
    "*.cheapoair.ca",
    "rental.cheapoair.com",
    "slan.fareportal.com",
    "rdsindia3.fareportal.com",
    "assist.onetravel.com",
    "fp-a-expedge.fareportal.com",
    "*.cheapoair.mx",
    "stay.cheapoair.com",
    "rds.fareportal.com",
    "*.cheapoair.mx",
    "rdsindia.fareportal.com",
    "*.insanelycheapflights.com",
    "www.clubmiles.com",
    "www.fareportal.com",
    "www.travelspot.us",
    "www.royalscenic.com",
    "*.clubmiles.com",
    "assist.cheapoair.com",
    "rdsindia2.fareportal.com",
    "www.voyager.tech",
    "thingstodo.cheapoair.com",
    "*.voyager.tech",
    "*.azure.fareportal.com"
]

SMTP_SERVER = "smtp.example.com"  # Replace with your SMTP server
SMTP_PORT = 25  # No authentication required
RECIPIENTS_TO = ["recipient1@example.com"]
RECIPIENTS_CC = ["recipient2@example.com"]

def get_certificate_expiry(url):
    try:
        # Remove wildcards for SSL certificate validation
        clean_url = url.replace("*.", "")
        conn = socket.create_connection((clean_url, 443))
        context = ssl.create_default_context()
        sock = context.wrap_socket(conn, server_hostname=clean_url)
        cert = ssl.DER_cert_to_PEM_cert(sock.getpeercert(True))
        x509 = OpenSSL.crypto.load_certificate(OpenSSL.crypto.FILETYPE_PEM, cert)
        expiry_date = datetime.strptime(x509.get_notAfter().decode('utf-8'), "%Y%m%d%H%M%SZ")
        sock.close()
        return expiry_date
    except Exception as e:
        print(f"Error fetching certificate for {url}: {e}")
        return None

def send_email(expiring_certificates):
    msg = MIMEMultipart()
    msg["From"] = "noreply@example.com"
    msg["To"] = ", ".join(RECIPIENTS_TO)
    msg["Cc"] = ", ".join(RECIPIENTS_CC)
    msg["Subject"] = "SSL Certificate Expiry Notification"

    # Prepare HTML body with color coding
    html = """<html><body><h2>SSL Certificate Expiry Report</h2><table border='1'><tr><th>URL</th><th>Expiry Date</th><th>Days Left</th><th>Status</th></tr>"""

    for entry in expiring_certificates:
        color = "black"
        status = "Information"
        if entry['days_left'] <= 10:
            color = "red"
            status = "Urgent"
        elif entry['days_left'] <= 20:
            color = "orange"
            status = "Important"

        html += f"<tr><td>{entry['url']}</td><td>{entry['expiry_date']}</td><td>{entry['days_left']}</td><td style='color:{color}'>{status}</td></tr>"

    html += "</table></body></html>"
    msg.attach(MIMEText(html, "html"))

    # Send Email without authentication
    try:
        with smtplib.SMTP(SMTP_SERVER, SMTP_PORT) as server:
            server.sendmail("noreply@example.com", RECIPIENTS_TO + RECIPIENTS_CC, msg.as_string())
        print("Email sent successfully!")
    except Exception as e:
        print(f"Error sending email: {e}")

def main():
    expiring_certificates = []
    current_date = datetime.now()

    for url in URLS:
        expiry_date = get_certificate_expiry(url)
        if expiry_date:
            days_left = (expiry_date - current_date).days
            if days_left <= 30:
                expiring_certificates.append({
                    "url": url,
                    "expiry_date": expiry_date.strftime('%Y-%m-%d'),
                    "days_left": days_left
                })

    if expiring_certificates:
        send_email(expiring_certificates)
    else:
        print("No certificates expiring within 30 days.")

if __name__ == "__main__":
    main()
