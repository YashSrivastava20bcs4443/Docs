import requests

# Suppress SSL warnings for self-signed certificates
import urllib3
urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

# Base configuration
BASE_URL = "https://<storage-system-ip>/api/v1"  # Replace with actual system IP
USERNAME = "<your-username>"  # Replace with your API username
PASSWORD = "<your-password>"  # Replace with your API password

# Function to authenticate and get the token
def authenticate():
    auth_url = f"{BASE_URL}/auth/login"
    auth_payload = {"username": USERNAME, "password": PASSWORD}
    
    try:
        response = requests.post(auth_url, json=auth_payload, verify=False)
        response.raise_for_status()  # Raise an error for bad responses
        token = response.json().get("token")
        print("Authentication successful.")
        return token
    except requests.exceptions.RequestException as e:
        print(f"Authentication failed: {e}")
        return None

# Function to fetch data from a specific endpoint
def fetch_metrics(endpoint, token):
    headers = {"Authorization": f"Bearer {token}"}
    url = f"{BASE_URL}{endpoint}"
    
    try:
        response = requests.get(url, headers=headers, verify=False)
        response.raise_for_status()  # Raise an error for bad responses
        return response.json()
    except requests.exceptions.RequestException as e:
        print(f"Failed to fetch data from {endpoint}: {e}")
        return None

# Main script
if __name__ == "__main__":
    token = authenticate()
    if token:
        # Fetch capacity metrics
        capacity_metrics = fetch_metrics("/storage/capacity", token)
        if capacity_metrics:
            print("Capacity Metrics:")
            print(f"Used Capacity: {capacity_metrics.get('used_capacity')}")
            print(f"Total Efficiency: {capacity_metrics.get('total_efficiency')}")
            print(f"Data Reduction: {capacity_metrics.get('data_reduction')}")
        
        # Fetch performance metrics
        performance_metrics = fetch_metrics("/storage/performance", token)
        if performance_metrics:
            print("\nPerformance Metrics:")
            for key, value in performance_metrics.items():
                print(f"{key}: {value}")
    else:
        print("Exiting due to authentication failure.")
