import pandas as pd
from datetime import datetime
from msal import ConfidentialClientApplication
import config
import requests
import smtplib
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart

# Suppress warnings
import warnings
warnings.simplefilter(action='ignore', category=UserWarning)

# === Config Validation ===
required_config_keys = [
    'CLIENT_ID', 'CLIENT_SECRET', 'TENANT_ID', 'USER_ID',
    'AD_DRIVE_ID', 'AD_DRIVE_ITEM', 'SENDER_EMAIL',
    'SMTP_SERVER', 'SMTP_PORT', 'RECIPIENTS_TO', 'RECIPIENTS_CC',
    'X_COLUMN', 'Y_COLUMN', 'SHEET_NAME'
]

# Ensure all config values exist
for key in required_config_keys:
    if not hasattr(config, key):
        raise ValueError(f"Missing required configuration key: {key}")

# === Load Config Values ===
client_id = config.CLIENT_ID
client_secret = config.CLIENT_SECRET
tenant_id = config.TENANT_ID
user_id = config.USER_ID
remote_item_drive_id = config.AD_DRIVE_ID
remote_item_id = config.AD_DRIVE_ITEM

# === Authenticate with Microsoft Graph API ===
try:
    authority = f'https://login.microsoftonline.com/{tenant_id}'
    app = ConfidentialClientApplication(client_id, authority=authority, client_credential=client_secret)
    result = app.acquire_token_for_client(scopes=['https://graph.microsoft.com/.default'])
    access_token = result.get('access_token')
    if not access_token:
        raise Exception("Failed to obtain access token.")
except Exception as e:
    print(f"Error during authentication: {e}")
    exit()

# === Fetch AD File from OneDrive ===
try:
    my_files_url = f'https://graph.microsoft.com/v1.0/users/{user_id}/drives/{remote_item_drive_id}/items/{remote_item_id}/children'
    response = requests.get(my_files_url, headers={"Authorization": f"Bearer {access_token}"})
    response.raise_for_status()  # Raise an error for bad responses

    children = response.json().get('value', [])
    if len(children) != 1:
        raise Exception("No file or multiple files found in the specified folder.")

    file_item = children[0]
    file_url = file_item['@microsoft.graph.downloadUrl']

    # Download the file
    file_response = requests.get(file_url)
    file_response.raise_for_status()
    ad_df = pd.read_excel(file_response.content, sheet_name=config.SHEET_NAME)

except Exception as e:
    print(f"Error fetching AD file: {e}")
    exit()

# === Validate Data ===
x_column = config.X_COLUMN
y_column = config.Y_COLUMN

try:
    if x_column not in ad_df.columns or y_column not in ad_df.columns:
        raise ValueError(f"Columns '{x_column}' or '{y_column}' not found in the Excel file.")
    ad_df[y_column] = pd.to_datetime(ad_df[y_column], errors='coerce')
except Exception as e:
    print(f"Error processing data: {e}")
    exit()

# === Prepare Expiry Report ===
today = datetime.now()
expiring_certificates = []

for index, row in ad_df.iterrows():
    name = row[x_column]
    expiry_date = row[y_column]

    # Skip invalid dates or missing data
    if pd.isnull(expiry_date):
        continue

    days_left = (expiry_date - today).days

    # Priority Logic
    if days_left <= 10:
        priority = "🚨URGENT"
    elif days_left <= 20:
        priority = "⚠️IMPORTANT"
    elif days_left <= 30:
        priority = "INFO"
    else:
        continue  # Ignore certificates expiring after 30 days

    expiring_certificates.append(f"{priority} - {name} - Expiring on: {expiry_date.strftime('%Y-%m-%d')} ({days_left} days left)")

# === Email Sending Function ===
def send_email(expiring_certificates):
    if not expiring_certificates:
        print("✅ No certificates expiring within the next 30 days.")
        return

    sender_email = config.SENDER_EMAIL
    recipients_to = config.RECIPIENTS_TO
    recipients_cc = config.RECIPIENTS_CC
    subject = "Certificate Expiry Alert: Important & Urgent Notices"

    # Prepare HTML email body
    body = "<html><body><p><strong>The following certificates are expiring soon:</strong></p><ul>"
    for cert in expiring_certificates:
        if "URGENT" in cert:
            body += f'<li><span style="color: red; font-weight: bold;">{cert}</span></li>'
        elif "IMPORTANT" in cert:
            body += f'<li><span style="color: orange; font-weight: bold;">{cert}</span></li>'
        else:
            body += f'<li>{cert}</li>'
    body += "</ul><p>Please take necessary action based on the priority levels above.</p></body></html>"

    # Prepare Email
    msg = MIMEMultipart()
    msg['From'] = sender_email
    msg['To'] = ', '.join(recipients_to)
    msg['CC'] = ', '.join(recipients_cc)
    msg['Subject'] = subject
    msg.attach(MIMEText(body, 'html'))

    # Send the Email
    try:
        with smtplib.SMTP(config.SMTP_SERVER, config.SMTP_PORT) as server:
            server.sendmail(sender_email, recipients_to + recipients_cc, msg.as_string())
            print("✅ Consolidated email sent successfully!")
    except Exception as e:
        print(f"Error sending email: {e}")

# === Send the Email ===
send_email(expiring_certificates)
