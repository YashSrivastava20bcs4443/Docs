app.get('/api/detail', async (req, res) => {
    try {
        const { category, startDate, endDate, portal, tfn, tfnSearch } = req.query;
        console.log('Detail Request Params:', { category, startDate, endDate, portal, tfn, tfnSearch }); // Debug

        let query = `
            SELECT 
                "toAddress" AS "TFN",
                COALESCE("Description", 'No Description') AS "Description",
                COUNT(*) FILTER (WHERE "masterContactId" = "contactId" AND "isOutbound" = 'False' AND "mediaTypeId" = '4') AS ivr_offered,
                COUNT(*) FILTER (WHERE "masterContactId" = "contactId" AND "isOutbound" = 'False' AND "mediaTypeId" = '4' 
                    AND "agentSeconds"::numeric = 0 AND "inQueueSeconds"::numeric = 0 
                    AND "abandoned" = 'False' AND "preQueueSeconds"::numeric > 1 
                    AND "endReason" = 'Contact Hung Up') AS ivr_abandoned,
                COUNT(*) FILTER (WHERE "masterContactId" = "contactId" AND "isOutbound" = 'False' AND "mediaTypeId" = '4' 
                    AND "agentSeconds"::numeric = 0 AND "inQueueSeconds"::numeric > 0 
                    AND "abandoned" = 'True' AND "preQueueSeconds"::numeric > 0) AS queue_abandoned,
                COUNT(*) FILTER (WHERE "masterContactId" = "contactId" AND "isOutbound" = 'False' AND "mediaTypeId" = '4' 
                    AND "agentSeconds"::numeric = 0 AND "inQueueSeconds"::numeric = 0 
                    AND "abandoned" = 'False' AND "preQueueSeconds"::numeric > 1 
                    AND "endReason" = 'Contact Hang Up via Script') AS closed_by_ivr,
                COUNT(*) FILTER (WHERE "masterContactId" = "contactId" AND "isOutbound" = 'False' AND "mediaTypeId" = '4' 
                    AND "abandoned" = 'False' AND "agentSeconds"::numeric > 0) AS answered_calls,
                COALESCE("Portal", 'Unknown Portal') AS "Portal",
                COALESCE("TFN Type", 'Unknown Type') AS "TFN Type"
            FROM contact_mapped_data
        `;

        const queryParams = [];
        let paramIndex = 1;

        if (startDate && endDate) {
            query += ' WHERE to_date("contactStartDate", \'YYYY-MM-DD\') BETWEEN $' + paramIndex++ + ' AND $' + paramIndex++;
            queryParams.push(startDate, endDate);
        }

        if (portal) {
            query += queryParams.length ? ' AND' : ' WHERE';
            query += ' "Portal" = $' + paramIndex++;
            queryParams.push(portal);
        }

        if (tfn) {
            query += queryParams.length ? ' AND' : ' WHERE';
            query += ' "TFN Type" = $' + paramIndex++;
            queryParams.push(tfn);
        }

        const validCategories = [
            'ivr_offered',
            'ivr_abandoned',
            'queue_abandoned',
            'closed_by_ivr',
            'abandoned_under_10',
            'abandoned_over_10',
            'answered_calls',
            'abandoned_in_10' // Added as alias
        ];
        if (tfnSearch && validCategories.includes(category)) {
            query += queryParams.length ? ' AND' : ' WHERE';
            query += ' "toAddress" ILIKE $' + paramIndex++;
            queryParams.push(`%${tfnSearch}%`);
        }

        switch (category) {
            case 'ivr_offered':
                query += queryParams.length ? ' AND' : ' WHERE';
                query += ' "masterContactId" = "contactId" AND "isOutbound" = \'False\' AND "mediaTypeId" = \'4\'';
                break;
            case 'ivr_abandoned':
                query += queryParams.length ? ' AND' : ' WHERE';
                query += ' "masterContactId" = "contactId" AND "isOutbound" = \'False\' AND "mediaTypeId" = \'4\' ' +
                    'AND "agentSeconds"::numeric = 0 AND "inQueueSeconds"::numeric = 0 ' +
                    'AND "abandoned" = \'False\' AND "preQueueSeconds"::numeric > 1 ' +
                    'AND "endReason" = \'Contact Hung Up\'';
                break;
            case 'queue_abandoned':
                query += queryParams.length ? ' AND' : ' WHERE';
                query += ' "masterContactId" = "contactId" AND "isOutbound" = \'False\' AND "mediaTypeId" = \'4\' ' +
                    'AND "agentSeconds"::numeric = 0 AND "inQueueSeconds"::numeric > 0 ' +
                    'AND "abandoned" = \'True\' AND "preQueueSeconds"::numeric > 0';
                break;
            case 'closed_by_ivr':
                query += queryParams.length ? ' AND' : ' WHERE';
                query += ' "masterContactId" = "contactId" AND "isOutbound" = \'False\' AND "mediaTypeId" = \'4\' ' +
                    'AND "agentSeconds"::numeric = 0 AND "inQueueSeconds"::numeric = 0 ' +
                    'AND "abandoned" = \'False\' AND "preQueueSeconds"::numeric > 1 ' +
                    'AND "endReason" = \'Contact Hang Up via Script\'';
                break;
            case 'abandoned_under_10':
            case 'abandoned_in_10': // Added alias to handle the frontend input
                query += queryParams.length ? ' AND' : ' WHERE';
                query += ' "masterContactId" = "contactId" AND "isOutbound" = \'False\' AND "mediaTypeId" = \'4\' ' +
                    'AND "abandoned" = \'True\' AND COALESCE(NULLIF("preQueueSeconds", \'\'), \'0\')::numeric < 10';
                break;
            case 'abandoned_over_10':
                query += queryParams.length ? ' AND' : ' WHERE';
                query += ' "masterContactId" = "contactId" AND "isOutbound" = \'False\' AND "mediaTypeId" = \'4\' ' +
                    'AND "abandoned" = \'True\' AND COALESCE(NULLIF("preQueueSeconds", \'\'), \'0\')::numeric > 10';
                break;
            case 'answered_calls':
                query += queryParams.length ? ' AND' : ' WHERE';
                query += ' "masterContactId" = "contactId" AND "isOutbound" = \'False\' AND "mediaTypeId" = \'4\' ' +
                    'AND "abandoned" = \'False\' AND "agentSeconds"::numeric > 0';
                break;
            default:
                return res.status(400).json({ error: 'Invalid category' });
        }

        query += ' GROUP BY "toAddress", "Description", "Portal", "TFN Type"';
        console.log('Executing Detail Query:', query.trim()); // Debug the full query
        console.log('Query Params:', queryParams); // Debug parameters

        const result = await pool.query(query, queryParams);
        console.log('Query Result:', result.rows); // Debug result

        res.json(result.rows);
    } catch (err) {
        console.error('Error fetching detail data:', err);
        res.status(500).json({ error: 'Internal Server Error' });
    }
});
