const axios = require('axios');
const { Pool } = require('pg');
const moment = require('moment-timezone');

// Database Configuration
const pool = new Pool({
  user: 'postgres',
  host: '10.7.32.134',
  database: 'postgres',
  password: 'automation@123',
  port: 5432,
});

const API_URL = "https://api-c48.nice-incontact.com/incontactapi/services/v31.0/contacts/completed";
const ACCESS_TOKEN_URL = "http://ctiintegrationapi.operations.fareportal.com.local/api/Agent/accessToken";

async function getAccessToken() {
  try {
    const response = await axios.post(ACCESS_TOKEN_URL);
    console.log("Access token response:", response.data);
    return response.data.access_token || response.data["access token"];
  } catch (error) {
    console.error("Error getting access token:", error);
    throw error;
  }
}

async function fetchAPIData() {
  try {
    const token = await getAccessToken();
    const headers = { "Authorization": `Bearer ${token}` };
    const response = await axios.get(API_URL, { headers, params: { top: 10 } });
    return response.data?.completedContacts || [];
  } catch (error) {
    console.error("Error fetching API data:", error);
    return [];
  }
}

async function createTableIfNotExists(data) {
  if (data.length === 0) {
    console.log("No data to determine schema.");
    return;
  }

  const sampleRecord = data[0];
  let columns = Object.keys(sampleRecord).map(key => {
    let type = typeof sampleRecord[key];
    if (type === 'number') return `"${key}" BIGINT`;
    if (type === 'boolean') return `"${key}" BOOLEAN`;
    return `"${key}" TEXT`;
  }).join(', ');

  const query = `CREATE TABLE IF NOT EXISTS contact_data (id SERIAL PRIMARY KEY, ${columns});`;
  await pool.query(query);
  console.log("Table created or already exists.");
}

async function insertData(data) {
  if (data.length === 0) {
    console.log("No records to insert.");
    return;
  }

  for (const record of data) {
    const keys = Object.keys(record).map(key => `"${key}"`).join(', ');
    const values = Object.values(record);
    const placeholders = values.map((_, i) => `$${i + 1}`).join(', ');
    
    const query = `INSERT INTO contact_data (${keys}) VALUES (${placeholders});`;
    try {
      await pool.query(query, values);
    } catch (error) {
      console.error("Error inserting data:", error);
    }
  }
  console.log(`Inserted ${data.length} records.`);
}

async function main() {
  const data = await fetchAPIData();
  await createTableIfNotExists(data);
  await insertData(data);
}

main().catch(console.error);
