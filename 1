import os
import time
import shutil
from PIL import Image  # Pillow library for stitching screenshots
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.chrome.service import Service
import config

# Function to access the System Health page
def access_system_health(driver, ip, username, password):
    try:
        # Handle security warning
        advanced_button = WebDriverWait(driver, 10).until(EC.element_to_be_clickable((By.ID, "details-button")))
        advanced_button.click()
        proceed_link = WebDriverWait(driver, 10).until(EC.element_to_be_clickable((By.ID, "proceed-link")))
        proceed_link.click()
    except:
        print("No security warning found.")

    # Perform login
    WebDriverWait(driver, 10).until(EC.element_to_be_clickable((By.ID, "username"))).send_keys(username)
    WebDriverWait(driver, 10).until(EC.element_to_be_clickable((By.ID, "password"))).send_keys(password)
    login_button = WebDriverWait(driver, 10).until(
        EC.element_to_be_clickable((By.XPATH, "//button[@type='submit' and contains(text(), 'LOG IN')]"))
    )
    login_button.click()

    # Navigate to the System Health page
    system_health_link = WebDriverWait(driver, 10).until(
        EC.element_to_be_clickable((By.XPATH, "//a[@routerlink='/dashboard/system-health']"))
    )
    system_health_link.click()
    time.sleep(10)  # Wait for the page to load fully

# Function to capture full-page screenshot by scrolling
def capture_full_page_screenshot(driver, filename):
    # Get total height and width of the page
    total_height = driver.execute_script("return document.body.scrollHeight")
    total_width = driver.execute_script("return document.body.scrollWidth")

    driver.set_window_size(total_width, 1080)  # Set window width to match page width

    # Store temporary screenshots
    screenshots = []
    scroll_position = 0
    while scroll_position < total_height:
        # Scroll to the next position and wait for page to stabilize
        driver.execute_script(f"window.scrollTo(0, {scroll_position});")
        time.sleep(1)  # Allow the page to render

        # Take a screenshot and save it
        screenshot_path = f"Temp/screenshot_{scroll_position}.png"
        driver.save_screenshot(screenshot_path)
        screenshots.append(screenshot_path)

        # Move down by one viewport height
        scroll_position += driver.execute_script("return window.innerHeight")

    # Stitch screenshots together using Pillow
    stitch_screenshots(screenshots, filename)

def stitch_screenshots(screenshots, output_filename):
    # Open all screenshots to calculate total height
    images = [Image.open(screenshot) for screenshot in screenshots]
    total_width = images[0].width
    total_height = sum(img.height for img in images)

    # Create a new blank image to hold all screenshots
    stitched_image = Image.new('RGB', (total_width, total_height))

    # Paste all screenshots into the blank image
    y_offset = 0
    for img in images:
        stitched_image.paste(img, (0, y_offset))
        y_offset += img.height

    # Save the stitched image
    stitched_image.save(output_filename)

    # Clean up temporary screenshots
    for screenshot in screenshots:
        os.remove(screenshot)

# Function to send email with the screenshot
def send_email(owner_email, screenshot_filename):
    import smtplib
    from email.mime.multipart import MIMEMultipart
    from email.mime.text import MIMEText
    from email.mime.image import MIMEImage

    smtp_server = "smtp-mail.outlook.com"
    smtp_port = 25
    sender_email = config.SENDER_EMAIL
    password = config.SENDER_PASSWORD

    msg = MIMEMultipart()
    msg['From'] = sender_email
    msg['To'] = owner_email
    msg['Subject'] = "System Health Full Page Screenshot"

    body = """
    <html>
    <body>
        <p>Hi team,</p>
        <p>Please find the full-page screenshot of the System Health page attached below:</p>
        <p><img src="cid:{filename}"></p>
        <p>Thanks & Regards,<br>Yash Srivastava</p>
    </body>
    </html>
    """.format(filename=os.path.basename(screenshot_filename))

    msg.attach(MIMEText(body, "html"))

    with open(screenshot_filename, "rb") as f:
        img = MIMEImage(f.read())
        img.add_header("Content-ID", f"<{os.path.basename(screenshot_filename)}>")
        msg.attach(img)

    with smtplib.SMTP(smtp_server, smtp_port) as server:
        server.starttls()
        server.login(sender_email, password)
        server.send_message(msg)

# Main execution
if __name__ == "__main__":
    # Ensure Temp directory exists
    if not os.path.exists("Temp"):
        os.makedirs("Temp")

    driver = webdriver.Chrome(service=Service("C:\\Users\\y.s.va22\\Downloads\\syseng_automation\\chromedriver.exe"))
    driver.maximize_window()

    try:
        # Access the System Health page and take a full-page screenshot
        driver.get("https://10.1.3.96/")
        access_system_health(driver, "10.1.3.96", config.SITE_USER, config.SITE_PASSWORD)

        # Take the full-page screenshot
        screenshot_filename = "Temp/System_Health_Full_Page.png"
        capture_full_page_screenshot(driver, screenshot_filename)

        # Send the screenshot via email
        send_email("yash.srivastava@fareportal.com", screenshot_filename)
    finally:
        driver.quit()
        shutil.rmtree("Temp")
