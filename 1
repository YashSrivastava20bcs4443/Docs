
import psycopg2
import pandas as pd

# Database connection details
DB_CONFIG = {
    "host": "172.16.130.247",
    "database": "postgres",
    "user": "postgres",
    "password": "Zxcv@1234"
}

# Function to connect to the database
def connect_db():
    return psycopg2.connect(**DB_CONFIG)

# Function to fetch aggregated TFN-wise data
def get_tfn_summary(to_address):
    query = f"""
    SELECT 
        COUNT(*) AS offered_calls,

        COUNT(*) FILTER (WHERE "masterContactId" = "contactId"
                          AND "isOutbound" = 'False'
                          AND "mediaTypeId" = '4'
                          AND "abandoned" = 'False'
                          AND NULLIF("agentSeconds", '') ~ '^[0-9]+(\.[0-9]+)?$'
                          AND "agentSeconds"::FLOAT > 0) AS answered_calls,

        COUNT(*) FILTER (WHERE "masterContactId" = "contactId"
                          AND "isOutbound" = 'False'
                          AND "mediaTypeId" = '4'
                          AND "agentSeconds"::FLOAT = 0
                          AND NULLIF("inQueueSeconds", '') ~ '^[0-9]+(\.[0-9]+)?$'
                          AND "inQueueSeconds"::FLOAT = 0
                          AND "abandoned" = 'False'
                          AND "preQueueSeconds"::FLOAT > 1
                          AND "endReason" = 'Contact Hung Up') AS ivr_abandon,

        COUNT(*) FILTER (WHERE "masterContactId" = "contactId"
                          AND "isOutbound" = 'True'
                          AND "mediaTypeId" = '4'
                          AND "agentSeconds"::FLOAT = 0
                          AND NULLIF("inQueueSeconds", '') ~ '^[0-9]+(\.[0-9]+)?$'
                          AND "inQueueSeconds"::FLOAT > 0
                          AND "preQueueSeconds"::FLOAT > 0
                          AND "abandoned" = 'False') AS queue_abandon,

        COUNT(*) FILTER (WHERE "masterContactId" = "contactId"
                          AND "isOutbound" = 'False'
                          AND "mediaTypeId" = '4'
                          AND "agentSeconds"::FLOAT = 0
                          AND NULLIF("inQueueSeconds", '') ~ '^[0-9]+(\.[0-9]+)?$'
                          AND "inQueueSeconds"::FLOAT = 0
                          AND "abandoned" = 'False'
                          AND "preQueueSeconds"::FLOAT > 1
                          AND "endReason" = 'Contact Hang Up via Script') AS closed_by_ivr
    FROM contact_data
    WHERE "toAddress" = '{to_address}';
    """
    
    conn = connect_db()
    df = pd.read_sql(query, conn)
    conn.close()
    
    return df

# Function to fetch raw data for validation
def get_raw_data(to_address):
    query = f"""
    SELECT "masterContactId", "contactId", "isOutbound", "mediaTypeId",
           "agentSeconds", "inQueueSeconds", "preQueueSeconds", "abandoned", "endReason"
    FROM contact_data
    WHERE "toAddress" = '{to_address}';
    """

    conn = connect_db()
    df = pd.read_sql(query, conn)
    conn.close()
    
    return df

# Function to manually calculate counts from raw data
def validate_data(to_address):
    summary_df = get_tfn_summary(to_address)
    raw_df = get_raw_data(to_address)

    if summary_df.empty or raw_df.empty:
        print(f"No data found for {to_address}.")
        return

    # Convert numeric fields to proper types
    raw_df["agentSeconds"] = pd.to_numeric(raw_df["agentSeconds"], errors='coerce').fillna(0)
    raw_df["inQueueSeconds"] = pd.to_numeric(raw_df["inQueueSeconds"], errors='coerce').fillna(0)
    raw_df["preQueueSeconds"] = pd.to_numeric(raw_df["preQueueSeconds"], errors='coerce').fillna(0)

    # Manual calculations
    offered_calls = len(raw_df)
    answered_calls = raw_df[
        (raw_df["masterContactId"] == raw_df["contactId"]) &
        (raw_df["isOutbound"] == 'False') &
        (raw_df["mediaTypeId"] == '4') &
        (raw_df["abandoned"] == 'False') &
        (raw_df["agentSeconds"] > 0)
    ].shape[0]

    ivr_abandon = raw_df[
        (raw_df["masterContactId"] == raw_df["contactId"]) &
        (raw_df["isOutbound"] == 'False') &
        (raw_df["mediaTypeId"] == '4') &
        (raw_df["agentSeconds"] == 0) &
        (raw_df["inQueueSeconds"] == 0) &
        (raw_df["abandoned"] == 'False') &
        (raw_df["preQueueSeconds"] > 1) &
        (raw_df["endReason"] == 'Contact Hung Up')
    ].shape[0]

    queue_abandon = raw_df[
        (raw_df["masterContactId"] == raw_df["contactId"]) &
        (raw_df["isOutbound"] == 'True') &
        (raw_df["mediaTypeId"] == '4') &
        (raw_df["agentSeconds"] == 0) &
        (raw_df["inQueueSeconds"] > 0) &
        (raw_df["preQueueSeconds"] > 0) &
        (raw_df["abandoned"] == 'False')
    ].shape[0]

    closed_by_ivr = raw_df[
        (raw_df["masterContactId"] == raw_df["contactId"]) &
        (raw_df["isOutbound"] == 'False') &
        (raw_df["mediaTypeId"] == '4') &
        (raw_df["agentSeconds"] == 0) &
        (raw_df["inQueueSeconds"] == 0) &
        (raw_df["abandoned"] == 'False') &
        (raw_df["preQueueSeconds"] > 1) &
        (raw_df["endReason"] == 'Contact Hang Up via Script')
    ].shape[0]

    # Print validation results
    print(f"\n=== Validation Report for {to_address} ===")
    print(f"{'Metric':<20} {'Query Result':<15} {'Calculated':<15} {'Match?'}")
    print("=" * 60)
    print(f"{'Offered Calls':<20} {summary_df['offered_calls'][0]:<15} {offered_calls:<15} {summary_df['offered_calls'][0] == offered_calls}")
    print(f"{'Answered Calls':<20} {summary_df['answered_calls'][0]:<15} {answered_calls:<15} {summary_df['answered_calls'][0] == answered_calls}")
    print(f"{'IVR Abandoned':<20} {summary_df['ivr_abandon'][0]:<15} {ivr_abandon:<15} {summary_df['ivr_abandon'][0] == ivr_abandon}")
    print(f"{'Queue Abandoned':<20} {summary_df['queue_abandon'][0]:<15} {queue_abandon:<15} {summary_df['queue_abandon'][0] == queue_abandon}")
    print(f"{'Closed by IVR':<20} {summary_df['closed_by_ivr'][0]:<15} {closed_by_ivr:<15} {summary_df['closed_by_ivr'][0] == closed_by_ivr}")

# Run verification for a given number
to_address = "6462376850"
validate_data(to_address)
