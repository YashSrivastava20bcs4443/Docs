# Weekly Alerts Analysis (Bar Chart showing comparison of the same day across weeks)
st.subheader("Weekly Alerts Analysis")

if not filtered_data.empty:
    # Add Week number to the data
    filtered_data['WeekNumber'] = filtered_data['@timestamp'].dt.isocalendar().week

    # Group by Week number and Day of the week
    weekly_alerts = filtered_data.groupby(['WeekNumber', 'Weekday']).size().unstack(fill_value=0)

    # Plot the bar chart with Week number and Day comparison
    fig, ax = plt.subplots(figsize=(12, 6))
    weekly_alerts.plot(kind='bar', ax=ax, stacked=True, colormap='tab20')
    
    ax.set_title(f"Weekly Alerts Analysis: Comparison of Days Across Weeks for {selected_source}")
    ax.set_xlabel("Week Number and Day of the Week")
    ax.set_ylabel("Number of Alerts")
    ax.legend(title="Day of the Week")
    
    # Displaying the value on top of each bar
    for p in ax.patches:
        ax.annotate(f'{int(p.get_height())}', 
                    (p.get_x() + p.get_width() / 2., p.get_height()), 
                    ha='center', va='center', 
                    fontsize=8, color='black', xytext=(0, 5),
                    textcoords='offset points')

    st.pyplot(fig)
else:
    st.write("No data available for the selected filters.")
