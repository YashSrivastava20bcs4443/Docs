import requests
import psycopg2
import json
from datetime import datetime, timedelta, timezone

# API and DB configuration
API_URL = "https://api-c48.nice-incontact.com/incontactapi/services/v31.0/contacts/completed"
ACCESS_TOKEN_URL = "http://ctiintegrationapi.operations.fareportal.com.local/api/Agent/accessToken"
DB_CONFIG = {
    "host": "172.16.130.247",
    "database": "postgres",
    "user": "postgres",
    "password": "Zxcv@1234"
}

# Generate Access Token
def get_access_token():
    try:
        response = requests.post(ACCESS_TOKEN_URL)
        response_data = response.json()
        if "access_token" in response_data:
            print("Access Token generated successfully.")
            return response_data['access_token']
        else:
            raise Exception("Failed to generate access token.")
    except Exception as e:
        print(f"Error generating access token: {e}")
        exit()

# Fetch data from API
def fetch_data(start_date, end_date, auth_token):
    headers = {
        "Authorization": f"Bearer {auth_token}",
        "Content-Type": "application/json"
    }
    all_data = []
    skip = 0
    top = 10000  # Batch size for API pagination

    while True:
        params = {
            "startdate": start_date,
            "enddate": end_date,
            "top": top,
            "skip": skip
        }
        response = requests.get(API_URL, headers=headers, params=params)
        data = response.json()

        if "completedContacts" in data and data["completedContacts"]:
            all_data.extend(data["completedContacts"])
            skip += top
            if len(data["completedContacts"]) < top:
                break
        else:
            break

    print(f"Total records fetched: {len(all_data)}")
    return all_data

# Connect to PostgreSQL
def connect_db():
    try:
        conn = psycopg2.connect(**DB_CONFIG)
        print("Database connection successful.")
        return conn
    except Exception as e:
        print(f"Database connection failed: {e}")
        exit()

# Create table dynamically for raw data
def create_raw_table(conn):
    try:
        cursor = conn.cursor()
        cursor.execute("""
            CREATE TABLE IF NOT EXISTS raw_data (
                id SERIAL PRIMARY KEY,
                contact_id BIGINT,
                master_contact_id BIGINT,
                media_type_id INT,
                from_addr TEXT,
                to_addr TEXT,
                is_outbound BOOLEAN,
                abandoned BOOLEAN,
                agent_seconds INT,
                in_queue_seconds INT,
                pre_queue_seconds INT,
                end_reason TEXT,
                contact_start TIMESTAMP
            );
        """)
        conn.commit()
        print("Raw data table created successfully.")
    except Exception as e:
        print(f"Error creating raw data table: {e}")


# Insert raw data
def insert_raw_data(conn, data):
    try:
        cursor = conn.cursor()
        for record in data:
            try:
                cursor.execute("""
                    INSERT INTO raw_data (contact_id, master_contact_id, media_type_id, from_addr, to_addr, is_outbound, abandoned,
                                          agent_seconds, in_queue_seconds, pre_queue_seconds, end_reason, contact_start)
                    VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s);
                """, (
                    record.get("contactId"),
                    record.get("masterContactId"),
                    record.get("mediaTypeId"),
                    record.get("fromAddr"),
                    record.get("toAddr"),
                    record.get("isOutbound"),
                    record.get("abandoned"),
                    record.get("agentSeconds"),
                    record.get("inQueueSeconds"),
                    record.get("preQueueSeconds"),
                    record.get("endReason"),
                    record.get("contactStart")
                ))
            except Exception as e:
                print(f"Error inserting record: {record}")
                print(f"Error details: {e}")
        conn.commit()
        print("Raw data inserted successfully.")
    except Exception as e:
        print(f"Error inserting raw data: {e}")


# Create table for processed data
def create_processed_table(conn):
    try:
        cursor = conn.cursor()
        cursor.execute("""
            CREATE TABLE IF NOT EXISTS processed_data (
                to_addr TEXT PRIMARY KEY,
                offered_calls INT,
                answered INT,
                ivr_abandon INT,
                queue_abandon INT,
                polite_disconnect INT
            );
        """)
        conn.commit()
        print("Processed data table created successfully.")
    except Exception as e:
        print(f"Error creating processed data table: {e}")

# Process raw data and insert into processed table
def process_data(conn):
    try:
        cursor = conn.cursor()

        cursor.execute("""
            INSERT INTO processed_data (to_addr, offered_calls, answered, ivr_abandon, queue_abandon, polite_disconnect)
            SELECT 
                to_addr,
                COUNT(*) AS offered_calls,
                SUM(CASE WHEN abandoned = FALSE THEN 1 ELSE 0 END) AS answered,
                SUM(CASE WHEN abandoned = FALSE AND agent_seconds = 0 AND in_queue_seconds = 0 AND pre_queue_seconds > 1 AND end_reason = 'Contact Hung Up' THEN 1 ELSE 0 END) AS ivr_abandon,
                SUM(CASE WHEN is_outbound = TRUE AND agent_seconds = 0 AND in_queue_seconds > 0 AND pre_queue_seconds > 0 THEN 1 ELSE 0 END) AS queue_abandon,
                SUM(CASE WHEN abandoned = FALSE AND agent_seconds = 0 AND in_queue_seconds = 0 AND pre_queue_seconds > 1 AND end_reason = 'Contact Hang Up via Script' THEN 1 ELSE 0 END) AS polite_disconnect
            FROM raw_data
            WHERE media_type_id = 4
            AND is_outbound = FALSE
            GROUP BY to_addr;
        """)
        conn.commit()
        print("Processed data inserted successfully.")
    except Exception as e:
        print(f"Error processing data: {e}")

# Main Execution Flow
if __name__ == "__main__":
    auth_token = get_access_token()

    # Set time range for last 2 hours
    end_date = datetime.now(timezone.utc).strftime('%Y-%m-%dT%H:%M:%SZ')
    start_date = (datetime.now(timezone.utc) - timedelta(hours=2)).strftime('%Y-%m-%dT%H:%M:%SZ')

    # Fetch raw data
    raw_data = fetch_data(start_date, end_date, auth_token)

    # Store data in PostgreSQL
    conn = connect_db()
    create_raw_table(conn)
    insert_raw_data(conn, raw_data)
    create_processed_table(conn)
    process_data(conn)

    # Close DB connection
    conn.close()

