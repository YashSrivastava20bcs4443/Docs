const express = require('express');
const { Pool } = require('pg');
const cors = require('cors');
const path = require('path');
const compression = require('compression');
const winston = require('winston');
require('dotenv').config();

const app = express();

// Middleware
app.use(cors({
  origin: process.env.FRONTEND_URL || 'http://serverip:3001', // Adjust to your server IP or domain
  methods: 'GET,HEAD,PUT,PATCH,POST,DELETE',
  credentials: true,
}));
app.use(express.json());
app.use(compression()); // Enable compression for performance
app.use(express.static(path.join(__dirname, 'client', 'build')));

// Logging
const logger = winston.createLogger({
  level: 'info',
  format: winston.format.json(),
  transports: [
    new winston.transports.File({ filename: 'error.log', level: 'error' }),
    new winston.transports.File({ filename: 'combined.log' }),
  ],
});

if (process.env.NODE_ENV !== 'production') {
  logger.add(new winston.transports.Console({
    format: winston.format.simple(),
  }));
}

// Database Pool
const pool = new Pool({
  host: process.env.DB_HOST || '10.7.32.134',
  user: process.env.DB_USER || 'postgres',
  password: process.env.DB_PASSWORD || 'automation@123',
  database: process.env.DB_NAME || 'postgres',
  port: process.env.DB_PORT || 5432,
});

// Error Handling Middleware
app.use((err, req, res, next) => {
  logger.error('Server error', { error: err.message, stack: err.stack });
  res.status(500).json({ error: 'Internal Server Error' });
});

// Serve React App
app.get('*', (req, res) => {
  res.sendFile(path.join(__dirname, 'client', 'build', 'index.html'));
});

// Start Server
const PORT = process.env.PORT || 3000;
app.listen(PORT, '0.0.0.0', () => {
  logger.info(`Server running on port ${PORT}`);
});

module.exports = app; // For potential IISnode use








PORT=3000
FRONTEND_URL=http://serverip:3001
DB_HOST=10.7.32.134
DB_USER=postgres
DB_PASSWORD=automation@123
DB_NAME=postgres
DB_PORT=5432
NODE_ENV=production
