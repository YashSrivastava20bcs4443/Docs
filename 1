
import os
import pandas as pd
import paramiko
from datetime import datetime

# SFTP details
sftp_host = '<your_sftp_host>'  # Replace with your SFTP host
sftp_port = 22  # Default SFTP port
sftp_username = '<your_username>'  # Replace with your SFTP username
sftp_password = '<your_password>'  # Replace with your SFTP password
sftp_base_dir = '/Network_devices_Backup/Performance_metrics'
windows_data_dir = 'Windows'
local_temp_dir = 'temp_data'

# Function to download a file from SFTP
def download_file(sftp, remote_path, local_path):
    try:
        sftp.get(remote_path, local_path)
        print(f"Downloaded: {remote_path} to {local_path}")
    except Exception as e:
        print(f"Failed to download {remote_path}: {e}")

# Function to upload a file to SFTP
def upload_file(sftp, local_path, remote_path):
    try:
        sftp.put(local_path, remote_path)
        print(f"Uploaded: {local_path} to {remote_path}")
    except Exception as e:
        print(f"Failed to upload {local_path}: {e}")

# Function to get the list of files in a directory on SFTP
def list_sftp_files(sftp, directory):
    try:
        return sftp.listdir(directory)
    except Exception as e:
        print(f"Failed to list directory {directory}: {e}")
        return []

# Function to load and merge data, keeping only the max values
def merge_max_values(existing_df, new_df):
    merged_df = pd.concat([existing_df, new_df])
    max_df = merged_df.groupby(['Instance']).max().reset_index()
    return max_df

# Connect to the SFTP server
try:
    transport = paramiko.Transport((sftp_host, sftp_port))
    transport.connect(username=sftp_username, password=sftp_password)
    sftp = paramiko.SFTPClient.from_transport(transport)

    # Create local temp directory if it doesn't exist
    if not os.path.exists(local_temp_dir):
        os.makedirs(local_temp_dir)

    # Step 1: Locate the latest consolidated file
    consolidated_files = sorted([f for f in list_sftp_files(sftp, f"{sftp_base_dir}/{windows_data_dir}") if 'consolidated' in f])
    if not consolidated_files:
        print("No consolidated files found.")
        exit(1)

    latest_consolidated = consolidated_files[-1]
    latest_consolidated_path = f"{sftp_base_dir}/{windows_data_dir}/{latest_consolidated}"
    local_consolidated_path = os.path.join(local_temp_dir, latest_consolidated)

    # Download the latest consolidated file
    download_file(sftp, latest_consolidated_path, local_consolidated_path)

    # Load the latest consolidated data
    consolidated_df = pd.read_csv(local_consolidated_path)

    # Step 2: Find new daily files
    daily_files = sorted([f for f in list_sftp_files(sftp, sftp_base_dir) if 'Last_24_hr_Windows_Performance_metrics' in f])

    # Only consider daily files after the last consolidated file's date
    last_consolidated_date = datetime.strptime(latest_consolidated.split('_')[-2], '%Y-%m-%d')
    daily_files_to_process = [f for f in daily_files if datetime.strptime(f.split('_')[-2], '%Y-%m-%d') > last_consolidated_date]

    # Step 3: Process each daily file and merge with the consolidated file
    for i, daily_file in enumerate(daily_files_to_process):
        daily_file_path = f"{sftp_base_dir}/{daily_file}"
        local_daily_path = os.path.join(local_temp_dir, daily_file)

        # Download the daily file
        download_file(sftp, daily_file_path, local_daily_path)

        # Load the daily data
        daily_df = pd.read_csv(local_daily_path)

        # Merge with the existing consolidated data
        consolidated_df = merge_max_values(consolidated_df, daily_df)

        # Determine the new consolidated file name
        new_consolidated_name = f"{i + 31}days_consolidated_windows_{daily_file.split('_')[-2]}.csv"
        new_consolidated_path = os.path.join(local_temp_dir, new_consolidated_name)

        # Save the new consolidated data locally
        consolidated_df.to_csv(new_consolidated_path, index=False)

        # Upload the new consolidated file to SFTP
        upload_file(sftp, new_consolidated_path, f"{sftp_base_dir}/{windows_data_dir}/{new_consolidated_name}")

    # Cleanup: Delete local temp directory
    for file in os.listdir(local_temp_dir):
        os.remove(os.path.join(local_temp_dir, file))
    os.rmdir(local_temp_dir)
    print("Local temp directory cleaned up.")

except Exception as e:
    print(f"An error occurred: {e}")
finally:
    # Close the SFTP connection
    if sftp:
        sftp.close()
    if transport:
        transport.close()
        
