import requests
import json
import psycopg2
from datetime import datetime, timedelta, timezone

# API and Access Token Details
API_URL = "https://api-c48.nice-incontact.com/incontactapi/services/v31.0/contacts/completed"
ACCESS_TOKEN_URL = "http://ctiintegrationapi.operations.fareportal.com.local/api/Agent/accessToken"

# PostgreSQL Connection Details
DB_CONFIG = {
    "host": "172.16.130.247", 
    "database": "postgres", 
    "user": "postgres", 
    "password": "Zxcv@1234"
}

# Generate Access Token
def get_access_token():
    try:
        response = requests.post(ACCESS_TOKEN_URL)
        response_data = response.json()
        if "access_token" in response_data:
            print("Access Token generated successfully.")
            return response_data['access_token']
        else:
            raise Exception("Failed to generate access token.")
    except Exception as e:
        print(f"Error generating access token: {e}")
        exit()

# Fetch Data from API
def fetch_data(start_date, end_date, auth_token):
    headers = {
        "Authorization": f"Bearer {auth_token}",
        "Content-Type": "application/json"
    }
    all_data = []
    skip = 0
    top = 10000  # Adjust this value as needed for pagination

    while True:
        params = {
            "startdate": start_date,
            "enddate": end_date,
            "top": top,
            "skip": skip
        }
        response = requests.get(API_URL, headers=headers, params=params)
        data = response.json()

        if "completedContacts" in data and data["completedContacts"]:
            all_data.extend(data["completedContacts"])
            skip += top
            if len(data["completedContacts"]) < top:
                break
        else:
            break

    print(f"Total records fetched: {len(all_data)}")
    return all_data

# Insert Raw Data into Database
def insert_raw_data(cursor, data):
    try:
        insert_query = """
        INSERT INTO raw (
            contact_id, master_contact_id, media_type_id, to_addr, from_addr, 
            abandoned, abandon_seconds, agent_seconds, pre_queue_seconds, 
            in_queue_seconds, end_reason, contact_start, last_update_time
        )
        VALUES (
            %(contactId)s, %(masterContactId)s, %(mediaTypeId)s, %(toAddr)s, %(fromAddr)s, 
            %(abandoned)s, %(abandonSeconds)s, %(agentSeconds)s, %(preQueueSeconds)s, 
            %(inQueueSeconds)s, %(endReason)s, %(contactStart)s, %(lastUpdateTime)s
        )
        """
        for record in data:
            # Ensure all required keys are present, and set defaults for missing ones
            sanitized_record = {
                'contactId': record.get('contactId', None),
                'masterContactId': record.get('masterContactId', None),
                'mediaTypeId': record.get('mediaTypeId', None),  # Corrected field name
                'toAddr': record.get('toAddr', None),
                'fromAddr': record.get('fromAddr', None),
                'abandoned': record.get('abandoned', False),
                'abandonSeconds': record.get('abandonSeconds', 0),
                'agentSeconds': min(record.get('agentSeconds', 0), 9223372036854775807),
                'preQueueSeconds': min(record.get('preQueueSeconds', 0), 9223372036854775807),
                'inQueueSeconds': min(record.get('inQueueSeconds', 0), 9223372036854775807),
                'endReason': record.get('endReason', None),
                'contactStart': record.get('contactStart', None),
                'lastUpdateTime': record.get('lastUpdateTime', None)
            }

            # Insert sanitized record into the database
            cursor.execute(insert_query, sanitized_record)
    except Exception as e:
        print(f"Error storing raw data: {e}")

# Establish Database Connection
def connect_db():
    try:
        conn = psycopg2.connect(
            host=DB_CONFIG["host"], 
            database=DB_CONFIG["database"], 
            user=DB_CONFIG["user"], 
            password=DB_CONFIG["password"]
        )
        return conn
    except Exception as e:
        print(f"Error connecting to the database: {e}")
        exit()

# Filter Data and Store Processed Data
def filter_and_store_data(cursor, data):
    # Implement the logic for filtering based on your requirements
    filtered_data = []
    for record in data:
        # Example filtering (you can customize this part)
        if record.get('mediaTypeId') == 4 and record.get('isOutbound') is False:
            filtered_data.append(record)

    # Store the filtered data into a new table
    insert_filtered_query = """
    INSERT INTO filtered_data (
        contact_id, master_contact_id, media_type_id, to_addr, from_addr, 
        abandoned, abandon_seconds, agent_seconds, pre_queue_seconds, 
        in_queue_seconds, end_reason, contact_start, last_update_time
    )
    VALUES (
        %(contactId)s, %(masterContactId)s, %(mediaTypeId)s, %(toAddr)s, %(fromAddr)s, 
        %(abandoned)s, %(abandonSeconds)s, %(agentSeconds)s, %(preQueueSeconds)s, 
        %(inQueueSeconds)s, %(endReason)s, %(contactStart)s, %(lastUpdateTime)s
    )
    """
    for record in filtered_data:
        sanitized_filtered_record = {
            'contactId': record.get('contactId', None),
            'masterContactId': record.get('masterContactId', None),
            'mediaTypeId': record.get('mediaTypeId', None),
            'toAddr': record.get('toAddr', None),
            'fromAddr': record.get('fromAddr', None),
            'abandoned': record.get('abandoned', False),
            'abandonSeconds': record.get('abandonSeconds', 0),
            'agentSeconds': min(record.get('agentSeconds', 0), 9223372036854775807),
            'preQueueSeconds': min(record.get('preQueueSeconds', 0), 9223372036854775807),
            'inQueueSeconds': min(record.get('inQueueSeconds', 0), 9223372036854775807),
            'endReason': record.get('endReason', None),
            'contactStart': record.get('contactStart', None),
            'lastUpdateTime': record.get('lastUpdateTime', None)
        }
        cursor.execute(insert_filtered_query, sanitized_filtered_record)

# Main Execution Flow
if __name__ == "__main__":
    # Generate Access Token
    auth_token = get_access_token()

    # Set the time range for the last 2 hours
    end_date = datetime.now(timezone.utc).strftime('%Y-%m-%dT%H:%M:%SZ')
    start_date = (datetime.now(timezone.utc) - timedelta(hours=2)).strftime('%Y-%m-%dT%H:%M:%SZ')

    # Fetch data from the API
    data = fetch_data(start_date, end_date, auth_token)
    if data:
        print("Data fetched successfully.")

        # Connect to the database
        conn = connect_db()
        cursor = conn.cursor()

        # Store raw data into the database
        insert_raw_data(cursor, data)

        # Filter and store processed data
        filter_and_store_data(cursor, data)

        # Commit and close connection
        conn.commit()
        cursor.close()
        conn.close()

        print("Data processing complete.")
    else:
        print("No data fetched for the given time range.")
