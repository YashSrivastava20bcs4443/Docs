app.get('/api/detail', async (req, res) => {
    try {
        const { category, startDate, endDate, portal, tfn, tfnSearch } = req.query;
        console.log('Detail Request Params:', { category, startDate, endDate, portal, tfn, tfnSearch }); // Debug

        let query = `
            SELECT 
                "toAddress" AS TFN,
                'Description Placeholder' AS Description, -- Replace with actual column if exists
                COUNT(*) FILTER (WHERE "masterContactId" = "contactId" AND "isOutbound" = 'False' AND "mediaTypeId" = '4') AS ivr_offered,
                COUNT(*) FILTER (WHERE "masterContactId" = "contactId" AND "isOutbound" = 'False' AND "mediaTypeId" = '4' 
                    AND COALESCE(NULLIF("agentSeconds", '')::FLOAT, 0) = 0
                    AND COALESCE(NULLIF("inQueueSeconds", '')::FLOAT, 0) = 0
                    AND COALESCE(NULLIF("preQueueSeconds", '')::FLOAT, 0) > 1
                    AND COALESCE(NULLIF("abandoned", ''), 'False') = 'False'
                    AND "endReason" = 'Contact Hung Up') AS ivr_abandoned,
                COUNT(*) FILTER (WHERE "masterContactId" = "contactId" AND "isOutbound" = 'False' AND "mediaTypeId" = '4' 
                    AND COALESCE(NULLIF("agentSeconds", '')::FLOAT, 0) = 0
                    AND COALESCE(NULLIF("inQueueSeconds", '')::FLOAT, 0) > 0
                    AND COALESCE(NULLIF("preQueueSeconds", '')::FLOAT, 0) > 0
                    AND COALESCE(NULLIF("abandoned", ''), 'True') = 'True') AS queue_abandoned,
                COUNT(*) FILTER (WHERE "masterContactId" = "contactId" AND "isOutbound" = 'False' AND "mediaTypeId" = '4' 
                    AND COALESCE(NULLIF("agentSeconds", '')::FLOAT, 0) = 0
                    AND COALESCE(NULLIF("inQueueSeconds", '')::FLOAT, 0) = 0
                    AND COALESCE(NULLIF("preQueueSeconds", '')::FLOAT, 0) > 1
                    AND COALESCE(NULLIF("abandoned", ''), 'False') = 'False'
                    AND "endReason" = 'Contact Hang Up via Script') AS closed_by_ivr,
                COUNT(*) FILTER (WHERE "masterContactId" = "contactId" AND "isOutbound" = 'False' AND "mediaTypeId" = '4' 
                    AND COALESCE(NULLIF("agentSeconds", '')::FLOAT, 0) > 0) AS answered_calls,
                'Portal Placeholder' AS Portal, -- Replace with actual column if exists
                'TFN Type Placeholder' AS "TFN Type" -- Replace with actual column if exists
            FROM contact_mapped_data
        `;

        const queryParams = [];
        let paramIndex = 1;

        // Add dynamic conditions based on category
        if (category) {
            query += ' WHERE 1=1'; // Ensure WHERE clause exists
            if (category === 'ivr_offered') {
                query += ' AND COUNT(*) FILTER (WHERE "masterContactId" = "contactId" AND "isOutbound" = \'False\' AND "mediaTypeId" = \'4\') > 0';
            } else if (category === 'ivr_abandoned') {
                query += ' AND COUNT(*) FILTER (WHERE "masterContactId" = "contactId" AND "isOutbound" = \'False\' AND "mediaTypeId" = \'4\' ' +
                    'AND COALESCE(NULLIF("agentSeconds", \'\')::FLOAT, 0) = 0 ' +
                    'AND COALESCE(NULLIF("inQueueSeconds", \'\')::FLOAT, 0) = 0 ' +
                    'AND COALESCE(NULLIF("preQueueSeconds", \'\')::FLOAT, 0) > 1 ' +
                    'AND COALESCE(NULLIF("abandoned", \'\'), \'False\') = \'False\' ' +
                    'AND "endReason" = \'Contact Hung Up\') > 0';
            } else if (category === 'queue_abandoned') {
                query += ' AND COUNT(*) FILTER (WHERE "masterContactId" = "contactId" AND "isOutbound" = \'False\' AND "mediaTypeId" = \'4\' ' +
                    'AND COALESCE(NULLIF("agentSeconds", \'\')::FLOAT, 0) = 0 ' +
                    'AND COALESCE(NULLIF("inQueueSeconds", \'\')::FLOAT, 0) > 0 ' +
                    'AND COALESCE(NULLIF("preQueueSeconds", \'\')::FLOAT, 0) > 0 ' +
                    'AND COALESCE(NULLIF("abandoned", \'\'), \'True\') = \'True\') > 0';
            } else if (category === 'closed_by_ivr') {
                query += ' AND COUNT(*) FILTER (WHERE "masterContactId" = "contactId" AND "isOutbound" = \'False\' AND "mediaTypeId" = \'4\' ' +
                    'AND COALESCE(NULLIF("agentSeconds", \'\')::FLOAT, 0) = 0 ' +
                    'AND COALESCE(NULLIF("inQueueSeconds", \'\')::FLOAT, 0) = 0 ' +
                    'AND COALESCE(NULLIF("preQueueSeconds", \'\')::FLOAT, 0) > 1 ' +
                    'AND COALESCE(NULLIF("abandoned", \'\'), \'False\') = \'False\' ' +
                    'AND "endReason" = \'Contact Hang Up via Script\') > 0';
            } else if (category === 'abandoned_in_10') {
                query += ' AND COUNT(*) FILTER (WHERE "masterContactId" = "contactId" AND "isOutbound" = \'False\' AND "mediaTypeId" = \'4\' ' +
                    'AND COALESCE(NULLIF("totalCallDuration", \'\')::FLOAT, 0) <= 10 ' +
                    'AND COALESCE(NULLIF("abandoned", \'\'), \'True\') = \'True\') > 0'; // Adjust condition if needed
            } else if (category === 'abandoned_in_over_10_sec') {
                query += ' AND COUNT(*) FILTER (WHERE "masterContactId" = "contactId" AND "isOutbound" = \'False\' AND "mediaTypeId" = \'4\' ' +
                    'AND COALESCE(NULLIF("totalCallDuration", \'\')::FLOAT, 0) > 10 ' +
                    'AND COALESCE(NULLIF("abandoned", \'\'), \'True\') = \'True\') > 0'; // Adjust condition if needed
            } else if (category === 'answered_calls') {
                query += ' AND COUNT(*) FILTER (WHERE "masterContactId" = "contactId" AND "isOutbound" = \'False\' AND "mediaTypeId" = \'4\' ' +
                    'AND COALESCE(NULLIF("agentSeconds", \'\')::FLOAT, 0) > 0) > 0';
            }
        }

        // Add date range filter
        if (startDate && endDate) {
            query += (query.includes('WHERE') ? ' AND ' : ' WHERE ') + 'DATE("contactStartDate") BETWEEN $' + paramIndex++ + ' AND $' + paramIndex++;
            queryParams.push(startDate, endDate);
        } else if (startDate) {
            query += (query.includes('WHERE') ? ' AND ' : ' WHERE ') + 'DATE("contactStartDate") >= $' + paramIndex++;
            queryParams.push(startDate);
        } else if (endDate) {
            query += (query.includes('WHERE') ? ' AND ' : ' WHERE ') + 'DATE("contactStartDate") <= $' + paramIndex++;
            queryParams.push(endDate);
        }

        // Add portal filter
        if (portal) {
            query += (query.includes('WHERE') ? ' AND ' : ' WHERE ') + '"portal" = $' + paramIndex++;
            queryParams.push(portal);
        }

        // Add TFN filter
        if (tfn) {
            query += (query.includes('WHERE') ? ' AND ' : ' WHERE ') + '"tfnType" = $' + paramIndex++; // Adjust column name if different
            queryParams.push(tfn);
        }

        // Add TFN search filter
        if (tfnSearch) {
            query += (query.includes('WHERE') ? ' AND ' : ' WHERE ') + '"toAddress" ILIKE $' + paramIndex++;
            queryParams.push(`%${tfnSearch}%`);
        }

        query += ' GROUP BY "toAddress"';

        console.log('Executing Detail Query:', query); // Debug the full query
        console.log('Query Params:', queryParams); // Debug parameters

        const result = await pool.query(query, queryParams);
        console.log('Query Result:', result.rows); // Debug result

        res.json(result.rows);
    } catch (err) {
        console.error('Error fetching detail data:', err);
        res.status(500).json({ error: 'Internal Server Error' });
    }
});
