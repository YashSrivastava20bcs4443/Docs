def ivr_bucket_summary():
    try:
        # Create the database connection inside the function
        conn = psycopg2.connect(
            dbname=config.DB_NAME, 
            user=config.DB_USER, 
            password=config.DB_PASSWORD, 
            host=config.DB_HOST, 
            port=config.DB_PORT
        )

        # Fetch required data for processing from the 'raw' table
        query = """
        SELECT contactStartDate, abandoned, agentSeconds, preQueueSeconds
        FROM raw;
        """
        df = pd.read_sql_query(query, conn)

        # Ensure the 'preQueueSeconds' column exists and is numeric
        if 'preQueueSeconds' not in df.columns:
            raise ValueError("The column 'preQueueSeconds' is missing from the raw data table.")
        
        # Convert 'preQueueSeconds' to numeric and handle any errors
        df['preQueueSeconds'] = pd.to_numeric(df['preQueueSeconds'], errors='coerce').fillna(0)

        # Convert contactStartDate to 30-minute intervals
        df['time_interval'] = pd.to_datetime(df['contactStartDate']).dt.floor('30min')

        # Create IVR Buckets based on preQueueSeconds
        df['ivr_bucket'] = pd.cut(
            df['preQueueSeconds'],
            bins=[0, 30, 60, 120, float('inf')],
            labels=['0-30s', '30-60s', '60-120s', '>120s'],
            right=False
        )

        # Calculate Offered Calls and IVR Abandon by bucket
        summary = df.groupby(['time_interval', 'ivr_bucket']).agg(
            Offered_Calls=('contactStartDate', 'count'),
            IVR_Abandon=('abandoned', lambda x: (x & (df['agentSeconds'] == 0)).sum())
        ).reset_index()

        # Store the result back into the 'ivr_bucket_summary' table in PostgreSQL
        summary.to_sql('ivr_bucket_summary', conn, if_exists='append', index=False)

        print("IVR Bucket Summary stored successfully.")

    except Exception as e:
        print(f"Error generating IVR bucket summary: {e}")
    
    finally:
        conn.close()
