import requests
from requests.auth import HTTPBasicAuth
import urllib3
import os
import logging

# Disable insecure request warnings (for self-signed certificates)
urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

# Configuration
BASE_URL = "https://<storage-system-ip>/ConfigurationManager/v1"  # Replace with your storage system's IP
USERNAME = os.getenv("HITACHI_API_USER", "<your-username>")        # Fetch from environment variables if available
PASSWORD = os.getenv("HITACHI_API_PASS", "<your-password>")        # Fetch from environment variables if available

# Logging setup
logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s")

# Function to fetch data from an endpoint
def fetch_data(endpoint):
    url = f"{BASE_URL}/{endpoint}"
    try:
        response = requests.get(
            url,
            auth=HTTPBasicAuth(USERNAME, PASSWORD),
            headers={"Accept": "application/json"},
            verify=False
        )
        logging.info(f"Request URL: {url}")
        logging.info(f"Status Code: {response.status_code}")
        
        # Handle responses
        if response.status_code == 200:
            logging.info("Response JSON: %s", response.json())
            return response.json()
        else:
            logging.error("Error Response: %s", response.text)
            return None
    except Exception as e:
        logging.error(f"An error occurred: {e}")
        return None

# Fetch storage device IDs
def get_storage_device_ids():
    logging.info("Fetching available storage devices...")
    devices = fetch_data("objects/storages")
    if devices and "data" in devices:
        return [device["storageDeviceId"] for device in devices["data"]]
    return []

# Fetch processor data for a given storage device ID
def fetch_processor_data(storage_device_id):
    endpoint = f"objects/storages/{storage_device_id}/processors"
    logging.info(f"Fetching processor data for storage device ID: {storage_device_id}")
    return fetch_data(endpoint)

# Main script
if __name__ == "__main__":
    logging.info("Starting the script...")
    
    # Fetch all storage device IDs
    storage_ids = get_storage_device_ids()
    
    if not storage_ids:
        logging.error("No storage devices found!")
    else:
        for device_id in storage_ids:
            processor_data = fetch_processor_data(device_id)
            if processor_data:
                logging.info(f"Processor Data for {device_id}: {processor_data}")
            else:
                logging.warning(f"Failed to fetch processor data for {device_id}.")
