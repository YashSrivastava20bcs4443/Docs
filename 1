import pandas as pd
import matplotlib.pyplot as plt
from statsmodels.tsa.arima.model import ARIMA
from sklearn.metrics import mean_squared_error

# Step 1: Load and Clean Data
# Load the CSV file
data = pd.read_csv('your_data.csv')

# Drop rows where 'Interval' (date) is missing
data_cleaned = data.dropna(subset=['Interval'])

# Keep relevant columns and convert 'Interval' to datetime
data_cleaned['Interval'] = pd.to_datetime(data_cleaned['Interval'], format='%m/%d/%Y')
data_cleaned = data_cleaned[['Rule', 'Interval', 'Average', 'Max', 'Min', 'StandardDeviation']]

# Step 2: Combine CPU and Memory Data
# Filter CPU and Memory Data
cpu_data = data_cleaned[data_cleaned['Rule'].str.contains('Processor')].set_index('Interval')
memory_data = data_cleaned[data_cleaned['Rule'].str.contains('Memory')].set_index('Interval')

# Combine data into a single DataFrame (optional: align data by dates)
combined_data = pd.DataFrame({
    'CPU_Average': cpu_data['Average'],
    'Memory_Average': memory_data['Average']
})

# Step 3: Visualization
plt.figure(figsize=(14, 7))
plt.plot(combined_data.index, combined_data['CPU_Average'], label='CPU Usage')
plt.plot(combined_data.index, combined_data['Memory_Average'], label='Memory Usage')
plt.title('CPU and Memory Usage Over Time')
plt.xlabel('Date')
plt.ylabel('Usage (%)')
plt.legend()
plt.show()

# Step 4: Forecasting Model
# Using ARIMA for CPU
cpu_model = ARIMA(combined_data['CPU_Average'].dropna(), order=(5, 1, 0))
cpu_model_fit = cpu_model.fit()

# Forecast next day CPU usage
cpu_forecast = cpu_model_fit.forecast(steps=1)

# Using ARIMA for Memory
memory_model = ARIMA(combined_data['Memory_Average'].dropna(), order=(5, 1, 0))
memory_model_fit = memory_model.fit()

# Forecast next day Memory usage
memory_forecast = memory_model_fit.forecast(steps=1)

print(f'Forecasted CPU Usage for next day: {cpu_forecast[0]:.2f}%')
print(f'Forecasted Memory Usage for next day: {memory_forecast[0]:.2f}%')

# Step 5: Evaluate the Model
# Assuming you have actual values for the next day
actual_cpu_value = 3.5  # Replace with the actual value if available
actual_memory_value = 46.5  # Replace with the actual value if available

# Calculate RMSE for CPU
cpu_rmse = mean_squared_error([actual_cpu_value], cpu_forecast, squared=False)
print(f'CPU Usage RMSE: {cpu_rmse:.2f}')

# Calculate RMSE for Memory
memory_rmse = mean_squared_error([actual_memory_value], memory_forecast, squared=False)
print(f'Memory Usage RMSE: {memory_rmse:.2f}')

# Visualization of Forecast vs Actual (if actual values are available)
plt.figure(figsize=(14, 7))
plt.plot(combined_data.index, combined_data['CPU_Average'], label='CPU Usage (Actual)')
plt.axvline(x=combined_data.index[-1] + pd.Timedelta(days=1), color='r', linestyle='--')
plt.scatter(combined_data.index[-1] + pd.Timedelta(days=1), cpu_forecast[0], color='r', label='CPU Forecast')
plt.plot(combined_data.index, combined_data['Memory_Average'], label='Memory Usage (Actual)')
plt.scatter(combined_data.index[-1] + pd.Timedelta(days=1), memory_forecast[0], color='g', label='Memory Forecast')
plt.title('CPU and Memory Usage Forecast')
plt.xlabel('Date')
plt.ylabel('Usage (%)')
plt.legend()
plt.show()
