# Weekly Alerts Analysis (Grouped Bar Chart: Day of Week with Vertical Date Labels Inside Bars)
st.subheader("Weekly Alerts Analysis")

if not filtered_data.empty:
    # Add Date and Week Number
    filtered_data['DateLabel'] = filtered_data['@timestamp'].dt.strftime('%Y-%m-%d')
    filtered_data['WeekNumber'] = filtered_data['@timestamp'].dt.isocalendar().week

    # Group by Weekday and Date
    weekly_alerts = (
        filtered_data.groupby(['Weekday', 'DateLabel'])
        .size()
        .unstack(fill_value=0)
        .reindex(['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday'], fill_value=0)
    )

    # Plot the grouped bar chart
    fig, ax = plt.subplots(figsize=(12, 6))
    weekly_alerts.plot(kind='bar', ax=ax, colormap='tab10', width=0.8)

    # Display the source names if multiple are selected
    sources_display = ", ".join(selected_sources) if len(selected_sources) > 1 else selected_sources[0]
    ax.set_title(f"Weekly Alerts Analysis: Comparison of Days Across Weeks for {sources_display}")
    ax.set_xlabel("Day of the Week")
    ax.set_ylabel("Number of Alerts")

    # Display the corresponding dates vertically inside each bar
    for i, container in enumerate(ax.containers):
        for bar, date in zip(container, weekly_alerts.columns):
            height = bar.get_height()
            if height > 0:
                ax.text(
                    bar.get_x() + bar.get_width() / 2,  # X-coordinate
                    height / 2,  # Y-coordinate (center of the bar)
                    f'{date}',  # Text (date)
                    ha='center',
                    va='center',
                    fontsize=8,
                    rotation=90,  # Rotate vertically
                    color='white',  # White text for visibility
                    fontweight='bold'
                )

    # Set weekday labels for X-axis
    ax.set_xticks(range(len(weekly_alerts.index)))
    ax.set_xticklabels(weekly_alerts.index, rotation=0)  # Weekdays horizontal

    st.pyplot(fig)

else:
    st.write("No data available for the selected filters.")
