import os
import shutil
import time
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.common.action_chains import ActionChains
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.chrome.options import Options
import smtplib
from email.mime.multipart import MIMEMultipart
from email.mime.text import MIMEText
from email.mime.image import MIMEImage

# Function to sign in to Microsoft account
def sign_in(driver, email, password):
    EMAILFIELD = (By.ID, "10116")
    PASSWORDFIELD = (By.ID, "ie118")
    NEXTBUTTON = (By.ID, "idSIButton9")

    WebDriverWait(driver, 10).until(EC.element_to_be_clickable(EMAILFIELD)).send_keys(email)
    WebDriverWait(driver, 10).until(EC.element_to_be_clickable(NEXTBUTTON)).click()
    WebDriverWait(driver, 10).until(EC.element_to_be_clickable(PASSWORDFIELD)).send_keys(password)
    WebDriverWait(driver, 10).until(EC.element_to_be_clickable(NEXTBUTTON)).click()

    try:
        stay_signed_in_popup = WebDriverWait(driver, 10).until(
            EC.visibility_of_element_located((By.XPATH, "//div[contains(text(), 'Stay signed in?')]"))
        )
        if stay_signed_in_popup:
            no_button = driver.find_element(By.XPATH, "//input[@value='No']")
            no_button.click()
    except:
        pass

# Function to log in to the second site with advanced and proceed options
def login_to_site(driver, site_url, site_username, site_password):
    driver.get(site_url)
    
    # Handle advanced and proceed links for bypassing security warnings
    try:
        advanced_button = WebDriverWait(driver, 10).until(
            EC.element_to_be_clickable((By.ID, "details-button"))
        )
        advanced_button.click()

        proceed_link = WebDriverWait(driver, 10).until(
            EC.element_to_be_clickable((By.ID, "proceed-link"))
        )
        proceed_link.click()
    except Exception as e:
        print(f"No advanced option found or proceed (unsafe) link: {e}")

    # Handle accept button if any pop-up appears
    try:
        accept_button = WebDriverWait(driver, 10).until(
            EC.element_to_be_clickable((By.XPATH, "//button[@name='accept']"))
        )
        accept_button.click()
    except Exception as e:
        print(f"No accept button found: {e}")

    # Log in to the site
    WebDriverWait(driver, 10).until(EC.element_to_be_clickable((By.ID, "username"))).send_keys(site_username)
    WebDriverWait(driver, 10).until(EC.element_to_be_clickable((By.ID, "password"))).send_keys(site_password)
    WebDriverWait(driver, 10).until(EC.element_to_be_clickable((By.ID, "submit"))).click()

# Function to move the mouse to a specific position without clicking and take a full-page screenshot
def move_mouse_and_screenshot(driver, filename, x, y):
    element = driver.find_element(By.TAG_NAME, "body")  # Using body as a reference element
    actions = ActionChains(driver)
    actions.move_to_element_with_offset(element, x, y).perform()  # Move the mouse to the offset position
    time.sleep(30)  # Wait for 30 seconds
    driver.save_screenshot(filename)  # Take a full-page screenshot

# Function to send email with inline screenshots
def send_email(app_name, owner_email, screenshot_filenames, severity, alert_description, smtp_server, smtp_port, sender_email, sender_password):
    msg = MIMEMultipart()
    msg["From"] = sender_email
    msg["To"] = owner_email
    msg["Subject"] = f"Automated screenshot"

    body = f"""
    <html>
        <body>
            <p>Hi Team,</p>
            <p>Please find the attached screenshots:</p>
            {"".join([f'<p><img src="cid:{os.path.basename(filename)}"></p>' for filename in screenshot_filenames])}
            <p>Thanks & Regards,<br>EMS Team</p>
        </body>
    </html>
    """
    msg.attach(MIMEText(body, "html"))

    for filename in screenshot_filenames:
        with open(filename, "rb") as f:
            img = MIMEImage(f.read())
            img.add_header("Content-ID", f"<{os.path.basename(filename)}>")
            msg.attach(img)

    with smtplib.SMTP(smtp_server, smtp_port) as server:
        server.starttls()
        server.login(sender_email, sender_password)
        server.send_message(msg)

# Main script
def main():
    # Setup Chrome options
    chrome_options = Options()
    chrome_options.add_argument("--start-maximized")
    
    # Path to your ChromeDriver
    driver_path = "path_to_chromedriver"

    # Initialize the WebDriver
    driver = webdriver.Chrome(service=Service(driver_path), options=chrome_options)

    # Resize the browser to 55% of screen width and height
    screen_width = driver.execute_script("return window.screen.availWidth;")
    screen_height = driver.execute_script("return window.screen.availHeight;")
    driver.set_window_size(int(screen_width * 0.55), int(screen_height * 0.55))

    try:
        # Microsoft login details
        email = "your_email@example.com"
        password = "your_password"

        # Site login details
        site_url = "https://10.1.3.96/"
        site_username = "your_site_username"
        site_password = "your_site_password"

        # Email details
        smtp_server = "smtp.example.com"
        smtp_port = 587
        sender_email = "your_email@example.com"
        sender_password = "your_email_password"
        owner_email = "recipient@example.com"

        # Temp directory to store screenshots
        temp_dir = "Temp"
        os.makedirs(temp_dir, exist_ok=True)

        # Sign in to Microsoft
        sign_in(driver, email, password)

        # Login to the second site
        login_to_site(driver, site_url, site_username, site_password)

        # Move mouse and take screenshots
        screenshots = [
            ("599,540", f"{temp_dir}/used_screenshot.png"),
            ("615,540", f"{temp_dir}/preallocated_screenshot.png"),
            ("655,534", f"{temp_dir}/free_screenshot.png"),
        ]
        
        for position, filename in screenshots:
            x, y = map(int, position.split(","))
            move_mouse_and_screenshot(driver, filename, x, y)

        # Click on Performance and Service and take screenshots
        performance_xpath = "//span[@class='x-tree-node-text'][text()='Performance']"
        service_xpath = "//span[@class='x-tree-node-text'][text()='Service']"

        WebDriverWait(driver, 10).until(EC.element_to_be_clickable((By.XPATH, performance_xpath))).click()
        time.sleep(50)
        performance_screenshot = f"{temp_dir}/performance_screenshot.png"
        driver.save_screenshot(performance_screenshot)

        WebDriverWait(driver, 10).until(EC.element_to_be_clickable((By.XPATH, service_xpath))).click()
        time.sleep(50)
        service_screenshot = f"{temp_dir}/service_screenshot.png"
        driver.save_screenshot(service_screenshot)

        # Send email with screenshots
        screenshot_filenames = [filename for _, filename in screenshots] + [performance_screenshot, service_screenshot]
        send_email("App Name", owner_email, screenshot_filenames, "High", "Alert Description", smtp_server, smtp_port, sender_email, sender_password)

    finally:
        driver.quit()
        shutil.rmtree(temp_dir)

if __name__ == "__main__":
    main()


from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.common.action_chains import ActionChains
from selenium.webdriver.chrome.service import Service
from pyautogui import moveTo

# Initialize the WebDriver and open the page
driver = webdriver.Chrome(service=Service("path_to_chromedriver"))
driver.get("https://10.1.3.96/")

# Zoom the page to 50%
driver.execute_script("document.body.style.zoom='50%'")

# Example: Scroll to and move the mouse to an element
element = driver.find_element(By.XPATH, "//span[text()='Your Element Text']")
driver.execute_script("arguments[0].scrollIntoView(true);", element)
actions = ActionChains(driver)
actions.move_to_element(element).perform()

# Or move mouse to specific screen coordinates
moveTo(600, 540)  # Example coordinates
