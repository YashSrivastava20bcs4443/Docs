const axios = require("axios");
const { Client } = require("pg");

const dbConfig = {
    host: "10.7.32.134",
    database: "postgres",
    user: "postgres",
    password: "automation@123",
    port: 5432
};

const API_URL =
    "https://api-c48.nice-incontact.com/incontactapi/services/v31.0/contacts/completed";
const ACCESS_TOKEN_URL =
    "http://ctiintegrationapi.operations.fareportal.com.local/api/Agent/accessToken";

// ✅ Get Access Token
async function getAccessToken() {
    try {
        const response = await axios.post(ACCESS_TOKEN_URL);
        if (response.data.access_token) {
            console.log("✅ Access Token generated successfully.");
            return response.data.access_token;
        } else {
            throw new Error("❌ Access token missing from response.");
        }
    } catch (error) {
        console.error("❌ Error getting access token:", error.message);
        throw error;
    }
}

// ✅ Fetch Data from API
async function fetchData(startDate, endDate, authToken) {
    let allData = [];
    let skip = 0;
    const top = 1000;

    try {
        while (true) {
            const params = { startdate: startDate, enddate: endDate, top: top, skip: skip };
            const headers = { Authorization: `Bearer ${authToken}`, "Content-Type": "application/json" };

            const response = await axios.get(API_URL, { headers, params });
            const data = response.data;

            if (data.completedContacts && data.completedContacts.length > 0) {
                allData.push(...data.completedContacts);
                skip += top;
                if (data.completedContacts.length < top) break;
            } else {
                break;
            }
        }
        console.log(`✅ Total records fetched: ${allData.length}`);
        return allData;
    } catch (error) {
        console.error("❌ Error fetching API data:", error.message);
        return [];
    }
}

// ✅ Create Table Based on Data Schema
async function createTableIfNotExists(data) {
    if (data.length === 0) {
        console.log("⚠️ No data received, skipping table creation.");
        return;
    }

    const firstRecord = data[0];
    const columns = [];

    for (const [key, value] of Object.entries(firstRecord)) {
        let colType = "TEXT"; // Default type

        if (typeof value === "number") {
            if (Number.isInteger(value)) {
                colType = "BIGINT"; // Whole numbers
            } else {
                colType = "DOUBLE PRECISION"; // Decimal numbers
            }
        }
        if (typeof value === "boolean") colType = "BOOLEAN";
        if (typeof value === "string" && value.length > 255) colType = "TEXT";
        if (typeof value === "string" && value.length <= 255) colType = "VARCHAR(255)";
        if (value instanceof Date) colType = "TIMESTAMP"; // Handle date fields

        columns.push(`"${key}" ${colType}`);
    }

    const createTableQuery = `CREATE TABLE IF NOT EXISTS contact_data (${columns.join(", ")});`;

    const client = new Client(dbConfig);
    await client.connect();
    await client.query(createTableQuery);
    await client.end();

    console.log("✅ Table 'contact_data' is ready.");
}

// ✅ Insert Data Into Table with Error Handling
async function insertData(data) {
    if (data.length === 0) {
        console.log("⚠️ No records to insert.");
        return;
    }

    const client = new Client(dbConfig);
    await client.connect();

    const columns = Object.keys(data[0]);
    const placeholders = columns.map((_, index) => `$${index + 1}`).join(", ");
    const insertQuery = `
        INSERT INTO contact_data (${columns.map((col) => `"${col}"`).join(", ")})
        VALUES (${placeholders})
    `;

    for (const record of data) {
        try {
            const values = columns.map((col) => {
                let value = record[col];

                if (value === undefined || value === null) return null;
                if (typeof value === "number") return value;
                if (typeof value === "boolean") return value;
                if (typeof value === "string") return value.trim();
                if (value instanceof Date) return value.toISOString(); // Convert Date objects
                return value.toString();
            });

            await client.query(insertQuery, values);
        } catch (error) {
            console.error(`❌ Error inserting record: ${error.message}`);
            console.error(`🛑 Problematic record: ${JSON.stringify(record)}`);
        }
    }

    await client.end();
    console.log(`✅ Inserted ${data.length} records into 'contact_data'.`);
}

// ✅ Main Function to Run Data Ingestion
(async () => {
    try {
        const authToken = await getAccessToken();

        const endDate = new Date().toISOString();
        const startDate = new Date(new Date().getTime() - 60 * 60 * 1000).toISOString();

        const data = await fetchData(startDate, endDate, authToken);

        if (data.length > 0) {
            await createTableIfNotExists(data);
            await insertData(data);
        }

        console.log("🎉 Data ingestion completed successfully!");
    } catch (error) {
        console.error("❌ Error:", error.message);
    }
})();

