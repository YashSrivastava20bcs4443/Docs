import requests
import psycopg2
import pandas as pd
import os
from datetime import datetime, timedelta, timezone

# PostgreSQL connection details
DB_CONFIG = {
    "host": "172.16.130.247",
    "database": "postgres",
    "user": "postgres",
    "password": "Zxcv@1234"
}

# API and Access Token Details
API_URL = "https://api-c48.nice-incontact.com/incontactapi/services/v31.0/contacts/completed"
ACCESS_TOKEN_URL = "http://ctiintegrationapi.operations.fareportal.com.local/api/Agent/accessToken"

# Function to generate access token
def get_access_token():
    try:
        response = requests.post(ACCESS_TOKEN_URL)
        response_data = response.json()
        if "access_token" in response_data:
            print("Access Token generated successfully.")
            return response_data['access_token']
        else:
            raise Exception("Failed to generate access token.")
    except Exception as e:
        print(f"Error generating access token: {e}")
        exit()

# Function to fetch data from the API
def fetch_data(start_date, end_date, auth_token):
    headers = {
        "Authorization": f"Bearer {auth_token}",
        "Content-Type": "application/json"
    }
    all_data = []
    skip = 0
    top = 10000  
    while True:
        params = {
            "startdate": start_date,
            "enddate": end_date,
            "top": top,
            "skip": skip
        }
        response = requests.get(API_URL, headers=headers, params=params)
        data = response.json()
        if "completedContacts" in data and data["completedContacts"]:
            all_data.extend(data["completedContacts"])
            skip += top
            if len(data["completedContacts"]) < top:
                break
        else:
            break
    print(f"Total records fetched: {len(all_data)}")
    return all_data

# Save data to CSV
def save_to_csv(data, filename):
    df = pd.DataFrame(data)
    df.to_csv(filename, index=False)
    print(f"Data saved to {filename}")

# Filter data based on the specified conditions
def filter_data(data):
    df = pd.DataFrame(data)
    df['mediaType'] = df['mediaType'].astype(str)
    df['isOutbound'] = df['isOutbound'].astype(bool)
    df['preQueueSeconds'] = pd.to_numeric(df['preQueueSeconds'], errors='coerce').fillna(0)
    df['inQueueSeconds'] = pd.to_numeric(df['inQueueSeconds'], errors='coerce').fillna(0)
    df['agentSeconds'] = pd.to_numeric(df['agentSeconds'], errors='coerce').fillna(0)

    # Filtering logic
    filtered_df = df[
        (df['mediaType'] == '4') &
        (df['isOutbound'] == False) &
        (df['masterContactId'] == df['contactId']) &
        (df['abandoned'] == False) &
        (df['agentSeconds'] == 0) &
        (df['inQueueSeconds'] == 0) &
        (df['preQueueSeconds'] > 1) &
        (df['endReason'].isin(["Contact Hung Up", "Contact Hang Up via Script"]))
    ]
    print(f"Filtered records: {len(filtered_df)}")
    return filtered_df

# Function to store data into PostgreSQL and delete CSV after insertion
def store_data_to_postgresql(data, csv_file, filtered_csv_file):
    try:
        conn = psycopg2.connect(**DB_CONFIG)
        cursor = conn.cursor()
        for _, row in data.iterrows():
            cursor.execute("""
                INSERT INTO completed_contacts 
                (contact_id, start_date, end_date, from_addr, to_addr, media_type, is_outbound, master_contact_id)
                VALUES (%s, %s, %s, %s, %s, %s, %s, %s)
            """, (
                row.get('contactId'), 
                row.get('contactStartDate'), 
                row.get('lastUpdateTime'), 
                row.get('fromAddr'), 
                row.get('toAddr'), 
                row.get('mediaType'), 
                row.get('isOutbound'), 
                row.get('masterContactId')
            ))
        conn.commit()
        print("Filtered data successfully stored in PostgreSQL.")
        cursor.close()
        conn.close()

        # Delete CSV files after successful insertion
        os.remove(csv_file)
        os.remove(filtered_csv_file)
        print("CSV files deleted after successful database insertion.")

    except Exception as e:
        print(f"Error storing data to PostgreSQL: {e}")

# Main Execution Flow
if __name__ == "__main__":
    auth_token = get_access_token()
    end_date = datetime.now(timezone.utc).strftime('%Y-%m-%dT%H:%M:%SZ')
    start_date = (datetime.now(timezone.utc) - timedelta(hours=2)).strftime('%Y-%m-%dT%H:%M:%SZ')

    # Fetch and save raw data
    data = fetch_data(start_date, end_date, auth_token)
    if data:
        raw_csv_file = "completed_contacts.csv"
        filtered_csv_file = "filtered_contacts.csv"
        
        # Save raw and filtered data to CSV
        save_to_csv(data, raw_csv_file)
        filtered_data = filter_data(data)
        save_to_csv(filtered_data.to_dict(orient='records'), filtered_csv_file)

        # Store filtered data into PostgreSQL and delete CSV files
        store_data_to_postgresql(filtered_data, raw_csv_file, filtered_csv_file)
    else:
        print("No data fetched for the given time range.")
