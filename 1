def get_data_from_raw_index():
    payload = json.dumps({
        "size": 100,
        "query": {
            "range": {
                "@timestamp": {
                    "gte": "now-1m",
                    "lte": "now"
                }
            }
        },
        "sort": [{"@timestamp": {"order": "desc"}}]
    })

    try:
        result = es.search(index='raw-splunk-events-*', body=payload)

        if result['hits']['total']['value'] > 0:
            latest_records = [hit['_source'] for hit in result['hits']['hits']]
            for record in latest_records:
                # Print extracted values from raw data for checking
                print("\n--- Raw Splunk Alert Mappings ---")
                print("severity:", record.get("severity", "CRITICAL"))
                print("messageTitle:", record.get("messageTitle", "Splunk Alert"))
                print("timestamp:", record.get("timestamp", record.get("@timestamp", utc_now)))
                print("detector:", record.get("detector", "Splunk"))
                print("dimensions.location:", record.get("dimensions", {}).get("location", "Unknown"))
                print("dimensions.test:", record.get("dimensions", {}).get("test", ""))
                print("inputs.stream.value:", record.get("inputs", {}).get("stream", {}).get("value", ""))
                print("originatingMetric:", record.get("originatingMetric", "Unknown"))
                print("incidentId:", record.get("incidentId", "Will generate from hash"))
                print("----------------------------------")

                push_data_to_common_events(record)
        else:
            print("No recent records found in raw-splunk-events-* index.")
    except Exception as e:
        print(f"Error fetching documents from raw index: {e}")
