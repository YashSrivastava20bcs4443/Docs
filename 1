import pandas as pd
import matplotlib.pyplot as plt
from statsmodels.tsa.arima.model import ARIMA
from sklearn.metrics import mean_absolute_error, mean_squared_error
import numpy as np

# Load the CSV data
data = pd.read_csv('your_data.csv')

# Replace 'Interval' with the actual date column name
date_column = 'your_actual_date_column_name'  # Replace this with the correct name
data[date_column] = pd.to_datetime(data[date_column], format='%m/%d/%Y')

# Filter CPU and Memory data based on 'Rule' or 'Name' column
cpu_data = data[data['Rule'].str.contains('Processor % Processor Time Total', na=False)]
memory_data = data[data['Rule'].str.contains('Percent Memory Used', na=False)]

# Set the date column as the index and ensure the frequency is daily
cpu_data.set_index(date_column, inplace=True)
memory_data.set_index(date_column, inplace=True)

cpu_data = cpu_data.asfreq('D').fillna(method='ffill')
memory_data = memory_data.asfreq('D').fillna(method='ffill')

# Fit ARIMA models
cpu_model = ARIMA(cpu_data['Average'], order=(1, 1, 1))
memory_model = ARIMA(memory_data['Average'], order=(1, 1, 1))

cpu_fit = cpu_model.fit()
memory_fit = memory_model.fit()

# Make predictions for the next day
cpu_forecast = cpu_fit.forecast(steps=1)
memory_forecast = memory_fit.forecast(steps=1)

# Calculate Accuracy Metrics for CPU
cpu_actual = cpu_data['Average'].iloc[-1]
cpu_predicted = cpu_forecast.iloc[0]
cpu_mae = mean_absolute_error([cpu_actual], [cpu_predicted])
cpu_mse = mean_squared_error([cpu_actual], [cpu_predicted])
cpu_rmse = np.sqrt(cpu_mse)

# Calculate Accuracy Metrics for Memory
memory_actual = memory_data['Average'].iloc[-1]
memory_predicted = memory_forecast.iloc[0]
memory_mae = mean_absolute_error([memory_actual], [memory_predicted])
memory_mse = mean_squared_error([memory_actual], [memory_predicted])
memory_rmse = np.sqrt(memory_mse)

print(f"Forecasted CPU Usage: {cpu_forecast.iloc[0]:.2f}")
print(f"CPU MAE: {cpu_mae:.2f}, MSE: {cpu_mse:.2f}, RMSE: {cpu_rmse:.2f}")

print(f"Forecasted Memory Usage: {memory_forecast.iloc[0]:.2f}")
print(f"Memory MAE: {memory_mae:.2f}, MSE: {memory_mse:.2f}, RMSE: {memory_rmse:.2f}")

# Visualization of actual vs predicted
cpu_data['Average'].plot(label='CPU Actual')
plt.axhline(y=cpu_forecast.iloc[0], color='r', linestyle='--', label='CPU Forecast')
plt.title('CPU Usage Forecast')
plt.legend()
plt.show()

memory_data['Average'].plot(label='Memory Actual')
plt.axhline(y=memory_forecast.iloc[0], color='r', linestyle='--', label='Memory Forecast')
plt.title('Memory Usage Forecast')
plt.legend()
plt.show()
