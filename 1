import os
import requests
import csv
from datetime import datetime

# Define variables
file_name = "C:/Temp/PowerBiRefreshHistory_Sept2024.csv"
tenant_id = "xxxx"
client_id = "xxxx"
client_secret = "xxxx"
pbi_authority_url = f"https://login.windows.net/{tenant_id}/oauth2/token"
pbi_resource_url = "https://analysis.windows.net/powerbi/api"

# Remove file if it exists
if os.path.exists(file_name):
    os.remove(file_name)

# Authentication
auth_body = {
    'resource': pbi_resource_url,
    'client_id': client_id,
    'grant_type': "client_credentials",
    'client_secret': client_secret
}

auth_response = requests.post(pbi_authority_url, data=auth_body)
auth_response.raise_for_status()
access_token = auth_response.json().get("access_token")

# Set up authorization header
auth_header = {
    'Content-Type': 'application/json',
    'Authorization': f'Bearer {access_token}'
}

# Get workspaces/groups
groups_url = "https://api.powerbi.com/v1.0/myorg/groups"
groups_response = requests.get(groups_url, headers=auth_header)
groups_response.raise_for_status()
groups = groups_response.json().get("value", [])

# Prepare data for CSV
pbi_datasets = []

for group in groups:
    group_id = group['id']
    group_name = group['name']
    
    # Get datasets in each group
    datasets_url = f"https://api.powerbi.com/v1.0/myorg/groups/{group_id}/datasets"
    datasets_response = requests.get(datasets_url, headers=auth_header)
    datasets_response.raise_for_status()
    datasets = datasets_response.json().get("value", [])
    
    for dataset in datasets:
        dataset_id = dataset['id']
        dataset_name = dataset['name']
        dataset_owner = dataset.get('configuredBy', 'N/A')
        
        # Get refresh history for each dataset
        refresh_url = f"https://api.powerbi.com/v1.0/myorg/groups/{group_id}/datasets/{dataset_id}/refreshes"
        refresh_response = requests.get(refresh_url, headers=auth_header)
        refresh_response.raise_for_status()
        refreshes = refresh_response.json().get("value", [])
        
        if refreshes:
            last_refresh = refreshes[0]
            refresh_type = last_refresh.get("refreshType", "N/A")
            if refresh_type in ["Scheduled", "OnDemand"]:
                refresh_start = last_refresh.get("startTime", "N/A")
                refresh_end = last_refresh.get("endTime", "N/A")
                
                # Add data to list
                pbi_datasets.append({
                    "WorkSpaceName": group_name,
                    "ReportName": dataset_name,
                    "DatasetOwner": dataset_owner,
                    "LastRefreshType": refresh_type,
                    "LastRefreshStart": refresh_start,
                    "LastRefreshEnd": refresh_end
                })

# Write to CSV file
with open(file_name, mode='w', newline='') as csv_file:
    fieldnames = ["WorkSpaceName", "ReportName", "DatasetOwner", "LastRefreshType", "LastRefreshStart", "LastRefreshEnd"]
    writer = csv.DictWriter(csv_file, fieldnames=fieldnames, delimiter=';')
    writer.writeheader()
    writer.writerows(pbi_datasets)

print("Data exported to CSV successfully.")
