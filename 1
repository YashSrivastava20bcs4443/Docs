app.get('/api/tfn-wise', async (req, res) => {
    try {
        const { startDate, endDate } = req.query;
        let query = `
            SELECT 
                "toAddress" AS "Number (toAddress)",  

                -- IVR Offered
                COUNT(*) FILTER (WHERE 
                    "masterContactId" = "contactId" 
                    AND "isOutbound" = 'False' 
                    AND "mediaTypeId" = '4'
                ) AS offered_calls,

                -- IVR Abandoned
                COUNT(*) FILTER (WHERE 
                    "masterContactId" = "contactId" 
                    AND "isOutbound" = 'False' 
                    AND "mediaTypeId" = '4' 
                    AND NULLIF("agentSeconds", '') ~ '^[0-9]+(\\.[0-9]+)?$' 
                    AND NULLIF("agentSeconds", '')::FLOAT = 0
                    AND NULLIF("inQueueSeconds", '') ~ '^[0-9]+(\\.[0-9]+)?$'  
                    AND NULLIF("inQueueSeconds", '')::FLOAT = 0
                    AND NULLIF("preQueueSeconds", '') ~ '^[0-9]+(\\.[0-9]+)?$'  
                    AND NULLIF("preQueueSeconds", '')::FLOAT > 1
                    AND COALESCE(NULLIF("abandoned", ''), 'False') = 'False'
                    AND "endReason" = 'Contact Hung Up'
                ) AS ivr_abandon,

                -- Queue Abandoned
                COUNT(*) FILTER (WHERE 
                    "masterContactId" = "contactId" 
                    AND "isOutbound" = 'True' 
                    AND "mediaTypeId" = '4' 
                    AND NULLIF("agentSeconds", '') ~ '^[0-9]+(\\.[0-9]+)?$'  
                    AND NULLIF("agentSeconds", '')::FLOAT = 0
                    AND NULLIF("inQueueSeconds", '') ~ '^[0-9]+(\\.[0-9]+)?$'  
                    AND NULLIF("inQueueSeconds", '')::FLOAT > 0
                    AND NULLIF("preQueueSeconds", '') ~ '^[0-9]+(\\.[0-9]+)?$'  
                    AND NULLIF("preQueueSeconds", '')::FLOAT > 0
                    AND COALESCE(NULLIF("abandoned", ''), 'False') = 'False'
                ) AS queue_abandon,

                -- Polite Disconnect (Closed by IVR)
                COUNT(*) FILTER (WHERE 
                    "masterContactId" = "contactId" 
                    AND "isOutbound" = 'False' 
                    AND "mediaTypeId" = '4' 
                    AND NULLIF("agentSeconds", '') ~ '^[0-9]+(\\.[0-9]+)?$'  
                    AND NULLIF("agentSeconds", '')::FLOAT = 0
                    AND NULLIF("inQueueSeconds", '') ~ '^[0-9]+(\\.[0-9]+)?$'  
                    AND NULLIF("inQueueSeconds", '')::FLOAT = 0
                    AND NULLIF("preQueueSeconds", '') ~ '^[0-9]+(\\.[0-9]+)?$'  
                    AND NULLIF("preQueueSeconds", '')::FLOAT > 1
                    AND COALESCE(NULLIF("abandoned", ''), 'False') = 'False'
                    AND "endReason" = 'Contact Hang Up via Script'
                ) AS polite_disconnect,

                -- Answered Calls
                COUNT(*) FILTER (WHERE 
                    "masterContactId" = "contactId" 
                    AND "isOutbound" = 'False' 
                    AND "mediaTypeId" = '4' 
                    AND COALESCE(NULLIF("abandoned", ''), 'False') = 'False' 
                    AND NULLIF("agentSeconds", '') ~ '^[0-9]+(\\.[0-9]+)?$'  
                    AND NULLIF("agentSeconds", '')::FLOAT > 0
                ) AS answered

            FROM contact_data
        `;

        const queryParams = [];
        if (startDate && endDate) {
            query += ' WHERE to_date("contactStartDate", \'YYYY-MM-DD\') BETWEEN $1 AND $2';
            queryParams.push(startDate, endDate);
        }

        query += ' GROUP BY "toAddress" ORDER BY offered_calls DESC';

        const result = await pool.query(query, queryParams);
        res.json(result.rows);
    } catch (err) {
        console.error('Error fetching TFN-Wise data:', err);
        res.status(500).json({ error: 'Internal Server Error' });
    }
});
