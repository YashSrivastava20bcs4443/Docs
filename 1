import os
import shutil
import time
import smtplib
import requests
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.chrome.service import Service
from email.mime.multipart import MIMEMultipart
from email.mime.text import MIMEText
from email.mime.image import MIMEImage
import config

# Function to sign in to the Microsoft account
def sign_in(driver, email, password):
    EMAILFIELD = (By.ID, "i0116")
    PASSWORDFIELD = (By.ID, "i0118")
    NEXTBUTTON = (By.ID, "idSIButton9")
    WebDriverWait(driver, 10).until(EC.element_to_be_clickable(EMAILFIELD)).send_keys(email)
    WebDriverWait(driver, 10).until(EC.element_to_be_clickable(NEXTBUTTON)).click()
    WebDriverWait(driver, 10).until(EC.element_to_be_clickable(PASSWORDFIELD)).send_keys(password)
    WebDriverWait(driver, 10).until(EC.element_to_be_clickable(NEXTBUTTON)).click()
    try:
        stay_signed_in_popup = WebDriverWait(driver, 10).until(
            EC.visibility_of_element_located((By.XPATH, "//div[contains(text(), 'Stay signed in?')]"))
        )
        if stay_signed_in_popup:
            no_button = driver.find_element(By.XPATH, "//input[@value='No']")
            no_button.click()
    except:
        pass

# Function to access the site and log in
def access_site(driver, site_username, site_password):
    try:
        advanced_button = WebDriverWait(driver, 10).until(EC.element_to_be_clickable((By.ID, "details-button")))
        advanced_button.click()
        proceed_link = WebDriverWait(driver, 10).until(EC.element_to_be_clickable((By.ID, "proceed-link")))
        proceed_link.click()
    except Exception as e:
        print(f"No advanced option found or proceed (unsafe) link: {e}")

    WebDriverWait(driver, 10).until(EC.element_to_be_clickable((By.ID, "username"))).send_keys(site_username)
    WebDriverWait(driver, 10).until(EC.element_to_be_clickable((By.ID, "password"))).send_keys(site_password)
    WebDriverWait(driver, 10).until(EC.element_to_be_clickable((By.ID, "submit"))).click()

# Function to set zoom level using Chrome DevTools Protocol (CDP)
def set_zoom(driver, zoom_level):
    driver.execute_cdp_cmd('Page.setDeviceMetricsOverride', {
        'width': 1920,
        'height': 1080,
        'deviceScaleFactor': 1,
        'mobile': False,
        'scale': zoom_level
    })
    time.sleep(2)  # Give the browser some time to apply the zoom

# Function to take screenshots with zoom adjustments
def take_screenshots(driver, ip):
    # Create a unique directory for the current IP's screenshots
    screenshot_dir = f"Temp/{ip.replace('.', '_')}"
    os.makedirs(screenshot_dir, exist_ok=True)
    
    # Zoom out to 50% and take a screenshot of the opened page
    set_zoom(driver, 0.5)
    opened_page_screenshot = f"{screenshot_dir}/opened_page_screenshot.png"
    driver.save_screenshot(opened_page_screenshot)
    
    # Reset zoom to 100%
    set_zoom(driver, 1)

    # Click on the 'Performance' tab
    try:
        performance_tab = WebDriverWait(driver, 10).until(
            EC.element_to_be_clickable((By.XPATH, "//span[contains(@class, 'x-tree-node-text') and text()='Performance']"))
        )
        performance_tab.click()
        time.sleep(10)  # Wait for the content to load
        
        # Zoom out to 50% and take a screenshot of the Performance tab
        performance_screenshot = f"{screenshot_dir}/Performance_screenshot.png"
        set_zoom(driver, 0.5)
        driver.save_screenshot(performance_screenshot)
        
        # Reset zoom to 100%
        set_zoom(driver, 1)
    except Exception as e:
        print(f"Failed to click on 'Performance' tab: {e}")

    # Click on the 'System View' tab
    try:
        system_view_tab = WebDriverWait(driver, 10).until(
            EC.element_to_be_clickable((By.XPATH, "//span[contains(@class, 'x-tree-node-text') and text()='System View']"))
        )
        system_view_tab.click()
        time.sleep(10)  # Wait for the content to load
        
        # Zoom out to 50% and take a screenshot of the System View tab
        system_screenshot = f"{screenshot_dir}/System_screenshot.png"
        set_zoom(driver, 0.5)
        driver.save_screenshot(system_screenshot)
        
        # Reset zoom to 100%
        set_zoom(driver, 1)
    except Exception as e:
        print(f"Failed to click on 'System View' tab: {e}")

    return [opened_page_screenshot, performance_screenshot, system_screenshot]

# Function to convert bytes to terabytes
def convert_to_tb(size_in_bytes):
    return round(size_in_bytes / (1024 ** 4), 2)  # Converts bytes to terabytes and rounds to 2 decimal places

# Function to fetch API data and extract capacity details in TB
def fetch_api_data(ip, username, password):
    base_url = f"https://{ip}/api/types/pool/instances"
    query_params = {
        "compact": "True",
        "fields": "sizeFree,sizeTotal,sizeUsed,sizePreallocated"
    }

    headers = {
        "X-EMC-REST-CLIENT": "true",
        "Accept": "application/json",
        "Content-Type": "application/json",
    }

    session = requests.Session()
    session.auth = (username, password)
    session.headers.update(headers)

    requests.packages.urllib3.disable_warnings(requests.packages.urllib3.exceptions.InsecureRequestWarning)

    response = session.get(base_url, params=query_params, verify=False)
    if response.status_code == 200:
        data = response.json()
        entries = data.get('entries', [])
        if entries:
            capacity_details = []
            for entry in entries:
                content = entry.get('content', {})
                free_space = convert_to_tb(content.get('sizeFree', 0))
                total_space = convert_to_tb(content.get('sizeTotal', 0))
                used_space = convert_to_tb(content.get('sizeUsed', 0))
                preallocated_space = convert_to_tb(content.get('sizePreallocated', 0))
                capacity_details.append(
                    f"Free Space: {free_space} TB, Total Space: {total_space} TB, Used Space: {used_space} TB, Preallocated Space: {preallocated_space} TB"
                )
            return capacity_details
        else:
            return ["No entries found in the response."]
    else:
        return [f"Failed to fetch data: {response.status_code} - {response.text}"]

# Function to send email with screenshots and API data
def send_email(owner_email, screenshot_filenames, api_data, ip):
    smtp_server = "smtp-mail.outlook.com"
    smtp_port = 25
    sender_email = config.SENDER_EMAIL
    password = config.SENDER_PASSWORD
    msg = MIMEMultipart()
    msg['From'] = sender_email
    msg['To'] = owner_email
    msg['Subject'] = f"Automated Screenshot and API Data for IP: {ip}"
    
    api_data_html = '<br>'.join([f'<p>{data}</p>' for data in api_data])
    body = f"""
    <html>
    <body>
        <p>Hi team,</p>
        <p>Please find the screenshots and API data attached below for IP: {ip}:</p>
        {api_data_html}
        {''.join([f'<p><img src="cid:{os.path.basename(filename)}"></p>' for filename in screenshot_filenames])}
        <p>Thanks & Regards,<br> Yash Srivastava</p>
    </body>
    </html>
    """
    
    msg.attach(MIMEText(body, "html"))

    for filename in screenshot_filenames:
        with open(filename, "rb") as f:
            img = MIMEImage(f.read())
            img.add_header("Content-Disposition", "inline", filename=os.path.basename(filename))
            img.add_header("Content-ID", f"<{os.path.basename(filename)}>")
            msg.attach(img)

    with smtplib.SMTP(smtp_server, smtp_port) as server:
        server.starttls()
        server.login(sender_email, password)
        server.send_message(msg)

# Main execution
if __name__ == "__main__":
    sites = [
        {"ip": "10.1.3.96", "site_user": config.SITE_USER, "site_password": config.SITE_PASSWORD},
        {"ip": "10.1.3.97", "site_user": config.SITE_USER, "site_password": config.SITE_PASSWORD},
        # Add more sites as needed
    ]

    for site in sites:
        # Ensure Temp directory exists
        if not os.path.exists("Temp"):
            os.makedirs("Temp")

        driver = webdriver.Chrome(service=Service("C:\\Users\\y.s.va22\\Downloads\\chromedriver-win64 (2)\\chromedriver.exe"))
        driver.maximize_window()

        try:
            ip = site["ip"]
            api_data = fetch_api_data(ip, config.SITE_USER, config.SITE_PASSWORD)
            driver.get(f"https://{ip}/")
            access_site(driver, site["site_user"], site["site_password"])
            screenshot_filenames = take_screenshots(driver, ip)
            send_email(config.OWNER_EMAIL, screenshot_filenames, api_data, ip)
        except Exception as e:
            print(f"An error occurred for IP {site['ip']}: {e}")
        finally:
            driver.quit()
        
        # Clean up the Temp directory after each site
        shutil.rmtree("Temp")
