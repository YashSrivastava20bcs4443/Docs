# Enhanced Function for Cascading Alerts
def correlate_cascading_alerts_v2(data, time_threshold=10):
    """
    Function to correlate cascading alerts (e.g., Server → Network → Application).

    Parameters:
        data (pd.DataFrame): Filtered event data.
        time_threshold (int): Time difference threshold in minutes to group related alerts.

    Returns:
        pd.DataFrame: DataFrame with grouped cascading alert information.
    """
    # Sort data by timestamp
    data = data.sort_values('@timestamp')

    # Add a new column for time differences
    data['TimeDiff'] = data['@timestamp'].diff().dt.total_seconds().abs() / 60

    # Group data based on time threshold
    data['CascadeGroup'] = (data['TimeDiff'] > time_threshold).cumsum()

    # Define priority for cascading relationships
    cascading_priority = {'Server': 1, 'Network': 2, 'Application': 3}
    data['Priority'] = data['EventSource'].map(cascading_priority)

    # Analyze cascading patterns
    cascading_patterns = []
    grouped = data.groupby('CascadeGroup')
    for group_id, group in grouped:
        group = group.sort_values('Priority')  # Sort by priority: Server → Network → Application
        pattern = " → ".join(group['EventSource'].unique())  # Build the cascading pattern
        cascading_patterns.append({
            'CascadeGroup': group_id,
            'Pattern': pattern,
            'StartTime': group['@timestamp'].min(),
            'EndTime': group['@timestamp'].max(),
            'Sources': group['EventSource'].tolist(),
            'Levels': group['EventLevel'].tolist(),
            'Titles': group['EventTitle'].tolist(),
        })

    # Convert cascading patterns to DataFrame
    cascade_summary = pd.DataFrame(cascading_patterns)

    return cascade_summary

# Use the function in the Streamlit dashboard
st.subheader("Enhanced Cascading Alert Correlation")
if not filtered_data.empty:
    cascade_time_threshold = st.slider("Cascading Time Threshold (minutes):", 1, 30, 10)
    cascading_patterns = correlate_cascading_alerts_v2(filtered_data, time_threshold=cascade_time_threshold)

    st.write("Cascading Alert Patterns Summary:")
    st.dataframe(cascading_patterns[['CascadeGroup', 'Pattern', 'StartTime', 'EndTime']])

    # Download cascading patterns
    st.download_button(
        label="Download Enhanced Cascading Alert Report",
        data=cascading_patterns.to_csv(index=False).encode('utf-8'),
        file_name='enhanced_cascading_alert_report.csv',
        mime='text/csv'
    )
else:
    st.write("No data available for enhanced cascading alert correlation.")
