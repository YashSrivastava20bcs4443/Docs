app.get('/api/detail', async (req, res) => {
    try {
        const { category, startDate, endDate, portal, tfn, tfnSearch } = req.query;
        let query = `
            SELECT "toAddress" AS "TFN", "Description", 
            COUNT(*) FILTER (WHERE "masterContactId" = "contactId" AND "isOutbound" = 'False' AND "mediaTypeId" = '4') AS ivr_offered,
            COUNT(*) FILTER (WHERE "masterContactId" = "contactId" AND "isOutbound" = 'False' AND "mediaTypeId" = '4' AND "agentSeconds"::numeric = 0 AND "inQueueSeconds"::numeric = 0 AND "abandoned" = 'False' AND "preQueueSeconds"::numeric > 1  AND "endReason" = 'Contact Hung Up') AS ivr_abandoned,
            COUNT(*) FILTER (WHERE "masterContactId" = "contactId" AND "isOutbound" = 'False' AND "mediaTypeId" = '4' AND "agentSeconds"::numeric = 0 AND "inQueueSeconds"::numeric > 0 AND "abandoned" = 'True' AND "preQueueSeconds"::numeric > 0) AS queue_abandoned,
            COUNT(*) FILTER (WHERE "masterContactId" = "contactId" AND "isOutbound" = 'False' AND "mediaTypeId" = '4' AND "agentSeconds"::numeric = 0 AND "inQueueSeconds"::numeric = 0 AND "abandoned" = 'False' AND "preQueueSeconds"::numeric > 1 AND "endReason" = 'Contact Hang Up via Script') AS closed_by_ivr,
            COUNT(*) FILTER (WHERE "masterContactId" = "contactId" AND "isOutbound" = 'False' AND "mediaTypeId" = '4' AND "abandoned" = 'False' AND "agentSeconds"::numeric > 0) AS answered_calls,
            "Portal", "TFN Type"
            FROM contact_mapped_data
        `;

        const queryParams = [];
        let paramIndex = 1;

        if (startDate && endDate) {
            query += ' WHERE to_date("contactStartDate", \'YYYY-MM-DD\') BETWEEN $' + paramIndex++ + ' AND $' + paramIndex++;
            queryParams.push(startDate, endDate);
        }

        if (portal) {
            query += queryParams.length ? ' AND' : ' WHERE';
            query += ' "Portal" = $' + paramIndex++;
            queryParams.push(portal);
        }

        if (tfn) {
            query += queryParams.length ? ' AND' : ' WHERE';
            query += ' "TFN Type" = $' + paramIndex++;
            queryParams.push(tfn);
        }

        // Apply TFN Search only for specified categories
        const validCategories = [
            'ivr_offered',
            'ivr_abandoned',
            'queue_abandoned',
            'closed_by_ivr',
            'abandoned_under_10',
            'abandoned_over_10',
            'answered_calls'
        ];
        if (tfnSearch && validCategories.includes(category)) {
            query += queryParams.length ? ' AND' : ' WHERE';
            query += ' "toAddress" ILIKE $' + paramIndex++;
            queryParams.push(`%${tfnSearch}%`);
        }

        switch(category) {
            case 'ivr_offered':
                query += ' AND "masterContactId" = "contactId" AND "isOutbound" = \'False\' AND "mediaTypeId" = \'4\'';
                break;
            case 'ivr_abandoned':
                query += ' AND "masterContactId" = "contactId" AND "isOutbound" = \'False\' AND "mediaTypeId" = \'4\' AND "agentSeconds"::numeric = 0 AND "inQueueSeconds"::numeric = 0 AND "abandoned" = \'False\' AND "preQueueSeconds"::numeric > 1 AND "endReason" = \'Contact Hung Up\'';
                break;
            case 'queue_abandoned':
                query += ' AND "masterContactId" = "contactId" AND "isOutbound" = \'False\' AND "mediaTypeId" = \'4\' AND "agentSeconds"::numeric = 0 AND "inQueueSeconds"::numeric > 0 AND "abandoned" = \'True\' AND "preQueueSeconds"::numeric > 0';
                break;
            case 'closed_by_ivr':
                query += ' AND "masterContactId" = "contactId" AND "isOutbound" = \'False\' AND "mediaTypeId" = \'4\' AND "agentSeconds"::numeric = 0 AND "inQueueSeconds"::numeric = 0 AND "abandoned" = \'False\' AND "preQueueSeconds"::numeric > 1 AND "endReason" = \'Contact Hang Up via Script\'';
                break;
            case 'abandoned_under_10':
                query += ' AND "masterContactId" = "contactId" AND "isOutbound" = \'False\' AND "mediaTypeId" = \'4\' AND "abandoned" = \'True\' AND "preQueueSeconds"::numeric < 10';
                break;
            case 'abandoned_over_10':
                query += ' AND "masterContactId" = "contactId" AND "isOutbound" = \'False\' AND "mediaTypeId" = \'4\' AND "abandoned" = \'True\' AND "preQueueSeconds"::numeric > 10';
                break;
            case 'answered_calls':
                query += ' AND "masterContactId" = "contactId" AND "isOutbound" = \'False\' AND "mediaTypeId" = \'4\' AND "abandoned" = \'False\' AND "agentSeconds"::numeric > 0';
                break;
            default:
                return res.status(400).json({ error: 'Invalid category' });
        }

        query += ' GROUP BY "toAddress", "Description", "Portal", "TFN Type"';
        const result = await pool.query(query, queryParams);
        res.json(result.rows);
    } catch (err) {
        console.error('Error fetching detail data:', err);
        res.status(500).json({ error: 'Internal Server Error' });
    }
});

app.get('/api/tfn-wise', async (req, res) => {
    try {
        const { startDate, endDate, tfnSearch } = req.query;
        let query = `
            SELECT 
                "toAddress" AS "Number (toAddress)",  
                COUNT(*) FILTER (WHERE 
                    "masterContactId" = "contactId" 
                    AND "isOutbound" = 'False' 
                    AND "mediaTypeId" = '4'
                ) AS offered_calls,
                COUNT(*) FILTER (WHERE 
                    "masterContactId" = "contactId" 
                    AND "isOutbound" = 'False' 
                    AND "mediaTypeId" = '4' 
                    AND NULLIF("agentSeconds", '') ~ '^[0-9]+(\\.[0-9]+)?$' 
                    AND NULLIF("agentSeconds", '')::FLOAT = 0
                    AND NULLIF("inQueueSeconds", '') ~ '^[0-9]+(\\.[0-9]+)?$'  
                    AND NULLIF("inQueueSeconds", '')::FLOAT = 0
                    AND NULLIF("preQueueSeconds", '') ~ '^[0-9]+(\\.[0-9]+)?$'  
                    AND NULLIF("preQueueSeconds", '')::FLOAT > 1
                    AND COALESCE(NULLIF("abandoned", ''), 'False') = 'False'
                    AND "endReason" = 'Contact Hung Up'
                ) AS ivr_abandon,
                COUNT(*) FILTER (WHERE 
                    "masterContactId" = "contactId" 
                    AND "isOutbound" = 'False' 
                    AND "mediaTypeId" = '4' 
                    AND NULLIF("agentSeconds", '') ~ '^[0-9]+(\\.[0-9]+)?$'  
                    AND NULLIF("agentSeconds", '')::FLOAT = 0
                    AND NULLIF("inQueueSeconds", '') ~ '^[0-9]+(\\.[0-9]+)?$'  
                    AND NULLIF("inQueueSeconds", '')::FLOAT > 0
                    AND NULLIF("preQueueSeconds", '') ~ '^[0-9]+(\\.[0-9]+)?$'  
                    AND NULLIF("preQueueSeconds", '')::FLOAT > 0
                    AND COALESCE(NULLIF("abandoned", ''), 'True') = 'True'
                ) AS queue_abandon,
                COUNT(*) FILTER (WHERE 
                    "masterContactId" = "contactId" 
                    AND "isOutbound" = 'False' 
                    AND "mediaTypeId" = '4' 
                    AND NULLIF("agentSeconds", '') ~ '^[0-9]+(\\.[0-9]+)?$'  
                    AND NULLIF("agentSeconds", '')::FLOAT = 0
                    AND NULLIF("inQueueSeconds", '') ~ '^[0-9]+(\\.[0-9]+)?$'  
                    AND NULLIF("inQueueSeconds", '')::FLOAT = 0
                    AND NULLIF("preQueueSeconds", '') ~ '^[0-9]+(\\.[0-9]+)?$'  
                    AND NULLIF("preQueueSeconds", '')::FLOAT > 1
                    AND COALESCE(NULLIF("abandoned", ''), 'False') = 'False'
                    AND "endReason" = 'Contact Hang Up via Script'
                ) AS polite_disconnect,
                COUNT(*) FILTER (WHERE 
                    "masterContactId" = "contactId" 
                    AND "isOutbound" = 'False' 
                    AND "mediaTypeId" = '4' 
                    AND COALESCE(NULLIF("abandoned", ''), 'False') = 'False' 
                    AND NULLIF("agentSeconds", '') ~ '^[0-9]+(\\.[0-9]+)?$'  
                    AND NULLIF("agentSeconds", '')::FLOAT > 0
                ) AS answered
            FROM contact_mapped_data
        `;

        const queryParams = [];
        let paramIndex = 1;

        if (startDate && endDate) {
            query += ' WHERE to_date("contactStartDate", \'YYYY-MM-DD\') BETWEEN $' + paramIndex++ + ' AND $' + paramIndex++;
            queryParams.push(startDate, endDate);
        }

        if (tfnSearch) {
            query += queryParams.length ? ' AND' : ' WHERE';
            query += ' "toAddress" ILIKE $' + paramIndex++;
            queryParams.push(`%${tfnSearch}%`);
        }

        query += ' GROUP BY "toAddress" ORDER BY offered_calls DESC';

        const result = await pool.query(query, queryParams);
        res.json(result.rows);
    } catch (err) {
        console.error('Error fetching TFN-Wise data:', err);
        res.status(500).json({ error: 'Internal Server Error' });
    }
});

