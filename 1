import requests
import psycopg2
import json
import pandas as pd
from datetime import datetime, timedelta, timezone
import os

# PostgreSQL connection details
DB_CONFIG = {
    "host": "172.16.130.247",
    "database": "postgres",
    "user": "postgres",
    "password": "Zxcv@1234"
}

API_URL = "https://api-c48.nice-incontact.com/incontactapi/services/v31.0/contacts/completed"
ACCESS_TOKEN_URL = "http://ctiintegrationapi.operations.fareportal.com.local/api/Agent/accessToken"

def get_access_token():
    try:
        response = requests.post(ACCESS_TOKEN_URL)
        response_data = response.json()
        if "access_token" in response_data:
            print("Access Token generated successfully.")
            return response_data['access_token']
        else:
            raise Exception("Failed to generate access token.")
    except Exception as e:
        print(f"Error generating access token: {e}")
        exit()

def fetch_data(start_date, end_date, auth_token):
    headers = {
        "Authorization": f"Bearer {auth_token}",
        "Content-Type": "application/json"
    }
    all_data = []
    skip = 0
    top = 10000
    while True:
        params = {"startdate": start_date, "enddate": end_date, "top": top, "skip": skip}
        response = requests.get(API_URL, headers=headers, params=params)
        data = response.json()
        if "completedContacts" in data and data["completedContacts"]:
            all_data.extend(data["completedContacts"])
            skip += top
            if len(data["completedContacts"]) < top:
                break
        else:
            break
    print(f"Total records fetched: {len(all_data)}")
    return all_data

def summarize_data(data):
    df = pd.DataFrame(data)
    if 'toAddress' not in df.columns or 'endReason' not in df.columns:
        print("Required columns are missing. Please check the data.")
        return pd.DataFrame()
    df['isOutbound'] = df['isOutbound'].astype(bool)
    summary = df.groupby('toAddress').agg(
        Offered_Calls=('contactId', 'count'),
        Answered=('agentSeconds', lambda x: sum(x > 0)),
        IVR_Abandon=('preQueueSeconds', lambda x: sum((x > 1) & (df['inQueueSeconds'] == 0) & (df['agentSeconds'] == 0))),
        Queue_Abandon=('inQueueSeconds', lambda x: sum((x > 0) & (df['agentSeconds'] == 0))),
        Polite_Disconnect=('endReason', lambda x: sum(x.isin(["Contact Hung Up", "Contact Hang Up via Script"])))
    ).reset_index()
    print(f"Summarized data prepared: {len(summary)} rows.")
    return summary

def create_summary_table_if_not_exists():
    conn = psycopg2.connect(**DB_CONFIG)
    cursor = conn.cursor()
    create_table_query = """
    CREATE TABLE IF NOT EXISTS contact_summary (
        to_address VARCHAR(100) PRIMARY KEY,
        offered_calls INT,
        answered INT,
        ivr_abandon INT,
        queue_abandon INT,
        polite_disconnect INT
    );
    """
    cursor.execute(create_table_query)
    conn.commit()
    cursor.close()
    conn.close()
    print("Table 'contact_summary' is ready.")

def store_summary_to_postgresql(summary):
    try:
        conn = psycopg2.connect(**DB_CONFIG)
        cursor = conn.cursor()
        create_summary_table_if_not_exists()
        for _, row in summary.iterrows():
            cursor.execute("""
                INSERT INTO contact_summary (to_address, offered_calls, answered, ivr_abandon, queue_abandon, polite_disconnect)
                VALUES (%s, %s, %s, %s, %s, %s)
                ON CONFLICT (to_address) DO UPDATE 
                SET offered_calls = EXCLUDED.offered_calls,
                    answered = EXCLUDED.answered,
                    ivr_abandon = EXCLUDED.ivr_abandon,
                    queue_abandon = EXCLUDED.queue_abandon,
                    polite_disconnect = EXCLUDED.polite_disconnect;
            """, (
                row['toAddress'], row['Offered_Calls'], row['Answered'], row['IVR_Abandon'], row['Queue_Abandon'], row['Polite_Disconnect']
            ))
        conn.commit()
        cursor.close()
        conn.close()
        print("Summary data stored successfully.")
    except Exception as e:
        print(f"Error storing summary data to PostgreSQL: {e}")

if __name__ == "__main__":
    auth_token = get_access_token()
    end_date = datetime.now(timezone.utc).strftime('%Y-%m-%dT%H:%M:%SZ')
    start_date = (datetime.now(timezone.utc) - timedelta(hours=2)).strftime('%Y-%m-%dT%H:%M:%SZ')
    data = fetch_data(start_date, end_date, auth_token)
    if data:
        summary_data = summarize_data(data)
        if not summary_data.empty:
            store_summary_to_postgresql(summary_data)
        else:
            print("No matching records found.")
    else:
        print("No data fetched for the given time range.")

