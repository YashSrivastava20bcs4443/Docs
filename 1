const express = require('express');
const { Pool } = require('pg');
const cors = require('cors');

const app = express();
app.use(cors());
app.use(express.json());

const pool = new Pool({
    host: '10.7.32.134',
    user: 'postgres',
    password: 'automation@123',
    database: 'postgres',
    port: 5432,
});

// API Endpoint
app.get('/api/stats', async (req, res) => {
    const { startDate, endDate, portal, tfn } = req.query;

    try {
        const query = `
            SELECT 
                "TFN",
                "Description",
                COUNT(*) FILTER (WHERE "isoutbound" = 'False' AND "mediaTypeId" = '4') AS "ivr_offered",
                COUNT(*) FILTER (WHERE "isoutbound" = 'False' AND "abandoned" = 'True') AS "ivr_abandoned",
                COUNT(*) FILTER (WHERE "isoutbound" = 'False' AND "agentSeconds"::numeric = 0) AS "queue_abandoned",
                COUNT(*) FILTER (WHERE "isoutbound" = 'False' AND "preQueueSeconds"::numeric > 0) AS "closed_by_ivr",
                COUNT(*) FILTER (WHERE "isoutbound" = 'False' AND "agentSeconds"::numeric > 0) AS "answered_calls"
            FROM contact_mapped_data
            WHERE to_date("contactStartDate", 'YYYY-MM-DD') BETWEEN $1 AND $2
            ${portal ? `AND "Portal" = $3` : ''}
            ${tfn ? `AND "TFN Type" = $4` : ''}
            GROUP BY "TFN", "Description"
        `;

        const params = [startDate, endDate];
        if (portal) params.push(portal);
        if (tfn) params.push(tfn);

        const result = await pool.query(query, params);
        res.json(result.rows);
    } catch (err) {
        console.error(err);
        res.status(500).json({ error: 'Internal Server Error' });
    }
});

app.listen(3000, () => console.log('Server running on port 3000'));
