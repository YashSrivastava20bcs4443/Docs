import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import streamlit as st

# Load the data
file_path = 'data.xlsx'  # Replace with your Excel file path
df = pd.read_excel(file_path)

# Clean the data
df['@timestamp'] = df['@timestamp'].str.replace('@', '').str.strip()
df['@timestamp'] = pd.to_datetime(df['@timestamp'], errors='coerce')
df = df.dropna(subset=['@timestamp'])  # Remove rows with invalid timestamps
df['Day'] = df['@timestamp'].dt.date
df['Hour'] = df['@timestamp'].dt.hour

# Streamlit App
st.title("Interactive Dashboard for Event Analysis")

# Filters
st.sidebar.header("Filters")
event_sources = df['EventSource'].unique()
selected_source = st.sidebar.selectbox("Select Event Source:", options=event_sources)

date_range = st.sidebar.date_input(
    "Select Date Range:",
    [df['Day'].min(), df['Day'].max()]
)

if len(date_range) == 2:
    start_date, end_date = date_range
    df = df[(df['Day'] >= start_date) & (df['Day'] <= end_date)]

# Filter data based on selected event source
filtered_data = df[df['EventSource'] == selected_source]

# Day-wise Analysis
st.subheader("Day-wise Alerts Analysis")
daywise_alerts = filtered_data.groupby(['Day', 'EventLevel']).size().unstack(fill_value=0)
daywise_alerts['Total'] = daywise_alerts.sum(axis=1)

fig, ax = plt.subplots(figsize=(10, 6))
daywise_alerts.drop('Total', axis=1).plot(kind='bar', stacked=True, ax=ax, colormap='tab10')
ax.set_title(f"Day-wise Alerts for Event Source: {selected_source}")
ax.set_xlabel("Day")
ax.set_ylabel("Number of Alerts")
st.pyplot(fig)

# Hourly Analysis
st.subheader("Hourly Alerts Analysis")
hourly_alerts = filtered_data.groupby(['Hour', 'EventTitle']).size().unstack(fill_value=0)

fig, ax = plt.subplots(figsize=(10, 6))
hourly_alerts.plot(kind='bar', stacked=True, ax=ax, colormap='coolwarm')
ax.set_title(f"Hourly Alerts for Event Source: {selected_source}")
ax.set_xlabel("Hour of Day")
ax.set_ylabel("Number of Alerts")
st.pyplot(fig)

# Weekly Trends Analysis
st.subheader("Weekly Trends Analysis")
df['Weekday'] = df['Day'].apply(lambda x: x.strftime('%A'))
weekly_alerts = filtered_data.groupby('Weekday').size()

fig, ax = plt.subplots(figsize=(10, 6))
weekly_alerts.plot(kind='bar', ax=ax, color='teal')
ax.set_title(f"Weekly Alerts Trend for Event Source: {selected_source}")
ax.set_xlabel("Day of the Week")
ax.set_ylabel("Number of Alerts")
st.pyplot(fig)

# Pie Chart for Event Levels
st.subheader("Distribution of Event Levels")
event_level_counts = filtered_data['EventLevel'].value_counts()

fig, ax = plt.subplots(figsize=(8, 8))
ax.pie(event_level_counts, labels=event_level_counts.index, autopct='%1.1f%%', startangle=140, colors=['#ff9999','#66b3ff','#99ff99'])
ax.set_title(f"Event Level Distribution for {selected_source}")
st.pyplot(fig)

# Heatmap of Alerts by Day and Hour
st.subheader("Heatmap of Alerts by Day and Hour")
day_hour_data = filtered_data.groupby(['Day', 'Hour']).size().unstack(fill_value=0)

fig, ax = plt.subplots(figsize=(12, 8))
sns.heatmap(day_hour_data, cmap='YlGnBu', linewidths=0.5, ax=ax)
ax.set_title(f"Heatmap of Alerts by Day and Hour for {selected_source}")
ax.set_xlabel("Hour")
ax.set_ylabel("Day")
st.pyplot(fig)

# Trendline Over Time
st.subheader("Alerts Trend Over Time")
time_trend = filtered_data.groupby('Day').size()

fig, ax = plt.subplots(figsize=(10, 6))
time_trend.plot(kind='line', ax=ax, marker='o', color='purple')
ax.set_title(f"Trend of Alerts Over Time for Event Source: {selected_source}")
ax.set_xlabel("Day")
ax.set_ylabel("Number of Alerts")
st.pyplot(fig)

# Top Event Titles
st.subheader("Top Event Titles")
top_events = filtered_data['EventTitle'].value_counts().head(10)

fig, ax = plt.subplots(figsize=(10, 6))
top_events.plot(kind='bar', ax=ax, color='orange')
ax.set_title(f"Top 10 Event Titles for {selected_source}")
ax.set_xlabel("Event Title")
ax.set_ylabel("Number of Occurrences")
st.pyplot(fig)

# Correlation Matrix
st.subheader("Correlation Matrix")
numeric_data = filtered_data[['Hour']]  # Add more columns if available
numeric_data['Alert_Count'] = 1
correlation = numeric_data.corr()

fig, ax = plt.subplots(figsize=(8, 6))
sns.heatmap(correlation, annot=True, cmap='coolwarm', ax=ax)
ax.set_title("Correlation Matrix")
st.pyplot(fig)

# Data Table
st.subheader("Filtered Data")
st.write(filtered_data)

# Download Filtered Data as CSV
st.subheader("Download Filtered Data")
csv = filtered_data.to_csv(index=False).encode('utf-8')
st.download_button(
    label="Download data as CSV",
    data=csv,
    file_name='filtered_data.csv',
    mime='text/csv',
)

