import requests
import pandas as pd
import paramiko
import os

# Prometheus server details
prometheus_url = "https://prometheus.abl.com/api/v1/query?step=1440m"

# Function to query Prometheus
def query_prometheus(query):
    response = requests.get(prometheus_url, params={'query': query})
    if response.status_code == 200:
        return response.json()['data']['result']
    else:
        raise Exception(f"Query Failed with the status code: {response.status_code}: {response.text}")

# Queries to run
queries = {
    "Memory": '100-(windows_os_physical_memory_free_bytes{job=~"Windows_Servers"} / (windows_cs_physical_memory_bytes{job=~"Windows_Servers"} - 0) * 100)',
    "Cpu": '100 - (avg by (instance) (irate(windows_cpu_time_total{job=~"Windows_Servers", mode="idle"}[1m])) * 100)',
    "c_drive": '(windows_logical_disk_size_bytes{job=~"Windows_Servers", volume="C:"} - windows_logical_disk_free_bytes{job=~"Windows_Servers", volume="C:"}) / windows_logical_disk_size_bytes{job=~"Windows_Servers", volume="C:"} * 100'
}

# Fetch data and store results in a dictionary
data = {}
for name, query in queries.items():
    try:
        result = query_prometheus(query)
        for item in result:
            instance = item['metric']['instance']
            value = float(item['value'][1])
            if instance not in data:
                data[instance] = {}
            data[instance][name] = value
    except Exception as e:
        print(f"Failed to run query {name}: {e}")

# Prepare data for the DataFrame
hostname = []
cpu = []
memory = []
c_drive = []

for instance, metrics in data.items():
    hostname.append(instance)
    cpu.append(metrics.get("Cpu", None))
    memory.append(metrics.get("Memory", None))
    c_drive.append(metrics.get("c_drive", None))

# Create DataFrame
df = pd.DataFrame({
    "Hostname": hostname,
    "CPU Util. %": cpu,
    "Memory Util. %": memory,
    "C Drive Util. %": c_drive
})

# Filepath for saving the CSV file
local_file_path = 'C:\\Temp\\Last_24_hr_Windows_Performance_metrics.csv'

# Save the data to CSV locally
df.to_csv(local_file_path, index=False)
print("Data exported to CSV.")

# SFTP upload function
def upload_to_sftp(local_file_path, sftp_host, sftp_port, sftp_username, sftp_password, sftp_target_directory):
    try:
        # Establish an SFTP connection
        transport = paramiko.Transport((sftp_host, sftp_port))
        transport.connect(username=sftp_username, password=sftp_password)
        sftp = paramiko.SFTPClient.from_transport(transport)
        
        # Create the target directory path on the SFTP server if it doesn't exist
        try:
            sftp.chdir(sftp_target_directory)  # Change to the target directory
        except IOError:
            sftp.mkdir(sftp_target_directory)  # Create the directory if it doesn't exist
            sftp.chdir(sftp_target_directory)

        # Get the filename from the local file path
        file_name = os.path.basename(local_file_path)
        
        # Upload the local file to the SFTP target directory
        sftp.put(local_file_path, os.path.join(sftp_target_directory, file_name))
        print(f"File {file_name} uploaded successfully to {sftp_target_directory}")
        
        # Close the SFTP connection
        sftp.close()
        transport.close()
        
        # Delete the local file after successful upload
        if os.path.exists(local_file_path):
            os.remove(local_file_path)
            print(f"Local file {local_file_path} deleted successfully.")
        else:
            print(f"File {local_file_path} not found locally.")
    
    except Exception as e:
        print(f"Failed to upload file: {e}")

# SFTP server details (replace these with actual credentials)
sftp_host = '<your_sftp_host>'
sftp_port = 22  # SFTP default port
sftp_username = '<your_username>'
sftp_password = '<your_password>'
sftp_target_directory = 'Network_automation/Temp'

# Call the function to upload the file to SFTP and delete the local file
upload_to_sftp(local_file_path, sftp_host, sftp_port, sftp_username, sftp_password, sftp_target_directory)
