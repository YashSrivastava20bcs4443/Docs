raw_index = 'raw-splunk-events-*'  # Change index
common_index_name = f'common-events-{datetime.now().strftime("%Y-%m-%d")}'

def get_data_from_raw_index():
    payload = {
        "size": 100,
        "query": {
            "range": {
                "@timestamp": {
                    "gte": "now-1m",
                    "lte": "now"
                }
            }
        },
        "sort": [{"@timestamp": {"order": "desc"}}]
    }

    try:
        result = es.search(index=raw_index, body=payload)
        if result['hits']['total']['value'] > 0:
            for hit in result['hits']['hits']:
                record = hit['_source']
                push_data_to_common_events(record)
    except Exception as e:
        print(f"Error fetching documents from raw index: {e}")


def push_data_to_common_events(data):
    try:
        # Raw fields from Splunk alert
        severity = data.get("severity", "INFO")
        status = data.get("status", "Active")
        event_title = data.get("messageTitle", "Splunk Alert")
        event_blob = data  # full raw JSON
        event_timestamp = data.get("timestamp", data.get("@timestamp", utc_now))
        detector = data.get("detector", "Splunk")
        location = data.get("dimensions", {}).get("location", "Unknown")
        instance = data.get("dimensions", {}).get("test", "")
        metric_value = data.get("inputs", {}).get("stream", {}).get("value", "N/A")
        originating_metric = data.get("originatingMetric", "Unknown")
        eventmatchid = data.get("incidentId", hashlib.sha256((detector + location + originating_metric).encode()).hexdigest())

        mapped_data = {
            "EventLevel": severity,
            "EventStatus": status,
            "EventTitle": event_title,
            "EventBlob": event_blob,
            "EventTimestamp": event_timestamp,
            "@timestamp": utc_now,
            "EventSource": detector,
            "EventNode": location,
            "EventInstance": instance,
            "EventValue": metric_value,
            "EventResource": originating_metric,
            "EventMatchID": eventmatchid
        }

        es.index(index=common_index_name, body=mapped_data)
        print("Document indexed successfully in live dashboard.")
    except Exception as e:
        print(f"Error indexing Splunk alert: {e}")
