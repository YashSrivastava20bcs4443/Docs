import requests
import psycopg2
from psycopg2.extras import execute_values
from datetime import datetime, timedelta, timezone
import json

# API and DB Configurations
API_URL = "https://api-c48.nice-incontact.com/incontactapi/services/v31.0/contacts/completed"
ACCESS_TOKEN_URL = "http://ctiintegrationapi.operations.fareportal.com.local/api/Agent/accessToken"
DB_CONFIG = {
    "host": "172.16.130.247",
    "database": "postgres",
    "user": "postgres",
    "password": "Zxcv@1234"
}

def get_access_token():
    try:
        response = requests.post(ACCESS_TOKEN_URL)
        response_data = response.json()
        if "access_token" in response_data:
            print("Access Token generated successfully.")
            return response_data['access_token']
        else:
            raise Exception("Failed to generate access token.")
    except Exception as e:
        print(f"Error generating access token: {e}")
        exit()

def fetch_data(start_date, end_date, auth_token):
    headers = {
        "Authorization": f"Bearer {auth_token}",
        "Content-Type": "application/json"
    }
    all_data = []
    skip = 0
    top = 10000

    while True:
        params = {
            "startdate": start_date,
            "enddate": end_date,
            "top": top,
            "skip": skip
        }
        response = requests.get(API_URL, headers=headers, params=params)
        if response.status_code != 200:
            raise Exception(f"API request failed with status code {response.status_code}: {response.text}")

        data = response.json()
        if "completedContacts" in data and data["completedContacts"]:
            all_data.extend(data["completedContacts"])
            skip += top
            if len(data["completedContacts"]) < top:
                break
        else:
            break

    print(f"Total records fetched: {len(all_data)}")
    return all_data

def save_to_postgres(data):
    try:
        conn = psycopg2.connect(**DB_CONFIG)
        cursor = conn.cursor()

        # Create table if not exists
        create_table_query = """
        CREATE TABLE IF NOT EXISTS completed_contacts (
            contact_id BIGINT PRIMARY KEY,
            abandoned BOOLEAN,
            abandon_seconds INT,
            acw_seconds INT,
            agent_id BIGINT,
            agent_seconds INT,
            callback_time BIGINT,
            campaign_id BIGINT,
            campaign_name TEXT,
            conf_seconds INT,
            contact_start TIMESTAMP,
            date_contact_warehoused TIMESTAMP,
            disposition_notes TEXT,
            end_reason TEXT,
            first_name TEXT,
            last_name TEXT,
            from_addr TEXT,
            hold_count INT,
            hold_seconds INT,
            media_type_id INT,
            media_type_name TEXT,
            to_addr TEXT,
            raw_data JSONB
        );
        """
        cursor.execute(create_table_query)

        # Insert data into the table
        insert_query = """
        INSERT INTO completed_contacts (
            contact_id, abandoned, abandon_seconds, acw_seconds, agent_id, agent_seconds,
            callback_time, campaign_id, campaign_name, conf_seconds, contact_start,
            date_contact_warehoused, disposition_notes, end_reason, first_name, last_name,
            from_addr, hold_count, hold_seconds, media_type_id, media_type_name, to_addr, raw_data
        ) VALUES %s
        ON CONFLICT (contact_id) DO NOTHING;
        """

        # Prepare data for insertion
        records = [
            (
                record.get("contactId"),
                record.get("abandoned"),
                record.get("abandonSeconds"),
                int(record.get("ACWSeconds", 0)) if record.get("ACWSeconds") else None,
                record.get("agentId"),
                record.get("agentSeconds"),
                int(record.get("callbackTime", 0)) if record.get("callbackTime") else None,
                record.get("campaignId"),
                record.get("campaignName"),
                record.get("confSeconds"),
                record.get("contactStart"),
                record.get("dateContactWarehoused"),
                record.get("dispositionNotes"),
                record.get("endReason"),
                record.get("firstName"),
                record.get("lastName"),
                record.get("fromAddr"),
                record.get("holdCount"),
                record.get("holdSeconds"),
                record.get("mediaTypeId"),  # Correcting mediaType to mediaTypeId
                record.get("mediaTypeName"),
                record.get("toAddr"),
                json.dumps(record)  # Storing raw data as JSON
            )
            for record in data
        ]

        execute_values(cursor, insert_query, records)
        conn.commit()
        print("Data saved to PostgreSQL successfully.")

    except Exception as e:
        print(f"Error saving data to PostgreSQL: {e}")

    finally:
        if cursor:
            cursor.close()
        if conn:
            conn.close()

if __name__ == "__main__":
    auth_token = get_access_token()

    # Set the time range for the last 2 hours
    end_date = datetime.now(timezone.utc).strftime('%Y-%m-%dT%H:%M:%SZ')
    start_date = (datetime.now(timezone.utc) - timedelta(hours=2)).strftime('%Y-%m-%dT%H:%M:%SZ')

    data = fetch_data(start_date, end_date, auth_token)
    if data:
        save_to_postgres(data)
    else:
        print("No data fetched for the given time range.")
