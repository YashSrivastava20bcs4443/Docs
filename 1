# Function to check security patches using win32_quickfixengineering
def check_security_patches(asset_name):
    # Command to fetch all installed patches
    security_patches_command = f'powershell Get-WmiObject -ComputerName {asset_name} -Class win32_quickfixengineering'
    output, _ = run_powershell_command(security_patches_command)

    if not output:
        return "No Security Patches Found"

    patch_lines = output.splitlines()
    security_updates = []

    # Regex to extract InstalledOn date and HotFixID (handles different date formats)
    date_regex = r'(\d{1,2}[/-]\d{1,2}[/-]\d{4})'  # Matches both DD/MM/YYYY and MM/DD/YYYY with either '-' or '/'
    hotfix_regex = r'(KB\d{7})'  # Regex for HotFixID like 'KB5012170'

    # Iterate through each line and find patches with "Security Update"
    for line in patch_lines:
        if "Security Update" in line:
            # Extract 'InstalledOn' date
            date_match = re.search(date_regex, line)
            # Extract 'HotFixID'
            hotfix_match = re.search(hotfix_regex, line)

            if date_match and hotfix_match:
                installed_on_str = date_match.group(1)
                hotfix_id = hotfix_match.group(1)

                try:
                    # Try multiple date formats
                    for fmt in ('%d-%m-%Y', '%d/%m/%Y', '%m-%d-%Y', '%m/%d/%Y'):
                        try:
                            installed_on_date = datetime.datetime.strptime(installed_on_str, fmt).date()
                            break
                        except ValueError:
                            continue
                    else:
                        # Skip if no valid date format is found
                        continue
                    
                    # Add to security updates list
                    security_updates.append((installed_on_date, hotfix_id))
                except ValueError:
                    continue  # Skip lines with invalid date formats

    if security_updates:
        # Sort by date in descending order to get the most recent security update
        latest_security_update = max(security_updates, key=lambda x: x[0])
        latest_date, latest_hotfix_id = latest_security_update
        return f"Latest Security Patch Installed On: {latest_date.strftime('%d-%m-%Y')} (HotFixID: {latest_hotfix_id})"
    else:
        return "No Security Updates Found"
