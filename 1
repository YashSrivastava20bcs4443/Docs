const express = require('express');
const fs = require('fs');
const csvjson = require('csvjson');
const { Pool } = require('pg');
const cors = require('cors');

const app = express();
const port = 3000;

app.use(cors());
app.use(express.json());

// Database connection pool
const pool = new Pool({
    host: '10.7.32.134',
    user: 'postgres',
    password: 'automation@123',
    database: 'postgres',
    port: 5432
});

// API to get summary stats
app.get('/api/stats', async (req, res) => {
    try {
        const { startDate, endDate, portal, tfn } = req.query;

        const query = `
            SELECT
                COUNT(*) FILTER (WHERE "masterContactId" = "contactId" AND "isoutbound" = 'False' AND "mediaTypeId" = '4') AS ivr_offered,
                COUNT(*) FILTER (WHERE "masterContactId" = "contactId" AND "isoutbound" = 'False' AND "mediaTypeId" = '4' AND "agentSeconds"::numeric = 0 AND "inQueueSeconds"::numeric = 0 AND "abandoned" = 'False' AND "preQueueSeconds"::numeric > 0 AND "endReason" = 'Contact Hung Up') AS ivr_abandoned,
                COUNT(*) FILTER (WHERE "masterContactId" = "contactId" AND "isOutbound" = 'True' AND "mediaTypeId" = '4' AND "agentSeconds"::numeric = 0 AND "inQueueSeconds"::numeric > 0 AND "abandoned" = 'False' AND "preQueueSeconds"::numeric > 0) AS queue_abandoned,
                COUNT(*) FILTER (WHERE "masterContactId" = "contactId" AND "isoutbound" = 'False' AND "mediaTypeId" = '4' AND "agentSeconds"::numeric = 0 AND "inQueueSeconds"::numeric = 0 AND "abandoned" = 'False' AND "preQueueSeconds"::numeric > 0) AS closed_by_ivr,
                COUNT(*) FILTER (WHERE "masterContactId" = "contactId" AND "isoutbound" = 'False' AND "mediaTypeId" = '4' AND "abandoned" = 'True' AND "preQueueSeconds"::numeric < 10) AS abandoned_in_10_sec,
                COUNT(*) FILTER (WHERE "masterContactId" = "contactId" AND "isoutbound" = 'False' AND "mediaTypeId" = '4' AND "abandoned" = 'True' AND "preQueueSeconds"::numeric > 10) AS abandoned_in_over_10_sec,
                COUNT(*) FILTER (WHERE "masterContactId" = "contactId" AND "isoutbound" = 'False' AND "mediaTypeId" = '4' AND "abandoned" = 'False' AND "agentSeconds"::numeric > 0) AS answered_calls
            FROM contact_mapped_data
            WHERE to_date("contactStartDate", 'YYYY-MM-DD') BETWEEN $1 AND $2
            AND ($3::text IS NULL OR "Portal" = $3)
            AND ($4::text IS NULL OR "TFN Type" = $4);
        `;

        const result = await pool.query(query, [startDate, endDate, portal, tfn]);
        res.json(result.rows[0]);
    } catch (err) {
        console.error('Error fetching stats:', err);
        res.status(500).json({ error: 'Internal Server Error' });
    }
});

// API to get details for the selected metric
app.get('/api/details', async (req, res) => {
    const { metric, startDate, endDate } = req.query;

    // Mapping metric to relevant database columns
    let column = '';
    switch (metric) {
        case 'IVR Offered':
            column = '"agentSeconds"';
            break;
        case 'IVR Abandoned':
            column = '"abandoned"';
            break;
        case 'Queue Abandoned':
            column = '"inQueueSeconds"';
            break;
        case 'Closed by IVR':
            column = '"preQueueSeconds"';
            break;
        case 'Answered Calls':
            column = '"agentSeconds"';
            break;
        default:
            return res.status(400).json({ error: 'Invalid metric' });
    }

    try {
        const query = `
            SELECT 
                "toAddress" AS tfn,
                "Description",
                COUNT(*) AS count
            FROM contact_mapped_data
            WHERE ${column} IS NOT NULL
            AND to_date("contactStartDate", 'YYYY-MM-DD') BETWEEN $1 AND $2
            GROUP BY "toAddress", "Description";
        `;

        const result = await pool.query(query, [startDate, endDate]);
        res.json(result.rows);
    } catch (err) {
        console.error('Error fetching details:', err);
        res.status(500).json({ error: 'Internal Server Error' });
    }
});

app.listen(port, () => {
    console.log(`Server running on port ${port}`);
});
