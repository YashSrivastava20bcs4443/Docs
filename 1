import requests
import psycopg2
import json
import pandas as pd
from datetime import datetime, timedelta, timezone
import os

# PostgreSQL connection details
DB_CONFIG = {
    "host": "172.16.130.247",
    "database": "postgres",
    "user": "postgres",
    "password": "Zxcv@1234"
}

# API and Access Token Details
API_URL = "https://api-c48.nice-incontact.com/incontactapi/services/v31.0/contacts/completed"
ACCESS_TOKEN_URL = "http://ctiintegrationapi.operations.fareportal.com.local/api/Agent/accessToken"

# Generate Access Token
def get_access_token():
    response = requests.post(ACCESS_TOKEN_URL)
    response_data = response.json()
    if "access_token" in response_data:
        return response_data['access_token']
    raise Exception("Failed to generate access token")

# Fetch data from API
def fetch_data(start_date, end_date, auth_token):
    headers = {"Authorization": f"Bearer {auth_token}", "Content-Type": "application/json"}
    all_data = []
    skip = 0
    top = 10000
    while True:
        params = {"startdate": start_date, "enddate": end_date, "top": top, "skip": skip}
        response = requests.get(API_URL, headers=headers, params=params)
        data = response.json()
        if "completedContacts" in data and data["completedContacts"]:
            all_data.extend(data["completedContacts"])
            skip += top
            if len(data["completedContacts"]) < top:
                break
        else:
            break
    return all_data

# Ensure 'raw' table exists
def create_raw_table():
    conn = psycopg2.connect(**DB_CONFIG)
    cursor = conn.cursor()
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS raw (
            contact_id VARCHAR(50),
            start_date TIMESTAMP,
            end_date TIMESTAMP,
            from_addr VARCHAR(100),
            to_addr VARCHAR(100),
            mediaTypeId VARCHAR(50),
            isOutbound BOOLEAN,
            agentSeconds INTEGER,
            preQueueSeconds INTEGER,
            inQueueSeconds INTEGER,
            abandoned BOOLEAN,
            endReason VARCHAR(100)
        );
    ''')
    conn.commit()
    cursor.close()
    conn.close()

# Store raw data into PostgreSQL
def store_raw_data(data):
    conn = psycopg2.connect(**DB_CONFIG)
    cursor = conn.cursor()
    create_raw_table()
    for contact in data:
        cursor.execute('''
            INSERT INTO raw (contact_id, start_date, end_date, from_addr, to_addr, mediaTypeId, isOutbound, agentSeconds, preQueueSeconds, inQueueSeconds, abandoned, endReason)
            VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)
        ''', (
            contact.get('contactId'), contact.get('contactStartDate'), contact.get('lastUpdateTime'),
            contact.get('fromAddress'), contact.get('toAddress'), contact.get('mediaTypeId'),
            contact.get('isOutbound'), contact.get('agentSeconds'), contact.get('preQueueSeconds'),
            contact.get('inQueueSeconds'), contact.get('abandoned'), contact.get('endReason')
        ))
    conn.commit()
    cursor.close()
    conn.close()

# Generate summary and store in PostgreSQL
def generate_summary():
    conn = psycopg2.connect(**DB_CONFIG)
    cursor = conn.cursor()
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS dashboard_summary AS
        SELECT
            to_addr,
            COUNT(*) AS offered_calls,
            SUM(CASE WHEN agentSeconds > 0 THEN 1 ELSE 0 END) AS answered,
            SUM(CASE WHEN preQueueSeconds > 0 AND inQueueSeconds = 0 THEN 1 ELSE 0 END) AS ivr_abandon,
            SUM(CASE WHEN inQueueSeconds > 0 THEN 1 ELSE 0 END) AS queue_abandon,
            SUM(CASE WHEN endReason IN ('Contact Hung Up', 'Contact Hang Up via Script') THEN 1 ELSE 0 END) AS polite_disconnect
        FROM raw
        WHERE mediaTypeId = '4' AND isOutbound = FALSE
        GROUP BY to_addr;
    ''')
    conn.commit()
    cursor.close()
    conn.close()

# Main Execution Flow
if __name__ == "__main__":
    auth_token = get_access_token()
    end_date = datetime.now(timezone.utc).strftime('%Y-%m-%dT%H:%M:%SZ')
    start_date = (datetime.now(timezone.utc) - timedelta(hours=2)).strftime('%Y-%m-%dT%H:%M:%SZ')

    # Fetch data and store in raw
    data = fetch_data(start_date, end_date, auth_token)
    if data:
        store_raw_data(data)
        generate_summary()
        print("Raw data stored and summary table generated successfully!")
    else:
        print("No data fetched for the given time range.")
        
