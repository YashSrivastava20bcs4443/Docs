from sqlalchemy import create_engine
import pandas as pd

# Ensure your DB_CONFIG dictionary is correctly defined here or imported from config.py
DB_CONFIG = {
    "host": "172.16.130.247",
    "database": "postgres",
    "user": "postgres",
    "password": "Zxcv@1234"
}

def ivr_bucket_summary():
    try:
        # Create the SQLAlchemy engine using the existing DB_CONFIG
        engine = create_engine(f"postgresql+psycopg2://{DB_CONFIG['user']}:{DB_CONFIG['password']}@{DB_CONFIG['host']}:5432/{DB_CONFIG['database']}")

        # Ensure schema is properly referenced
        query = """
        SELECT contactStartDate, abandoned, agentSeconds, preQueueSeconds
        FROM public.raw;
        """
        
        # Fetch data using SQLAlchemy engine
        df = pd.read_sql_query(query, engine)

        # Ensure 'preQueueSeconds' exists and is numeric
        df['preQueueSeconds'] = pd.to_numeric(df['preQueueSeconds'], errors='coerce').fillna(0)

        # Generate 30-minute time intervals
        df['time_interval'] = pd.to_datetime(df['contactStartDate']).dt.floor('30min')

        # Create IVR buckets based on 'preQueueSeconds'
        df['ivr_bucket'] = pd.cut(
            df['preQueueSeconds'], 
            bins=[0, 30, 60, 120, float('inf')],
            labels=['0-30s', '30-60s', '60-120s', '>120s'],
            right=False
        )

        # Calculate Offered Calls and IVR Abandonment
        summary = df.groupby(['time_interval', 'ivr_bucket']).agg(
            Offered_Calls=('contactStartDate', 'count'),
            IVR_Abandon=('abandoned', lambda x: (x & (df['agentSeconds'] == 0)).sum())
        ).reset_index()

        # Save the summary data back to PostgreSQL in the 'ivr_bucket_summary' table
        summary.to_sql('ivr_bucket_summary', engine, if_exists='append', index=False)

        print("IVR Bucket Summary stored successfully.")

    except Exception as e:
        print(f"Error generating IVR bucket summary: {e}")
