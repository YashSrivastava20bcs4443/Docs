# === Prepare Expiry Report ===
today = datetime.now()
expiring_certificates = []

for index, row in ad_df.iterrows():
    name = row[config.X_COLUMN]
    expiry_date = row[config.Y_COLUMN]

    if pd.isnull(expiry_date):
        continue

    days_left = (expiry_date - today).days

    if days_left <= 10:
        priority = "🚨URGENT"  # Red color for URGENT
    elif days_left <= 20:
        priority = "⚠️IMPORTANT"  # Yellow color for IMPORTANT
    elif days_left <= 30:
        priority = "INFO"  # Black color for INFO
    else:
        continue

    expiring_certificates.append(f"{priority} - {name} - Expiring on: {expiry_date.strftime('%Y-%m-%d')} ({days_left} days left)")

    # === Email Sending Function ===
def send_email(expiring_certificates):
    if not expiring_certificates:
        print("✅ No certificates expiring within the next 30 days.")
        return

    sender_email = config.SENDER_EMAIL
    recipients_to = config.RECIPIENTS_TO
    recipients_cc = config.RECIPIENTS_CC
    subject = "Certificate Expiry Alert: Important & Urgent Notices"

    body = "<html><body><p><strong>The following certificates are expiring soon:</strong></p><ul>"
    for cert in expiring_certificates:
        if "URGENT" in cert:
            body += f'<li><span style="color: red; font-weight: bold;">{cert}</span></li>'
        elif "IMPORTANT" in cert:
            body += f'<li><span style="color: yellow; font-weight: bold;">{cert}</span></li>'
        else:
            body += f'<li><span style="color: black;">{cert}</span></li>'
    body += "</ul><p>Please take necessary action based on the priority levels above.</p></body></html>"

    # Prepare Email with UTF-8 encoding
    msg = MIMEMultipart()
    msg['From'] = sender_email
    msg['To'] = ', '.join(recipients_to)
    msg['CC'] = ', '.join(recipients_cc)
    msg['Subject'] = subject
    msg.attach(MIMEText(body, 'html', 'utf-8'))  # FIX: Added UTF-8 encoding

    try:
        # FIX: Use utf-8 explicitly while sending the email
        with smtplib.SMTP(config.SMTP_SERVER, config.SMTP_PORT) as server:
            server.set_debuglevel(1)  # Optional, for debug info
            server.sendmail(sender_email, recipients_to + recipients_cc, msg.as_string())
            print("✅ Consolidated email sent successfully!")
    except Exception as e:
        print(f"Error sending email: {e}")
