import requests
import pandas as pd
from datetime import datetime, timedelta

# Prometheus base URL for querying
prometheus_url = "https://prometheus.apl.com/api/v1/query_range"

# Function to query Prometheus
def query_prometheus(query, start_time, end_time, step):
    response = requests.get(prometheus_url, params={
        'query': query,
        'start': start_time,
        'end': end_time,
        'step': step
    })
    if response.status_code == 200:
        return response.json()['data']['result']
    else:
        raise Exception(f"Query failed with status code: {response.status_code}: {response.text}")

# Get the last 24 hours
end_time = datetime.now()
start_time = end_time - timedelta(hours=24)
start_time_unix = int(start_time.timestamp())
end_time_unix = int(end_time.timestamp())

# New CPU query that directly calculates CPU busy time
cpu_query = '100 - (avg(windows_cpu_time_total{mode="idle"}[1m]) by (instance) * 100 / avg(windows_cpu_time_total) by (instance))'
memory_query = '100 - (avg(windows_memory_available_bytes) by (instance) * 100 / avg(windows_cs_physical_memory_bytes) by (instance))'

# Query data for CPU and Memory (with step of 60 seconds for minute-level data)
cpu_data = query_prometheus(cpu_query, start_time_unix, end_time_unix, 60)
memory_data = query_prometheus(memory_query, start_time_unix, end_time_unix, 60)

# Function to format CPU and memory data
def format_data(data, metric_type):
    formatted_data = []
    for entry in data:
        metric = entry['metric']
        values = entry['values']
        for value in values:
            timestamp, usage = value
            formatted_data.append({
                "timestamp": datetime.fromtimestamp(float(timestamp)),
                **metric,
                "value": usage,
                "metric_type": metric_type
            })
    return formatted_data

# Format CPU and memory data
cpu_formatted = format_data(cpu_data, "cpu")
memory_formatted = format_data(memory_data, "memory")

# Combine both CPU and memory data
combined_data = cpu_formatted + memory_formatted

# Create a DataFrame and calculate the max CPU and memory usage per instance
df = pd.DataFrame(combined_data)
df['value'] = df['value'].astype(float)  # Ensure the values are numeric
max_usage = df.groupby(['instance', 'metric_type'])['value'].max().reset_index()

# Save the max data to CSV with a timestamped filename
filename = f"max_cpu_memory_data_{datetime.now().strftime('%Y%m%d_%H%M%S')}.csv"
max_usage.to_csv(filename, index=False)
print(f"Max CPU and Memory data saved to {filename}")
