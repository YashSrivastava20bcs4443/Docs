
// New endpoint for Queue Status Distribution
app.get('/api/queueStatusDistribution', async (req, res) => {
    try {
        const result = await pool.query(`
            SELECT 
                contact_mapped_data.contactId, 
                contact_mapped_data.preQueueSeconds, 
                contact_mapped_data.inQueueSeconds, 
                contact_mapped_data.postQueueSeconds 
            FROM contact_mapped_data
        `);
        const data = result.rows.reduce((acc, row) => {
            acc.labels.push(row.contactId);
            acc.preQueueSeconds.push(row.prequeueseconds);
            acc.inQueueSeconds.push(row.inqueueseconds);
            acc.postQueueSeconds.push(row.postqueueseconds);
            return acc;
        }, { labels: [], preQueueSeconds: [], inQueueSeconds: [], postQueueSeconds: [] });

        res.json(data);
    } catch (err) {
        console.error('Error fetching queue status distribution data:', err);
        res.status(500).json({ error: 'Internal Server Error' });
    }
});

// New endpoint for Average Queue Time Per Campaign
app.get('/api/averageQueueTimePerCampaign', async (req, res) => {
    try {
        const result = await pool.query(`
            SELECT 
                contact_mapped_data.campaignName, 
                AVG(contact_mapped_data.preQueueSeconds) AS avgPreQueue,
                AVG(contact_mapped_data.inQueueSeconds) AS avgInQueue,
                AVG(contact_mapped_data.postQueueSeconds) AS avgPostQueue
            FROM contact_mapped_data
            GROUP BY contact_mapped_data.campaignName
        `);
        const data = result.rows.reduce((acc, row) => {
            acc.labels.push(row.campaignname);
            acc.avgPreQueue.push(row.avgprequeue);
            acc.avgInQueue.push(row.avginqueue);
            acc.avgPostQueue.push(row.avgpostqueue);
            return acc;
        }, { labels: [], avgPreQueue: [], avgInQueue: [], avgPostQueue: [] });

        res.json(data);
    } catch (err) {
        console.error('Error fetching average queue time per campaign data:', err);
        res.status(500).json({ error: 'Internal Server Error' });
    }
});

// New endpoint for Top 5 Agents by Call Volume
app.get('/api/top5AgentsByCallVolume', async (req, res) => {
    try {
        const result = await pool.query(`
            SELECT 
                contact_mapped_data.agentId, 
                COUNT(contact_mapped_data.contactId) AS callVolume
            FROM contact_mapped_data
            GROUP BY contact_mapped_data.agentId
            ORDER BY callVolume DESC
            LIMIT 5
        `);
        const data = { labels: [], callVolume: [] };
        result.rows.forEach(row => {
            data.labels.push(row.agentid);
            data.callVolume.push(row.callvolume);
        });

        res.json(data);
    } catch (err) {
        console.error('Error fetching top 5 agents by call volume data:', err);
        res.status(500).json({ error: 'Internal Server Error' });
    }
});

// New endpoint for Agent Average Handle Time
app.get('/api/agentAverageHandleTime', async (req, res) => {
    try {
        const result = await pool.query(`
            SELECT 
                contact_mapped_data.agentId, 
                AVG(contact_mapped_data.agentSeconds) AS avgHandleTime
            FROM contact_mapped_data
            GROUP BY contact_mapped_data.agentId
        `);
        const data = { labels: [], avgHandleTime: [] };
        result.rows.forEach(row => {
            data.labels.push(row.agentid);
            data.avgHandleTime.push(row.avghandletime);
        });

        res.json(data);
    } catch (err) {
        console.error('Error fetching agent average handle time data:', err);
        res.status(500).json({ error: 'Internal Server Error' });
    }
});

// New endpoint for Calls by End Reason
app.get('/api/callsByEndReason', async (req, res) => {
    try {
        const result = await pool.query(`
            SELECT 
                contact_mapped_data.endReason, 
                COUNT(contact_mapped_data.contactId) AS callCount
            FROM contact_mapped_data
            GROUP BY contact_mapped_data.endReason
        `);
        const data = { labels: [], callCount: [] };
        result.rows.forEach(row => {
            data.labels.push(row.endreason);
            data.callCount.push(row.callcount);
        });

        res.json(data);
    } catch (err) {
        console.error('Error fetching calls by end reason data:', err);
        res.status(500).json({ error: 'Internal Server Error' });
    }
});

// New endpoint for Short Abandon vs Completed Calls
app.get('/api/shortAbandonVsCompletedCalls', async (req, res) => {
    try {
        const result = await pool.query(`
            SELECT 
                contact_mapped_data.isShortAbandon, 
                COUNT(contact_mapped_data.contactId) AS callCount,
                contact_mapped_data.endReason
            FROM contact_mapped_data
            GROUP BY contact_mapped_data.isShortAbandon, contact_mapped_data.endReason
        `);
        const data = result.rows.reduce((acc, row) => {
            if (row.isshortabandon === 'True') {
                acc.shortAbandon[row.endreason] = row.callcount;
            } else {
                acc.completed[row.endreason] = row.callcount;
            }
            return acc;
        }, { shortAbandon: {}, completed: {} });

        res.json(data);
    } catch (err) {
        console.error('Error fetching short abandon vs completed calls data:', err);
        res.status(500).json({ error: 'Internal Server Error' });
    }
});

// New endpoint for Calls Per Campaign
app.get('/api/callsPerCampaign', async (req, res) => {
    try {
        const result = await pool.query(`
            SELECT 
                contact_mapped_data.campaignName, 
                COUNT(contact_mapped_data.contactId) AS callCount
            FROM contact_mapped_data
            GROUP BY contact_mapped_data.campaignName
        `);
        const data = { labels: [], callCount: [] };
        result.rows.forEach(row => {
            data.labels.push(row.campaignname);
            data.callCount.push(row.callcount);
        });

        res.json(data);
    } catch (err) {
        console.error('Error fetching calls per campaign data:', err);
        res.status(500).json({ error: 'Internal Server Error' });
    }
});

// New endpoint for Transfer Type Breakdown
app.get('/api/transferTypeBreakdown', async (req, res) => {
    try {
        const result = await pool.query(`
            SELECT 
                contact_mapped_data.transferIndicatorName, 
                COUNT(contact_mapped_data.contactId) AS callCount
            FROM contact_mapped_data
            GROUP BY contact_mapped_data.transferIndicatorName
        `);
        const data = { labels: [], callCount: [] };
        result.rows.forEach(row => {
            data.labels.push(row.transferindicatorname);
            data.callCount.push(row.callcount);
        });

        res.json(data);
    } catch (err) {
        console.error('Error fetching transfer type breakdown data:', err);
        res.status(500).json({ error: 'Internal Server Error' });
    }
});

// New endpoint for Calls Routed by Skill
app.get('/api/callsRoutedBySkill', async (req, res) => {
    try {
        const result = await pool.query(`
            SELECT 
                contact_mapped_data.skillName, 
                COUNT(contact_mapped_data.contactId) AS callCount
            FROM contact_mapped_data
            GROUP BY contact_mapped_data.skillName
        `);
        const data = { labels: [], callCount: [] };
        result.rows.forEach(row => {
            data.labels.push(row.skillname);
            data.callCount.push(row.callcount);
        });

        res.json(data);
    } catch (err) {
        console.error('Error fetching calls routed by skill data:', err);
        res.status(500).json({ error: 'Internal Server Error' });
    }
});

