# Weekly Alerts Analysis (Grouped Bar Chart: Week on X-axis, Days as separate bars)
st.subheader("Weekly Alerts Analysis")

if not filtered_data.empty:
    # Add Week number and Day name to the data
    filtered_data['WeekNumber'] = filtered_data['@timestamp'].dt.isocalendar().week

    # Group by Week number and Day of the week, sum the size
    weekly_alerts = filtered_data.groupby(['WeekNumber', 'Weekday']).size().unstack(fill_value=0)

    # Sort the columns based on weekday order
    weekly_alerts = weekly_alerts.reindex(columns=['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday'])

    # Plot grouped bar chart
    fig, ax = plt.subplots(figsize=(12, 6))
    weekly_alerts.plot(kind='bar', ax=ax, colormap='tab20', width=0.8)

    # Handling the case where multiple sources are selected
    sources_display = ", ".join(selected_sources) if len(selected_sources) > 1 else selected_sources[0]

    ax.set_title(f"Weekly Alerts Analysis: Comparison of Days Across Weeks for {sources_display}")
    ax.set_xlabel("Week Number")
    ax.set_ylabel("Number of Alerts")
    ax.legend(title="Day of the Week")

    # Displaying values on top of each bar
    for container in ax.containers:
        ax.bar_label(container, fmt='%d', label_type='edge', fontsize=8, padding=3)

    st.pyplot(fig)
else:
    st.write("No data available for the selected filters.")
