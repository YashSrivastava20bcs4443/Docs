def process_alert(alert, api_owners):
    # Base URL
    base_url = "https://portal.azure.com/#@fareportal.com"
    
    # WebDriver for Chrome
    service = webdriver.chrome.service.Service(executable_path='./chromedriver.exe')
    options = webdriver.ChromeOptions()
    # options.add_argument("--headless")
    driver = webdriver.Chrome(service=service, options=options)
    driver.maximize_window()
    
    # Extract target resource and target resource name
    target_resource_name = alert.get("targetResourceName")
    severity = alert.get("severity")
    alert_description = alert.get("name")
    
    # Create URL for the alert
    full_url = f"{base_url}/resource{target_resource_name}"
    try:
        # Open URL in browser
        driver.get(full_url)
        # Wait for page to load (adjust the timeout as needed)
        WebDriverWait(driver, 10).until(EC.presence_of_element_located((By.XPATH, "//body")))
        # Sign in to Microsoft account
        email = config.SENDER_EMAIL
        password = config.SENDER_PASSWORD
        sign_in(driver, email, password)
        
        # Check if API name is in the API owners dictionary
        if target_resource_name not in api_owners:
            print(f"API name '{target_resource_name}' not found in CSV file. Appending to CSV file.")
            # Append API name to CSV file with default owner email
            with open("api.csv", "a", newline="") as csvfile:
                fieldnames = ["API_Name", "Owner_Email"]
                writer = csv.DictWriter(csvfile, fieldnames=fieldnames)
                writer.writerow({"API_Name": target_resource_name, "Owner_Email": "yash.srivastava@fareportal.com"})
            # Skip processing the alert
            return
        
        # If API name is found, proceed with processing the alert
        owner_email = api_owners.get(target_resource_name)
        
        # Check if alert description contains variations of "failed"
        if re.search(r'failur?e?d?', alert_description, re.IGNORECASE):
            # Click on the specific element for "failures"
            WebDriverWait(driver, 10).until(EC.element_to_be_clickable((By.CSS_SELECTOR, "div[data-telemetryname='Menu-failures']"))).click()
            time.sleep(5)  # Delay for page to fully load
            
            # Check for "exceptions" and "dependencies"
            if "exceptions" in alert_description.lower():
                # Click on the specific element for "Exceptions"
                WebDriverWait(driver, 10).until(EC.element_to_be_clickable((By.XPATH, "//div[text()='Exceptions']"))).click()
            elif "dependencies" in alert_description.lower():
                # Click on the specific element for "Dependencies"
                WebDriverWait(driver, 10).until(EC.element_to_be_clickable((By.XPATH, "//div[text()='Dependencies']"))).click()
        else:
            # Default case
            driver.execute_script("document.body.style.zoom='75%'")
            time.sleep(5)  # Delay for page to fully load
        
        # Take screenshot
        screenshot_filename = f"screenshots/{target_resource_name}.png"
        capture_screenshot(driver, screenshot_filename)
        # Send email with screenshot
        send_email(target_resource_name, owner_email, screenshot_filename, severity, alert_description)
        print(f"Alert email sent for {target_resource_name}")
    except TimeoutException:
        print(f"Timeout occurred while loading {full_url}")
    finally:
        # Quit WebDriver after processing each alert
        driver.quit()

if __name__ == "__main__":
    try:
        # Fetch alerts
        subscription_id = config.SUBSCRIPTION_ID
        alerts = fetch_alerts(subscription_id)
        # Saving filtered alerts to JSON file
        save_to_json(alerts)
        # Read CSV file
        with open("api.csv", newline="") as csvfile:
            reader = csv.DictReader(csvfile)
            api_owners = {row["API_Name"]: row["Owner_Email"] for row in reader}
        # Create a directory to save screenshots if it doesn't exist
        if not os.path.exists("screenshots"):
            os.makedirs("screenshots")
        # Process each alert
        for alert in alerts:
            process_alert(alert, api_owners)
    except Exception as e:
        print(f"An error occurred: {str(e)}")
