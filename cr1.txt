if __name__ == "__main__":
    try:
        # Fetch alerts
        subscription_id = config.SUBSCRIPTION_ID
        alerts = fetch_alerts(subscription_id)
        # Saving filtered alerts to JSON file
        save_to_json(alerts)
        # Read CSV file
        with open("api.csv", mode="r", newline="") as csvfile:
            reader = csv.DictReader(csvfile)
            api_owners = {row["API_Name"]: row["Owner_Email"] for row in reader}
        # Create a directory to save screenshots if it doesn't exist
        if not os.path.exists("screenshots"):
            os.makedirs("screenshots")
        
        # List to store API names not found in CSV
        api_names_not_found = []
        # Process each alert
        for alert in alerts:
            # Get owner email from CSV based on target resource name
            owner_email = api_owners.get(alert.get("targetResourceName"))
            # Check if API name exists in CSV
            if owner_email is None:
                print(f"No owner email found for API: {alert.get('targetResourceName')}.")
                api_names_not_found.append(alert.get('targetResourceName'))
                # Set default owner email
                owner_email = "yash.srivastava@fareportal.com"
            # Process the alert
            process_alert(alert, api_owners, owner_email)
        
        # Append API names not found to CSV file
        if api_names_not_found:
            with open("api.csv", mode="a", newline="") as csvfile:
                fieldnames = ["API_Name", "Owner_Email"]
                writer = csv.DictWriter(csvfile, fieldnames=fieldnames)
                for api_name in api_names_not_found:
                    writer.writerow({"API_Name": api_name, "Owner_Email": "yash.srivastava@fareportal.com"})
                print(f"API names not found in CSV appended to the CSV file.")
    except Exception as e:
        print(f"An error occurred: {str(e)}")
