import requests
from azure.identity import ClientSecretCredential
import datetime

# Tenant ID, Client ID, and Client Secret
tenant_id = "YourTenantId"
client_id = "YourClientId"
client_secret = "YourClientSecret"
subscription_id = "YourSubscriptionId"

# Azure credentials
credential = ClientSecretCredential(tenant_id, client_id, client_secret)

# Get access token
access_token = credential.get_token("https://management.azure.com/.default").token

# Azure Monitor API endpoint
monitor_endpoint = "https://management.azure.com"

# API version
api_version = "2019-03-01-preview"  # Use appropriate API version

# Resource URI for alerts
alert_uri = f"{monitor_endpoint}/subscriptions/{subscription_id}/providers/microsoft.insights/alertRules"

# Set the time range for the last 3 hours
start_time = datetime.datetime.utcnow() - datetime.timedelta(hours=3)
end_time = datetime.datetime.utcnow()

# Headers with access token and parameters
headers = {
    "Authorization": f"Bearer {access_token}",
    "Content-Type": "application/json"
}

params = {
    "api-version": api_version,
    "$filter": f"properties/createdTime ge {start_time.isoformat()}Z and properties/createdTime le {end_time.isoformat()}Z"
}

# Make request to get alerts
response = requests.get(alert_uri, headers=headers, params=params)

# Check if request was successful
if response.status_code == 200:
    alerts_data = response.json()
    print("Alerts data for the last 3 hours:")
    print(alerts_data)
else:
    print(f"Failed to retrieve alerts: {response.text}")


........


import requests
from datetime import datetime, timedelta

# Azure Monitor API endpoint
monitor_endpoint = "https://management.azure.com"

# Set the time range for the last 3 hours
end_time = datetime.utcnow()
start_time = end_time - timedelta(hours=3)

# Azure Monitor API version
api_version = "2019-03-01-preview"  # Use appropriate API version

# Resource URI for alerts
alert_uri = f"{monitor_endpoint}/providers/microsoft.insights/alerts"

# Parameters
params = {
    "api-version": api_version,
    "$filter": f"properties/essentials/monitorCondition eq 'Fired' and properties/essentials/startTime ge {start_time.isoformat()} and properties/essentials/startTime le {end_time.isoformat()}",
}

# Make request to get alerts
response = requests.get(alert_uri, params=params)

# Check if request was successful
if response.status_code == 200:
    alerts_data = response.json()
    print("Alerts data for the last 3 hours:")
    print(alerts_data)
else:
    print(f"Failed to retrieve alerts: {response.text}")
