from selenium import webdriver
from webdriver_manager.chrome import ChromeDriverManager
import time

# Function to capture screenshot and save it
def capture_screenshot(alert_name, resource_name, screenshot_counter):
    options = webdriver.ChromeOptions()
    options.add_argument('--headless')  # Run Chrome in headless mode (without opening a browser window)
    driver = webdriver.Chrome(ChromeDriverManager().install(), options=options)

    # Navigate to the Azure Monitor Alerts page
    driver.get('https://portal.azure.com/#view/Microsoft Azure Monitoring/AzureMonitoring Browse Blade/~/alertsV2')

    # Wait for page to load
    time.sleep(5)

    # Find the alert element by its name
    alert_element = driver.find_element_by_xpath(f"//div[@data-automation-id='detailsList']/div[contains(@role, 'listitem') and .//*[text()='{alert_name}']]")

    # Click on the alert element to view details
    alert_element.click()

    # Wait for alert details to load
    time.sleep(5)

    # Find the affected resource element by its name
    resource_element = driver.find_element_by_xpath(f"//*[contains(text(), '{resource_name}')]")

    # Scroll to the affected resource element
    driver.execute_script("arguments[0].scrollIntoView();", resource_element)

    # Capture screenshot of the affected resource
    screenshot_path = f'{alert_name}_resource_{screenshot_counter}.png'
    resource_element.screenshot(screenshot_path)

    # Quit the driver
    driver.quit()

    print(f'Screenshot saved: {screenshot_path}')

# Initialize Chrome driver
options = webdriver.ChromeOptions()
options.add_argument('--headless')  # Run Chrome in headless mode (without opening a browser window)
driver = webdriver.Chrome(ChromeDriverManager().install(), options=options)

# Navigate to the Azure Monitor Alerts page
driver.get('https://portal.azure.com/#view/Microsoft Azure Monitoring/AzureMonitoring Browse Blade/~/alertsV2')

# Wait for page to load
time.sleep(5)

# Find all alert elements
alert_elements = driver.find_elements_by_xpath("//div[@data-automation-id='detailsList']/div[contains(@role, 'listitem')]")

# Capture screenshots for each alert's affected resource
for alert_element in alert_elements:
    # Get the alert name
    alert_name = alert_element.find_element_by_xpath(".//div[contains(@class, 'ms-DetailsRow-cell') and @data-automation-id='column-group-header-title']").text

    # Open the alert to view details
    alert_element.click()

    # Wait for alert details to load
    time.sleep(5)

    # Find all affected resource elements
    resource_elements = driver.find_elements_by_xpath("//*[contains(text(), 'Affected Resource')]")

    # Capture screenshot for each affected resource
    for i, resource_element in enumerate(resource_elements, 1):
        # Get the affected resource name
        resource_name = resource_element.text.split(':', 1)[1].strip()

        # Capture screenshot of the affected resource
        capture_screenshot(alert_name, resource_name, i)

    # Go back to the alerts page
    driver.back()

    # Wait for page to load
    time.sleep(5)

# Quit the driver
driver.quit()
