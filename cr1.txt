from selenium import webdriver
from selenium.webdriver.common.keys import Keys
from webdriver_manager.chrome import ChromeDriverManager
import time

# Function to perform Azure AD authentication
def azure_ad_login(tenant_id, client_id, client_secret):
    options = webdriver.ChromeOptions()
    options.add_argument('--headless')  # Run Chrome in headless mode (without opening a browser window)
    driver = webdriver.Chrome(ChromeDriverManager().install(), options=options)

    # Construct the login URL with client ID
    login_url = f'https://login.microsoftonline.com/{tenant_id}/oauth2/v2.0/token'

    # Open the login URL
    driver.get(login_url)

    # Wait for page to load
    time.sleep(5)

    # Enter client ID
    driver.find_element_by_name('client_id').send_keys(client_id)

    # Enter client secret
    driver.find_element_by_name('client_secret').send_keys(client_secret)

    # Select client credentials flow
    driver.find_element_by_id('client_credentials').click()

    # Click on "Get token"
    driver.find_element_by_id('get_token').click()

    # Wait for login process to complete
    time.sleep(10)

    return driver

# Function to capture screenshot and save it
def capture_screenshot(driver, screenshot_path):
    driver.save_screenshot(screenshot_path)
    print(f'Screenshot saved: {screenshot_path}')

# Azure AD credentials
tenant_id = 'your_tenant_id'
client_id = 'your_client_id'
client_secret = 'your_client_secret'

# Initialize Chrome driver and perform Azure AD login
driver = azure_ad_login(tenant_id, client_id, client_secret)

# Navigate to the Azure Monitor Alerts page
driver.get('https://portal.azure.com/#view/Microsoft Azure Monitoring/AzureMonitoring Browse Blade/~/alertsV2')

# Wait for page to load
time.sleep(5)

# Find all alert elements
alert_elements = driver.find_elements_by_xpath("//div[@data-automation-id='detailsList']/div[contains(@role, 'listitem')]")

# Capture screenshots for each alert's affected resource
for index, alert_element in enumerate(alert_elements, 1):
    # Click on the alert element to view details
    alert_element.click()

    # Wait for alert details to load
    time.sleep(5)

    # Capture screenshot of the alert
    screenshot_path = f'alert_{index}_details.png'
    capture_screenshot(driver, screenshot_path)

    # Go back to the alerts page
    driver.back()

    # Wait for page to load
    time.sleep(5)

# Quit the driver
driver.quit()
