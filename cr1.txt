from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from webdriver_manager.chrome import ChromeDriverManager
import time

# Function to perform Azure AD authentication
def azure_ad_login(email, password):
    options = webdriver.ChromeOptions()
    options.add_argument('--headless')  # Run Chrome in headless mode (without opening a browser window)
    driver = webdriver.Chrome(ChromeDriverManager().install(), options=options)

    # Navigate to the Azure AD login page
    driver.get('https://login.microsoftonline.com/')

    # Wait for page to load and email input field to be visible
    WebDriverWait(driver, 10).until(EC.visibility_of_element_located((By.NAME, 'loginfmt')))

    # Enter email
    driver.find_element_by_name('loginfmt').send_keys(email)
    driver.find_element_by_id('idSIButton9').click()

    # Wait for page to load and password input field to be visible
    WebDriverWait(driver, 10).until(EC.visibility_of_element_located((By.NAME, 'passwd')))

    # Enter password
    driver.find_element_by_name('passwd').send_keys(password)
    driver.find_element_by_id('idSIButton9').click()

    # Wait for login process to complete
    WebDriverWait(driver, 10).until(EC.url_contains('portal.azure.com'))
    time.sleep(5)  # Additional wait to ensure all elements are loaded

    return driver

# Function to capture screenshot and save it
def capture_screenshot(driver, screenshot_path):
    driver.save_screenshot(screenshot_path)
    print(f'Screenshot saved: {screenshot_path}')

# Email and password
email = 'your_email@example.com'
password = 'your_password'

# Initialize Chrome driver and perform Azure AD login
driver = azure_ad_login(email, password)

# Navigate to the Azure Monitor Alerts page
driver.get('https://portal.azure.com/#view/Microsoft Azure Monitoring/AzureMonitoring Browse Blade/~/alertsV2')

# Wait for page to load
time.sleep(5)

# Find all alert elements
alert_elements = driver.find_elements_by_xpath("//div[@data-automation-id='detailsList']/div[contains(@role, 'listitem')]")

# Capture screenshots for each alert's affected resource
for index, alert_element in enumerate(alert_elements, 1):
    # Click on the alert element to view details
    alert_element.click()

    # Wait for alert details to load
    time.sleep(5)

    # Capture screenshot of the alert
    screenshot_path = f'alert_{index}_details.png'
    capture_screenshot(driver, screenshot_path)

    # Go back to the alerts page
    driver.back()

    # Wait for page to load
    time.sleep(5)

# Quit the driver
driver.quit()
