import tkinter as tk
from tkinter import messagebox
import re

def parse_requirements(requirements):
    name_match = re.search(r'name is (\w+)', requirements)
    type_match = re.search(r'type is (\w+)', requirements)
    subnet_match = re.search(r'subnet is ([\d\.\/]+)', requirements)
    fqdn_match = re.search(r'fqdn is (\S+)', requirements)

    name = name_match.group(1) if name_match else "default_name"
    if type_match:
        addr_type = type_match.group(1)
    else:
        addr_type = "subnet"
    
    if addr_type == "subnet":
        address_value = subnet_match.group(1) if subnet_match else "0.0.0.0/0"
    elif addr_type == "fqdn":
        address_value = fqdn_match.group(1) if fqdn_match else "example.com"
    else:
        address_value = "unknown"

    return name, addr_type, address_value

def generate_address_config(name, addr_type, address_value):
    if addr_type == "subnet":
        config_template = f"""
address_details:
  - name: "{name}"
    type: "{addr_type}"
    subnet: "{address_value}"
    routing: "enable"
"""
    elif addr_type == "fqdn":
        config_template = f"""
address_details:
  - name: "{name}"
    type: "{addr_type}"
    fqdn: "{address_value}"
    routing: "enable"
"""
    return config_template

def generate_config():
    requirements = text_entry.get("1.0", tk.END).strip()
    if requirements:
        name, addr_type, address_value = parse_requirements(requirements)
        config = generate_address_config(name, addr_type, address_value)
        result_text.delete("1.0", tk.END)
        result_text.insert(tk.END, config)
    else:
        messagebox.showwarning("Input Error", "Please enter your requirements.")

# Setup the main application window
root = tk.Tk()
root.title("Configuration Generator")

# Create and place the widgets
tk.Label(root, text="Enter your requirements:").pack(pady=5)
text_entry = tk.Text(root, height=10, width=50)
text_entry.pack(pady=5)

generate_button = tk.Button(root, text="Generate Configuration", command=generate_config)
generate_button.pack(pady=5)

tk.Label(root, text="Generated Configuration:").pack(pady=5)
result_text = tk.Text(root, height=10, width=50)
result_text.pack(pady=5)

# Start the main loop
root.mainloop()
