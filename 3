import requests
import psycopg2
from datetime import datetime, timedelta

# API Endpoints
TOKEN_URL = "http://ctiintegrationapi.operations.fareportal.com.local/api/Agent/accessToken"
API_URL = "https://api-c48.nice-incontact.com/incontactapi/services/v31.0/contacts/completed"

# PostgreSQL Database Configuration
DB_CONFIG = {
    "dbname": "postgres",
    "user": "postgres",
    "password": "Zxcv@1234",
    "host": "172.16.130.247",
    "port": "5432"
}

# Function to Generate Access Token
def get_access_token():
    try:
        response = requests.get(TOKEN_URL)
        if response.status_code == 200:
            return response.json().get("access_token")
        else:
            raise Exception(f"Failed to fetch access token. Status: {response.status_code}")
    except Exception as e:
        raise Exception(f"Error obtaining access token: {e}")

# Create Table for Storing Data
def create_table():
    conn = psycopg2.connect(**DB_CONFIG)
    cursor = conn.cursor()
    create_table_query = """
    CREATE TABLE IF NOT EXISTS completed_contacts (
        contact_id SERIAL PRIMARY KEY,
        contact_start_date TIMESTAMP,
        last_update_time TIMESTAMP,
        from_addr VARCHAR(100),
        to_addr VARCHAR(100),
        media_type INTEGER,
        is_outbound BOOLEAN,
        abandoned BOOLEAN,
        agent_seconds INTEGER,
        in_queue INTEGER,
        pre_queue_seconds INTEGER,
        end_reason VARCHAR(100)
    )
    """
    cursor.execute(create_table_query)
    conn.commit()
    cursor.close()
    conn.close()

# Fetch Data from API (Last 24 Hours)
def fetch_data(token):
    # Calculate date range for the last 24 hours
    end_date = datetime.utcnow()
    start_date = end_date - timedelta(days=1)

    params = {
        "startDate": start_date.strftime("%Y-%m-%dT%H:%M:%SZ"),
        "endDate": end_date.strftime("%Y-%m-%dT%H:%M:%SZ"),
        "mediaType": 4
    }

    headers = {
        "Authorization": f"Bearer {token}",
        "Content-Type": "application/json"
    }

    response = requests.get(API_URL, headers=headers, params=params)
    if response.status_code == 200:
        return response.json()
    else:
        raise Exception(f"API request failed. Status Code: {response.status_code}")

# Filter Data Based on Conditions
def filter_data(data):
    filtered_data = []
    for record in data:
        agent_seconds = int(record.get("agentSeconds", 0))
        in_queue = int(record.get("inQueue", 0))
        pre_queue_seconds = int(record.get("preQueueSeconds", 0))
        media_type = record.get("mediaType")
        is_outbound = record.get("isOutbound")
        abandoned = record.get("abandoned")
        end_reason = record.get("endReason")

        # Apply Filtering Logic Based on Your Conditions
        if media_type == 4 and not is_outbound and record.get("MasterContactID") == record.get("ContactID"):
            if abandoned is False and agent_seconds == 0 and in_queue == 0 and pre_queue_seconds > 1:
                if end_reason in ["Contact Hung Up only", "Contact Hang Up via Script"]:
                    filtered_data.append(record)
            elif is_outbound and abandoned is False and agent_seconds == 0 and in_queue > 0 and pre_queue_seconds > 0:
                filtered_data.append(record)

    return filtered_data

# Insert Filtered Data into PostgreSQL Database
def insert_data(data):
    conn = psycopg2.connect(**DB_CONFIG)
    cursor = conn.cursor()
    insert_query = """
    INSERT INTO completed_contacts (
        contact_start_date, last_update_time, from_addr, to_addr, media_type,
        is_outbound, abandoned, agent_seconds, in_queue, pre_queue_seconds, end_reason
    ) VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)
    """
    for record in data:
        cursor.execute(insert_query, (
            record.get("contactStartDatst"),
            record.get("lastUpdateTime"),
            record.get("fromAddr"),
            record.get("toAddr"),
            record.get("mediaType"),
            record.get("isOutbound"),
            record.get("abandoned"),
            record.get("agentSeconds"),
            record.get("inQueue"),
            record.get("preQueueSeconds"),
            record.get("endReason")
        ))
    conn.commit()
    cursor.close()
    conn.close()

# Main Execution Flow
if __name__ == "__main__":
    try:
        print("Generating access token...")
        token = get_access_token()

        print("Creating table if not exists...")
        create_table()

        print("Fetching data from API for the last 24 hours...")
        data = fetch_data(token)

        print("Filtering data based on conditions...")
        filtered_data = filter_data(data)

        if filtered_data:
            print(f"Inserting {len(filtered_data)} records into the database...")
            insert_data(filtered_data)
            print("Data successfully inserted into PostgreSQL!")
        else:
            print("No data met the filtering criteria.")
    except Exception as e:
        print(f"Error: {e}")
