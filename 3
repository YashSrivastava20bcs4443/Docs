import requests
import psycopg2
from psycopg2 import sql
from psycopg2.extras import execute_values
from datetime import datetime, timedelta

# PostgreSQL connection details
DB_CONFIG = {
    'dbname': 'your_database_name',
    'user': 'postgres',
    'password': 'Zxcv@1234',
    'host': '172.16.130.247',
    'port': '5432'
}

# API details
API_URL = "https://api.example.com/contacts/completed"
HEADERS = {"Authorization": "Bearer YOUR_ACCESS_TOKEN"}

# Fetch last 2 hours of data
end_date = datetime.utcnow()
start_date = end_date - timedelta(hours=2)

# API Request payload
params = {
    "startDate": start_date.strftime('%Y-%m-%dT%H:%M:%SZ'),
    "endDate": end_date.strftime('%Y-%m-%dT%H:%M:%SZ'),
    "mediaType": 4
}

# Ensure tables exist and add missing columns
def setup_database():
    conn = psycopg2.connect(**DB_CONFIG)
    cursor = conn.cursor()

    # Create tables if not exist
    cursor.execute("""
        CREATE TABLE IF NOT EXISTS raw_completed_contacts (
            id SERIAL PRIMARY KEY,
            raw_data JSONB,
            inserted_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        );

        CREATE TABLE IF NOT EXISTS completed_contacts (
            contact_id BIGINT,
            master_contact_id BIGINT,
            contact_start_date TIMESTAMP,
            last_update_time TIMESTAMP,
            from_addr VARCHAR(50),
            to_addr VARCHAR(50),
            media_type INT,
            is_outbound BOOLEAN,
            abandoned BOOLEAN,
            agent_seconds INT,
            in_queue INT,
            pre_queue_seconds INT,
            end_reason VARCHAR(50)
        );
    """)

    # Commit the changes
    conn.commit()
    cursor.close()
    conn.close()


def fetch_data():
    """Fetch data from the API."""
    response = requests.get(API_URL, headers=HEADERS, params=params)
    response.raise_for_status()
    return response.json()


def save_raw_data(raw_data):
    """Save raw API data in the PostgreSQL table."""
    conn = psycopg2.connect(**DB_CONFIG)
    cursor = conn.cursor()
    try:
        cursor.execute(
            "INSERT INTO raw_completed_contacts (raw_data) VALUES (%s)",
            [psycopg2.extras.Json(raw_data)]
        )
        conn.commit()
        print("Raw data saved successfully.")
    finally:
        cursor.close()
        conn.close()


def process_and_store_data(data):
    """Filter and insert processed data into the database."""
    conn = psycopg2.connect(**DB_CONFIG)
    cursor = conn.cursor()
    processed_data = []

    for record in data:
        try:
            # Applying conditions as per your requirement
            media_type = record.get('mediaType')
            is_outbound = record.get('isOutbound')
            abandoned = record.get('abandoned')
            master_contact_id = record.get('masterContactID')
            contact_id = record.get('contactID')
            agent_seconds = int(record.get('agentSeconds', 0))
            in_queue = int(record.get('inQueue', 0))
            pre_queue_seconds = int(record.get('preQueueSeconds', 0))
            end_reason = record.get('endReason', '')

            # Conditions for IVR Abandon Count
            if media_type == 4 and not is_outbound and not abandoned and master_contact_id == contact_id \
                    and agent_seconds == 0 and in_queue == 0 and pre_queue_seconds > 1:
                end_reason = "Contact Hung Up"

            # Conditions for Polite Disconnect Count
            elif media_type == 4 and not is_outbound and not abandoned and master_contact_id == contact_id \
                    and agent_seconds == 0 and in_queue == 0 and pre_queue_seconds > 1:
                end_reason = "Contact Hang Up via Script"

            # Conditions for Queue Abandon Count
            elif media_type == 4 and is_outbound and not abandoned and master_contact_id == contact_id \
                    and agent_seconds == 0 and in_queue > 0 and pre_queue_seconds > 0:
                end_reason = "Queue Abandon"

            # Prepare data for insertion
            processed_data.append((
                int(contact_id),
                int(master_contact_id),
                datetime.fromisoformat(record['contactStartDate'].replace('Z', '+00:00')),
                datetime.fromisoformat(record['lastUpdateTime'].replace('Z', '+00:00')),
                record['fromAddr'],
                record['toAddr'],
                media_type,
                is_outbound,
                abandoned,
                agent_seconds,
                in_queue,
                pre_queue_seconds,
                end_reason
            ))

        except Exception as e:
            print(f"Error processing record: {e}")

    # Insert processed data into the database
    try:
        insert_query = """
        INSERT INTO completed_contacts (
            contact_id, master_contact_id, contact_start_date, last_update_time,
            from_addr, to_addr, media_type, is_outbound, abandoned,
            agent_seconds, in_queue, pre_queue_seconds, end_reason
        ) VALUES %s
        """
        execute_values(cursor, insert_query, processed_data)
        conn.commit()
        print(f"Inserted {len(processed_data)} records successfully.")
    except Exception as e:
        print(f"Error storing data: {e}")
    finally:
        cursor.close()
        conn.close()


# Main execution
def main():
    try:
        print("Setting up database...")
        setup_database()

        print("Fetching data from API...")
        data = fetch_data()

        print("Saving raw data...")
        save_raw_data(data)

        print("Processing and inserting data...")
        process_and_store_data(data)

        print("Process completed successfully!")

    except Exception as e:
        print(f"Error occurred: {e}")


if __name__ == "__main__":
    main()
