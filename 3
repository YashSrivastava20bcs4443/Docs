import subprocess

# PowerShell script as a multi-line string
powershell_script = r'''
$serverList = Get-Content -Path "C:\Temp\Servers.txt"

$outputcsvpath = "C:\TEMP\Reboot_patching_log\Corp_RebootAndPatchingDetails$((Get-Date).ToString('MM-dd-yyyy')).csv"

$serviceaccountusername = "corp.local\svc_automation"

$securepassword = ConvertTo-SecureString "%]1%; m13e034" -AsPlainText -Force

$serviceAccountCred = New-Object System.Management.Automation.PSCredential ($serviceaccountusername, $securepassword)

$outputDirectory = Split-Path -Path $outputcsvpath

if (-Not (Test-Path -Path $outputDirectory)) {
    New-Item -Path $outputDirectory -ItemType Directory -Force
}

$results = @()

foreach ($server in $serverList) {
    Write-Host "Processing $server..." -ForegroundColor Cyan
    try {
        $data = Invoke-Command -ComputerName $server -Credential $serviceAccountCred -ErrorAction Stop -ScriptBlock {
            $osInfo = Get-WmiObject -Class Win32_OperatingSystem
            $lastboottime = $osInfo.ConvertToDateTime($osInfo.LastBootUpTime)
            $details = Get-HotFix | Sort-Object InstalledOn -Descending
            $firstdate = $details | Select-Object -First 1
            $latestdate = $firstdate.InstalledOn
            $latestUpdates = $details | Where-Object { $_.InstalledOn -eq $latestdate }
            $hotFixDetails = ($latestUpdates | ForEach-Object { "$($_.HotFixID) ($($_.Description))" }) -join "; "
            [PSCustomObject]@{
                ComputerName    = $env:COMPUTERNAME
                LastRebootDate  = $lastboottime
                LatestPatchKB   = $hotFixDetails
                LatestPatchDate = $latestdate
            }
        }
        $results += $data
    } catch {
        Write-Host "Failed to connect to $server. Logging failure..." -ForegroundColor Red
        $results += [PSCustomObject]@{
            ComputerName    = $server
            LastRebootDate  = "Failed to connect"
            LatestPatchKB   = "Failed to connect"
            LatestPatchDate = "Failed to connect"
        }
    }
}

$results | Select-Object -Property ComputerName, LastRebootDate, LatestPatchKB, LatestPatchDate | Export-Csv -Path $outputcsvpath -NoTypeInformation -Force

Write-Host "Details exported to $outputcsvpath" -ForegroundColor Green

$smtpServer = "smtp-internal.fareportal.com.local"
$smtpPort = 25
$smtpUser = "svc_ems@fareportal.com"
$to = "ayush.raj@fareportal.com"
$subject = "Monthly Windows Server Patch Updates Corp"
$from = "svc_ems@fareportal.com"
$body = @"
<html>
<body>
<p>Dear All,</p>
<p>Please find attached automated report of Monthly Windows Security patch updates for the month December 2024. This list contains corp servers. EMS team
need to review the attached sheet and highlight to Harshit/Ashish for any gap.</p>
<p>Thanks</p>
</body>
</html>
"@
$report = $outputcsvpath
$message = New-Object System.Net.Mail.MailMessage $from, $to, $subject, $body
$message.IsBodyHtml = $true
$attachment = New-Object System.Net.Mail.Attachment $report
$message.Attachments.Add($attachment)
$message.cc.Add("ayush.raj@fareportal.com")
$smtp = New-Object System.Net.Mail.SmtpClient $smtpServer, $smtpPort
try {
    $smtp.Send($message)
    Write-Output "Email sent"
} catch {
    Write-Output "Email failed: $_"
}
'''

# Execute the PowerShell script
try:
    subprocess.run(["powershell", "-Command", powershell_script], check=True, text=True)
    print("PowerShell script executed successfully.")
except subprocess.CalledProcessError as e:
    print(f"An error occurred: {e}")
