1. Disaster Recovery (DR) Project
User Story: Robust Disaster Recovery Infrastructure on Azure

As an Automation Engineer
I want to design, deploy, and optimize a disaster recovery (DR) infrastructure on Azure using Terraform
So that critical systems and data can be protected and recovered swiftly in case of a disaster, with ongoing improvements based on user feedback.

Acceptance Criteria:

Resource Management:

Implement resource groups via Terraform scripts for organized resource management.
Continuously refine the resource organization based on feedback for optimal performance and cost-efficiency.
Network Infrastructure:

Establish VNets and Subnets to ensure secure and isolated network environments.
Configure NSGs to enforce stringent security policies.
Enable VNet peering for seamless inter-network communication.
Incorporate feedback to enhance network security and connectivity.
Compute and Access Management:

Deploy scalable and secure Linux and Windows VMs.
Implement a Bastion Host for secure, controlled access to VMs.
Optimize VM configurations and access controls in response to user feedback.
Traffic Management and Security:

Deploy internal and external Azure Load Balancers to manage traffic efficiently.
Configure Application Gateways with Web Application Firewall (WAF) to protect against threats.
Adjust configurations based on feedback to improve traffic management and security.
Data Management and Security:

Set up SQL Managed Instances for robust data management.
Implement FortiGate Firewalls for comprehensive security.
Apply feedback to enhance data security measures and firewall policies.
DNS and Automation Enhancements:

Automate the creation and management of DNS Records.
Continuously improve automation scripts based on feedback for efficiency and reliability.
Disaster Recovery Optimization:

Implement Azure Site Recovery to ensure rapid recovery of services.
Regularly update DR strategies and configurations based on feedback and evolving best practices.
2. Network Automation Project
User Story: Streamlined Network Backup and Maintenance Automation

As an Automation Engineer
I want to automate the backup and maintenance processes for network devices using Ansible
So that network configurations are securely backed up and maintained with minimal manual intervention, incorporating improvements from feedback.

Acceptance Criteria:

Ansible Automation and Bug Fixes:

Resolve existing bugs in Ansible scripts for firewall backups.
Implement enhancements based on user feedback to improve reliability and efficiency.
Comprehensive Backup Solutions:

Develop a robust monthly backup script for network configurations.
Implement a retention policy script for automatic deletion of backups older than 35 days.
Integrate feedback to optimize backup schedules and data retention policies.
3. PIC Automation Project
User Story: Efficient Firewall Policy Automation and Reporting

As an Automation Engineer
I want to automate the extraction and reporting of firewall policies
So that security policies are transparently monitored and reported to stakeholders, with continuous enhancements based on feedback.

Acceptance Criteria:

Policy Extraction and Automation:

Develop a comprehensive script to extract detailed policy data from each firewall.
Regularly update the script based on feedback to improve data accuracy and extraction speed.
Comprehensive Reporting:

Generate detailed, easy-to-understand reports from the extracted policy data.
Automatically distribute reports to relevant stakeholders.
Incorporate feedback to enhance report content, format, and delivery mechanisms.
4. CI/CD Project
User Story: Scalable and Efficient CI/CD Pipeline Implementation

As an Automation Engineer
I want to design and implement scalable CI/CD pipelines
So that infrastructure and application deployments are automated, consistent, and reliable, with continuous improvement driven by feedback.

Acceptance Criteria:

Pipeline Design and Development:

Create comprehensive CI/CD pipelines for deploying and managing both infrastructure and applications.
Integrate feedback to refine pipeline processes, ensuring efficiency and reliability.
Tool Integration and Workflow Optimization:

Ensure seamless integration with version control systems, testing frameworks, and other essential tools.
Continuously improve integration points based on user feedback to streamline workflows.
Automation, Testing, and Monitoring:

Automate testing, deployment, and monitoring processes to ensure rapid and reliable releases.
Regularly update automation strategies based on feedback to enhance effectiveness and reduce manual effort.
