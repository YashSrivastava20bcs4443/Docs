https://youtu.be/7kgiF4UsPEo?si=lG9dTo0LpZ9uzf99


https://github.com/fortinet-solutions-cse/40ansible

https://github.com/fortinet-ansible-dev/ansible-galaxy-fortios-collection/issues/186

https://ansible-galaxy-fortios-docs.readthedocs.io/en/galaxy-2.1.6/fortios_monitor.html

Q39mkmH1rm7756rrQfjrnjmdhc1nGs


https://chat.openai.com/share/50657191-09e9-4913-b4b2-9a5cdd8a19a9


yash@MSI:~$ scp /home/yash/fgt-restore-config admin@192.168.1.10:fgt-restore-config
admin@192.168.1.10's password:
fgt-restore-config


import requests
from azure.identity import ClientSecretCredential

# Tenant ID, Client ID, and Client Secret
tenant_id = "YourTenantId"
client_id = "YourClientId"
client_secret = "YourClientSecret"

# Azure credentials
credential = ClientSecretCredential(tenant_id, client_id, client_secret)

# Get access token
access_token = credential.get_token("https://management.azure.com/.default").token

# Headers with access token
headers = {
    "Authorization": f"Bearer {access_token}",
    "Content-Type": "application/json"
}

# Azure Monitor API endpoint
monitor_endpoint = "https://management.azure.com"

# API version
api_version = "2018-03-01"

# Resource URI for alerts
alert_uri = f"{monitor_endpoint}/subscriptions/{{subscription_id}}/providers/microsoft.insights/metricAlerts?api-version={api_version}"

# Subscription IDs for which you want alerts (replace with your subscription IDs)
subscription_ids = ["SubscriptionID1", "SubscriptionID2"]

# Resource groups for which you want alerts
resource_groups = ["ems", "operations"]

# List to store alerts
alerts_list = []

# Loop through subscriptions
for subscription_id in subscription_ids:
    # Loop through resource groups
    for resource_group_name in resource_groups:
        # Make request to get alerts
        response = requests.get(alert_uri.format(subscription_id=subscription_id), headers=headers)

        # Check if request was successful
        if response.status_code == 200:
            alerts_data = response.json()
            # Process retrieved alerts
            for alert in alerts_data.get('value', []):
                if alert.get('properties', {}).get('scope', "").split("/")[-1] in resource_groups:
                    alerts_list.append(alert)
        else:
            print(f"Failed to retrieve alerts for subscription {subscription_id} and resource group {resource_group_name}: {response.text}")

# Print alerts list
for alert in alerts_list:
    print(alert)


https://chat.openai.com/share/534ab52a-20cb-4a76-9679-16791597f606


