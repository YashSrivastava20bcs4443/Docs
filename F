import os
import shutil
import time
import pandas as pd
from selenium import webdriver
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from openpyxl import load_workbook
from openpyxl.styles import PatternFill, Font, Border, Side, Alignment
from openpyxl.utils.dataframe import dataframe_to_rows
from email.message import EmailMessage
import smtplib
import config

# Configure WebDriver options
download_directory = os.path.join(os.getcwd(), "downloads")
temp_directory = os.path.join(os.getcwd(), "temp")
chrome_options = webdriver.ChromeOptions()
chrome_options.add_experimental_option("prefs", {
    "download.default_directory": temp_directory,
    "download.prompt_for_download": False,
    "safebrowsing.enabled": True
})
driver_path = 'C:\\Users\\y.s.va22\\Downloads\\prod\\chromedriver.exe'

# List of FortiGate firewall IPs with location
firewall_ips = [
    ('172.22.13.10', 'GCR-D1200-FW'),
    # Add other firewall IPs and locations here...
]

# Shared FortiGate credentials
username_str = config.FW_USERNAME
password_str = config.FW_PASSWORD

# Microsoft credentials
microsoft_email = config.SENDER_EMAIL
microsoft_password = config.SENDER_PASSWORD

# SMTP email configuration
smtp_server = config.SMTP_SERVER
smtp_port = config.SMTP_PORT
smtp_username = config.SENDER_EMAIL
smtp_password = config.SENDER_PASSWORD

# Email details
email_to = ['yash.srivastava@fareportal.com', 'ashish.ksingh@fareportal.com']
email_cc = ['rajeev.rana@fareportal.com']

def sign_in(driver, email, password):
    EMAILFIELD = (By.ID, "i0116")
    PASSWORDFIELD = (By.ID, "i0118")
    NEXTBUTTON = (By.ID, "idSIButton9")

    WebDriverWait(driver, 10).until(EC.element_to_be_clickable(EMAILFIELD)).send_keys(email)
    WebDriverWait(driver, 10).until(EC.element_to_be_clickable(NEXTBUTTON)).click()
    WebDriverWait(driver, 10).until(EC.element_to_be_clickable(PASSWORDFIELD)).send_keys(password)
    WebDriverWait(driver, 10).until(EC.element_to_be_clickable(NEXTBUTTON)).click()

    try:
        stay_signed_in_popup = driver.find_element(By.XPATH, "//div[contains(text(), 'Stay signed in?')]")
        if stay_signed_in_popup:
            no_button = driver.find_element(By.XPATH, "//input[@value='No']")
            no_button.click()
    except:
        pass

def wait_for_download_and_rename(temp_dir, new_name, timeout=30):
    start_time = time.time()
    while True:
        for filename in os.listdir(temp_dir):
            if filename.endswith(".csv") and not filename.endswith(".crdownload"):
                full_path = os.path.join(temp_dir, filename)
                new_path = os.path.join(download_directory, new_name)
                shutil.move(full_path, new_path)
                print(f"File renamed and moved to {new_path}")
                return
        if time.time() - start_time > timeout:
            raise Exception(f"File download timed out after {timeout} seconds.")
        time.sleep(1)

def export_policies(ip, location):
    service = Service(driver_path)
    driver = webdriver.Chrome(service=service, options=chrome_options)
    try:
        driver.get('https://login.microsoftonline.com/')
        sign_in(driver, microsoft_email, microsoft_password)
        driver.get(f'https://{ip}:8443/')

        try:
            advanced_button = WebDriverWait(driver, 10).until(EC.element_to_be_clickable((By.ID, "details-button")))
            advanced_button.click()
            proceed_link = WebDriverWait(driver, 10).until(EC.element_to_be_clickable((By.ID, "proceed-link")))
            proceed_link.click()
        except Exception as e:
            print(f"No advanced option found or proceed (unsafe) link: {e}")

        try:
            accept_button = WebDriverWait(driver, 10).until(EC.element_to_be_clickable((By.XPATH, "//button[@name='accept']")))
            accept_button.click()
        except Exception as e:
            print(f"No accept button found: {e}")

        time.sleep(3)
        username = driver.find_element(By.ID, 'username')
        password = driver.find_element(By.ID, 'secretkey')
        login_button = driver.find_element(By.ID, 'login_button')
        username.send_keys(username_str)
        password.send_keys(password_str)
        login_button.click()
        time.sleep(5)

        if ip == '10.255.255.65':
            driver.get(f'https://{ip}:8443/ng/firewall/policy/policy/standard?vdom=root')
        else:
            driver.get(f'https://{ip}:8443/ng/firewall/policy/policy/standard')

        time.sleep(30)

        try:
            configure_table_button = WebDriverWait(driver, 30).until(
                EC.presence_of_element_located((By.XPATH, '//f-icon[@class="fa-cog"]'))
            )
            driver.execute_script("arguments[0].click();", configure_table_button)
            print("Clicked on configure table button using JavaScript")
        except Exception as e:
            print(f"Failed to click configure table button: {e}")
            driver.save_screenshot('error_screenshot.png')
            return

        options = [
            "Destination Address", "First Used", "Hit Count", "ID", "IPS", "Last Used",
            "Packets", "Source Address", "Status", "Comments"
        ]
        for option in options:
            try:
                button = WebDriverWait(driver, 10).until(
                    EC.element_to_be_clickable((By.XPATH, f'//button[.//span[text()="{option}"]]'))
                )
                driver.execute_script("arguments[0].click();", button)
                print(f"Clicked on '{option}' button")
            except Exception as e:
                print(f"Failed to click on '{option}' button: {e}")

        try:
            apply_button = WebDriverWait(driver, 10).until(
                EC.element_to_be_clickable((By.XPATH, '//button[contains(@class, "standard-button primary") and text()="Apply"]'))
            )
            driver.execute_script("arguments[0].click();", apply_button)
            print("Clicked on Apply button")
        except Exception as e:
            print(f"Failed to click on Apply button: {e}")

        try:
            export_button = WebDriverWait(driver, 10).until(
                EC.element_to_be_clickable((By.XPATH, '//span[@class="ng-binding ng-scope" and text()="Export"]'))
            )
            driver.execute_script("arguments[0].click();", export_button)
            time.sleep(2)
            print("Clicked on Export button")
        except Exception as e:
            print(f"Failed to click on Export button: {e}")

        try:
            export_csv_option = WebDriverWait(driver, 10).until(
                EC.element_to_be_clickable((By.XPATH, '//span[@class="ng-scope" and text()="CSV"]'))
            )
            driver.execute_script("arguments[0].click();", export_csv_option)
            print("Clicked on CSV option")
        except Exception as e:
            print(f"Failed to click on CSV option: {e}")

        new_filename = f'firewall_policies_{location}.csv'
        time.sleep(5)
        wait_for_download_and_rename(temp_directory, new_filename)

    except Exception as e:
        print(f"An error occurred while exporting policies for {ip}: {e}")
        driver.save_screenshot('error_screenshot.png')
    finally:
        driver.quit()

os.makedirs(download_directory, exist_ok=True)
os.makedirs(temp_directory, exist_ok=True)

def apply_styles(sheet):
    header_font = Font(bold=True, color="FFFFFF")
    header_fill = PatternFill(start_color="4F81BD", end_color="4F81BD", fill_type="solid")
    thin_border = Border(left=Side(style='thin'), right=Side(style='thin'), top=Side(style='thin'), bottom=Side(style='thin'))
    for cell in sheet[1]:
        cell.font = header_font
        cell.fill = header_fill
        cell.border = thin_border
    for row in sheet.iter_rows(min_row=2, max_row=sheet.max_row, min_col=1, max_col=sheet.max_column):
        for cell in row:
            cell.border = thin_border

def format_last_used_sheet(sheet, df):
    start_row = 1
    sheet.cell(row=start_row, column=1, value='Last Used Month Wise').font = Font(bold=True, size=14)
    start_row += 1
    headers = list(df.columns)
    for header in headers:
        sheet.cell(row=start_row, column=headers.index(header) + 1, value=header).font = Font(bold=True)
        sheet.cell(row=start_row, column=headers.index(header) + 1).fill = PatternFill(start_color="9BC2E6", end_color="9BC2E6", fill_type="solid")
        sheet.cell(row=start_row, column=headers.index(header) + 1).alignment = Alignment(horizontal="center", vertical="center")
    start_row += 1
    for row in dataframe_to_rows(df, index=False, header=False):
        for col_idx, value in enumerate(row, 1):
            sheet.cell(row=start_row, column=col_idx, value=value)
        start_row += 1
    apply_styles(sheet)

def add_table(sheet, df, table_title, start_row, start_col):
    sheet.cell(row=start_row, column=start_col, value=table_title).font = Font(bold=True, size=14)
    start_row += 1
    for r_idx, row in enumerate(dataframe_to_rows(df, index=False, header=True), start_row):
        for c_idx, value in enumerate(row, start_col):
            cell = sheet.cell(row=r_idx, column=c_idx, value=value)
            if r_idx == start_row:
                cell.font = Font(bold=True)
                cell.fill = PatternFill(start_color="9BC2E6", end_color="9BC2E6", fill_type="solid")
                cell.alignment = Alignment(horizontal="center", vertical="center")
    apply_styles(sheet)

for ip, location in firewall_ips:
    export_policies(ip, location)

file_list = [os.path.join(download_directory, f) for f in os.listdir(download_directory) if f.endswith('.csv')]
dfs = {location: pd.read_csv(file) for file in file_list}

combined_df = pd.concat(dfs.values(), ignore_index=True)

# Including all required columns in each DataFrame
columns = ['Name', 'First Used', 'Hit Count', 'ID', 'Last Used', 'Packets', 'Status', 'Comments']

active_policies_df = combined_df[combined_df['Status'] == 'active'][columns]
blocked_policies_df = combined_df[combined_df['Status'] == 'blocked'][columns]
zero_hit_count_df = combined_df[combined_df['Hit Count'] == 0][columns]
last_used_monthwise_df = combined_df[['Last Used']].dropna()
last_used_monthwise_df['Last Used'] = pd.to_datetime(last_used_monthwise_df['Last Used'], format='%Y/%m/%d %H:%M:%S')
last_used_monthwise_df = last_used_monthwise_df.groupby(last_used_monthwise_df['Last Used'].dt.to_period('M')).size().reset_index(name='Count')
all_source_destination_df = combined_df[['Source Address', 'Destination Address']].drop_duplicates()

output_path = os.path.join(download_directory, "formatted_firewall_policies.xlsx")
with pd.ExcelWriter(output_path, engine='openpyxl') as writer:
    combined_df.to_excel(writer, sheet_name='Combined', index=False)
    active_policies_df.to_excel(writer, sheet_name='Active Policies', index=False)
    blocked_policies_df.to_excel(writer, sheet_name='Blocked Policies', index=False)
    zero_hit_count_df.to_excel(writer, sheet_name='0 Hit Count', index=False)
    last_used_monthwise_df.to_excel(writer, sheet_name='Last Used Month Wise', index=False)
    all_source_destination_df.to_excel(writer, sheet_name='All Source-Destination', index=False)
    
    workbook = writer.book
    dashboard_sheet = workbook.create_sheet('Dashboard')
    add_table(dashboard_sheet, active_policies_df, "Active Policies", 1, 1)
    add_table(dashboard_sheet, blocked_policies_df, "Blocked Policies", 1, 12)
    add_table(dashboard_sheet, zero_hit_count_df, "0 Hit Count", 1, 24)
    add_table(dashboard_sheet, all_source_destination_df, "All Source-Destination", 1, 36)
    format_last_used_sheet(dashboard_sheet, last_used_monthwise_df)
    apply_styles(dashboard_sheet)

email_msg = EmailMessage()
email_msg['Subject'] = 'Firewall Policies Export and Analysis'
email_msg['From'] = smtp_username
email_msg['To'] = ', '.join(email_to)
email_msg['Cc'] = ', '.join(email_cc)
email_msg.set_content("Please find the attached firewall policies export and analysis report.")

with open(output_path, 'rb') as file:
    email_msg.add_attachment(file.read(), maintype='application', subtype='vnd.openxmlformats-officedocument.spreadsheetml.sheet', filename="formatted_firewall_policies.xlsx")

with smtplib.SMTP(smtp_server, smtp_port) as server:
    server.starttls()
    server.login(smtp_username, smtp_password)
    server.send_message(email_msg)

shutil.rmtree(download_directory)
shutil.rmtree(temp_directory)
