async def main():
    # Initialize Pyppeteer browser
    browser = await launch(headless=True, executablePath='C:\\Program Files\\Google\\Chrome\\Application\\chrome.exe')
    page = await browser.newPage()

    # Login to Azure portal
    await login_azure(page)

    # Calling the fetch_alerts function to retrieve alerts
    subscription_id = "<Your Subscription ID>"
    alerts = await fetch_alerts(subscription_id)
    
    # Saving filtered alerts to JSON file
    save_to_json(alerts)

    # Read CSV file
    with open("api_owners.csv", newline="") as csvfile:
        reader = csv.DictReader(csvfile)
        api_owners = {row["API_Name"]: row["Owner_Email"] for row in reader}

    # Iterate over alerts
    for alert in alerts:
        # Extract target resource and target resource name
        target_resource = alert.get("targetResource")
        target_resource_name = alert.get("targetResourceName")
        severity = alert.get("severity")
        alert_description = alert.get("name")

        # Check if target resource name matches any API name in CSV
        if target_resource_name in api_owners:
            # Get owner email for the matching API name
            owner_email = api_owners[target_resource_name]

            # Create URL for the alert
            full_url = f"https://portal.azure.com/#@fareportal.com/resource{target_resource}"

            # Open URL in Pyppeteer browser
            await page.goto(full_url)
            
            # Wait for page to load (adjust the delay as needed)
            await page.waitFor(5000)

            # Take screenshot and save with target resource name as filename
            screenshot_filename = f"{target_resource_name}.png"
            await page.screenshot({"path": screenshot_filename, "fullPage": True})

            # Send email with screenshot
            send_email(target_resource_name, owner_email, screenshot_filename, severity, alert_description)

    # Close browser
    await browser.close()

    print("Alert emails sent to respective owners.")

# Run the main function
asyncio.run(main())
