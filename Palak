# Simulate real-time updates
for seconds in range(200):
    # Update random metrics for demonstration purposes
    df_filtered["sentbyte_new"] = df_filtered["sentbyte"].astype(int) * np.random.choice(range(1, 5))
    df_filtered["rcvdbyte_new"] = df_filtered["rcvdbyte"].astype(int) * np.random.choice(range(1, 5))

    # Create KPIs
    avg_sentbyte = np.mean(df_filtered["sentbyte_new"])
    avg_rcvdbyte = np.mean(df_filtered["rcvdbyte_new"])
    session_count = df_filtered["sessionid"].nunique() + np.random.choice(range(1, 30))

    with placeholder.container():
        # Create three columns for KPIs
        kpi1, kpi2, kpi3 = st.columns(3)

        # Fill in those three columns with respective metrics or KPIs
        kpi1.metric(label="Avg Sent Bytes", value=round(avg_sentbyte), delta=round(avg_sentbyte) - 100)
        kpi2.metric(label="Avg Received Bytes", value=round(avg_rcvdbyte), delta=round(avg_rcvdbyte) - 100)
        kpi3.metric(label="Unique Sessions", value=session_count, delta=session_count - 10)

        # Create two columns for charts
        fig_col1, fig_col2 = st.columns(2)
        with fig_col1:
            st.markdown("### Sent Bytes Distribution")
            fig = px.histogram(data_frame=df_filtered, x="sentbyte_new")
            st.write(fig)
            
        with fig_col2:
            st.markdown("### Received Bytes Distribution")
            fig2 = px.histogram(data_frame=df_filtered, x="rcvdbyte_new")
            st.write(fig2)

        st.markdown("### Detailed Data View")
        st.dataframe(df_filtered)
        
        # Pause for a second before the next update
        time.sleep(1)
