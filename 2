import requests
import json

# Define the base URL
base_url = "https://10.1.3.96/api"

# Set the credentials for basic authentication
username = 'your_username'
password = 'your_password'

# Step 1: Retrieve the CSRF Token
csrf_endpoint = "/types/system/instances"
csrf_headers = {
    "X-EMC-REST-CLIENT": "true",
    "Accept": "application/json"
}

# Make the initial GET request to retrieve the CSRF token
csrf_response = requests.get(
    base_url + csrf_endpoint,
    headers=csrf_headers,
    auth=HTTPBasicAuth(username, password),
    verify=False  # Bypass SSL verification if necessary
)

if csrf_response.status_code == 200:
    csrf_token = csrf_response.headers.get('EMC-CSRF-TOKEN')
    print("CSRF token retrieved and added to session headers.")
else:
    print(f"Failed to retrieve CSRF token. Status Code: {csrf_response.status_code}")
    exit()

# Step 2: Query the capability profile by name
capability_profile_name = "YourCapabilityProfileName"
profile_endpoint = f"/instances/capabilityProfile/name:{capability_profile_name}"

# Set the headers for the capability profile request, including the CSRF token
profile_headers = {
    "X-EMC-REST-CLIENT": "true",
    "Accept": "application/json",
    "Content-type": "application/json",
    "EMC-CSRF-TOKEN": csrf_token
}

# Make the GET request to retrieve the capability profile details
profile_response = requests.get(
    base_url + profile_endpoint,
    headers=profile_headers,
    auth=HTTPBasicAuth(username, password),
    verify=False  # Bypass SSL verification if necessary
)

# Step 3: Save the unfiltered data to a file
if profile_response.status_code == 200:
    profile_data = profile_response.json()

    # Save the unfiltered data to a JSON file
    with open("unfiltered_data.json", "w") as outfile:
        json.dump(profile_data, outfile, indent=4)
    print("Unfiltered data saved to 'unfiltered_data.json'.")

    # Now filter the data
    try:
        content = profile_data.get("content", {})
        free_space = content.get("free_space", "N/A")
        preallocated_space = content.get("preallocated_space", "N/A")
        used_space = content.get("used_space", "N/A")

        print("\nSystem Capacity Details (Filtered):")
        print(f"Free Space: {free_space}")
        print(f"Preallocated Space: {preallocated_space}")
        print(f"Used Space: {used_space}")

    except KeyError:
        print("Failed to extract system capacity details from response.")
else:
    print(f"Failed to retrieve capability profile. Status Code: {profile_response.status_code}")
