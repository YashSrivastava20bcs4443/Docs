import pandas as pd
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_squared_error, r2_score

# Load the dataset
df = pd.read_csv('your_dataset.csv')

# Preprocess the data
df['Interval'] = pd.to_datetime(df['Interval'])
df.set_index('Interval', inplace=True)

# Define features and target
X = df[['Processor % Processor Time Total', 'Percent Memory Used']]
y = df['Average Max']

# Split the data
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Train the model
model = RandomForestRegressor(n_estimators=100, random_state=42)
model.fit(X_train, y_train)

# Make predictions
y_pred = model.predict(X_test)

# Evaluate the model
mse = mean_squared_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)
accuracy = model.score(X_test, y_test)

print(f'Mean Squared Error: {mse}')
print(f'R-squared: {r2}')
print(f'Accuracy: {accuracy}')

# Plot the time series graph
plt.figure(figsize=(14, 7))
plt.plot(df.index, df['Average Max'], label='Actual')
plt.plot(X_test.index, y_pred, label='Predicted', linestyle='--')
plt.xlabel('Time')
plt.ylabel('Average Max')
plt.title('Time Series of Actual vs Predicted Values')
plt.legend()
plt.show()
