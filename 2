import pandas as pd

# Load the CSV data
df = pd.read_csv('your_filtered_data.csv', skiprows=2)  # Adjust skiprows if needed

# Convert the 'Interval' column to datetime format
df['Interval'] = pd.to_datetime(df['Interval'])

# Sort the data by 'Interval' just in case it is not sorted
df = df.sort_values('Interval')

# Check for missing values and handle them (if any)
df = df.fillna(method='ffill')

print(df.head())



from statsmodels.tsa.arima.model import ARIMA
import numpy as np

# We will focus on the 'Average' column for the time series prediction
series = df.set_index('Interval')['Average']

# Split the data into training and testing sets
train_size = int(len(series) * 0.8)
train, test = series[:train_size], series[train_size:]

# Fit the ARIMA model (you can adjust the order based on ACF/PACF analysis)
model = ARIMA(train, order=(5,1,0))
model_fit = model.fit()

# Summary of the model
print(model_fit.summary())



from sklearn.metrics import mean_absolute_error

# Forecast the test set
forecast = model_fit.forecast(steps=len(test))

# Calculate accuracy
mae = mean_absolute_error(test, forecast)
print(f'Mean Absolute Error: {mae}')

# Combine the actual and predicted values for comparison
df_forecast = pd.DataFrame({'Actual': test, 'Forecast': forecast}, index=test.index)

print(df_forecast.head())


# Forecast the next day's average value
next_day_forecast = model_fit.forecast(steps=1)
print(f'Next Day Forecast: {next_day_forecast[0]}')
