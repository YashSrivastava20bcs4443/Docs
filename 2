# Weekly Alerts Analysis (Grouped Bar Chart by Date)
st.subheader("Weekly Alerts Analysis (Grouped by Date)")
if not filtered_data.empty:
    # Add Weekday and Date labels
    filtered_data['DateLabel'] = filtered_data['Day'].astype(str)  # Convert dates to strings for labels
    filtered_data['Weekday'] = filtered_data['@timestamp'].dt.day_name()

    # Group by Weekday and Date
    weekly_alerts = (
        filtered_data.groupby(['Weekday', 'DateLabel'])
        .size()
        .unstack(fill_value=0)
        .reindex(['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday'], fill_value=0)
    )

    # Plot the grouped bar chart
    fig, ax = plt.subplots(figsize=(12, 8))
    weekly_alerts.plot(
        kind='bar',
        ax=ax,
        colormap='tab20',  # Color palette for better distinction
        width=0.8,
        edgecolor='black'
    )
    ax.set_title("Weekly Alerts Analysis (By Date)", fontsize=16)
    ax.set_xlabel("Day of the Week", fontsize=12)
    ax.set_ylabel("Number of Alerts", fontsize=12)

    # Annotate each bar with its corresponding date and value
    for bars, date in zip(ax.containers, weekly_alerts.columns):
        for bar in bars:
            height = bar.get_height()
            if height > 0:  # Only annotate bars with values greater than 0
                ax.text(
                    bar.get_x() + bar.get_width() / 2,  # X-coordinate
                    height + 0.1,  # Slightly above the bar
                    f"{date}\n({int(height)})",  # Show the date and count
                    ha='center', va='bottom', fontsize=8, rotation=90
                )

    # Adjust legend and X-axis ticks
    ax.legend(title="Dates", bbox_to_anchor=(1.05, 1), loc='upper left', fontsize=10)
    ax.set_xticks(range(len(weekly_alerts.index)))
    ax.set_xticklabels(weekly_alerts.index, rotation=0)  # Keep weekday labels horizontal

    st.pyplot(fig)
else:
    st.write("No data available for the selected filters.")
