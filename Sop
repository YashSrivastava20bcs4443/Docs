Standard Operating Procedure (SOP) for Azure Resources Creation Using Terraform and PowerShell
Prerequisites
Azure Subscription: Ensure you have an active Azure subscription.
Terraform Installed: Install Terraform on your local machine or CI/CD environment.
Azure CLI: Install and configure Azure CLI.
Azure Repo: Have access to an Azure Repo for storing Terraform code.
PowerShell: Install PowerShell for running automation scripts.
Permissions: Ensure you have the necessary permissions to create and manage Azure resources.
Steps
1. Creating a Resource Group
Define the resource group name and location.
Use Terraform to configure and create the resource group.
2. Creating a Virtual Network (VNet) and Subnets
Define the VNet with the required address space.
Create subnets within the VNet with specified address ranges.
Ensure the Terraform configuration reflects these settings.
3. Creating Network Security Groups (NSG)
Define inbound and outbound security rules for each subnet.
Attach NSGs to their respective subnets in the VNet configuration.
4. Creating Application Gateways
Internal Application Gateway:
Define backend pools, routing rules, and health probes.
Ensure it's set up with the necessary internal configurations.
External Application Gateway:
Configure with a public frontend IP.
Define backend pools, routing rules, and health probes.
5. Creating Public IPs
Define public IP addresses for the external application gateway and load balancer.
Ensure these IPs are allocated and associated with the respective resources in the Terraform configuration.
6. Creating Load Balancers
External Load Balancer:
Configure with a frontend IP, backend pool, health probes, and load balancing rules.
Ensure it has a public IP.
Internal Load Balancer:
Set up with a frontend IP, backend pool, health probes, and load balancing rules.
Use a private IP for internal traffic.
7. Creating a Private DNS Zone
Define the private DNS zone in Terraform.
Add DNS records for VMs and other resources within the DNS zone.
8. Configuring VNet Peering
Set up VNet peering to enable communication between VNets.
Ensure the peering configuration allows for seamless connectivity.
9. Azure Site Recovery Setup
Recovery Vault:
Create and configure an Azure Recovery Vault through the Azure GUI.
Storage Account:
Create a storage account for recovery data.
Hyper-V Site Replication:
Enable replication for the Hyper-V site using the Recovery Vault.
10. Storing Terraform Code in Azure Repos
Ensure all Terraform configuration files are stored in Azure Repos.
Use Git for version control to manage and track changes in the code.
11. Setting Up Azure Pipeline for Terraform
Configure the Azure Pipeline to use the Terraform state file backend.
Specify the Azure subscription and resource details.
Set up approval workflows with Abdul Hamed as the approver for critical changes.
12. PowerShell Script for DNS Record Creation
Create a PowerShell script to automate DNS record creation.
Use VM names and IP addresses to generate and update DNS records in the private DNS zone.
Best Practices
Modular Code: Organize Terraform code into reusable modules for easier management and scalability.
Version Control: Use Git for effective version control of Terraform configurations.
State Management: Securely manage Terraform state files using remote state backends.
Automation: Implement CI/CD pipelines to automate resource deployment and updates.
Documentation: Maintain comprehensive and up-to-date documentation for all configurations and scripts.
Security: Follow Azure best practices for securing resources and managing access controls.
Conclusion
This SOP outlines the comprehensive steps to create, configure, and manage Azure resources using Terraform and PowerShell. By following these guidelines, you can ensure a consistent, efficient, and secure infrastructure setup.
